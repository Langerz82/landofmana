/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.3.6 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, https://github.com/requirejs/requirejs/blob/master/LICENSE
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global, setTimeout) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.3.6',
        commentRegExp = /\/\*[\s\S]*?\*\/|([^:"'=]|^)\/\/.*$/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    //Could match something like ')//comment', do not lose the prefix to comment.
    function commentReplace(match, singlePrefix) {
        return singlePrefix || '';
    }

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === 'object' && value &&
                        !isArray(value) && !isFunction(value) &&
                        !(value instanceof RegExp)) {

                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    function defaultOnError(err) {
        throw err;
    }

    //Allow getting a global that is expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttps://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite an existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                bundles: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            bundlesMap = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; i < ary.length; i++) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,
                baseParts = (baseName && baseName.split('/')),
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // If wanting node ID compatibility, strip .js from end
                // of IDs. Have to do this here, and not in nameToUrl
                // because node allows either .js or non .js to map
                // to same file.
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                // Starts with a '.' so need the baseName
                if (name[0].charAt(0) === '.' && baseParts) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name);
                }

                trimDots(name);
                name = name.join('/');
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop;
                                }
                            }
                        }
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            // If the name points to a package's name, use
            // the package main instead.
            pkgMain = getOwn(config.pkgs, name);

            return pkgMain ? pkgMain : name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);

                //Custom require that does not do map translation, since
                //ID is "absolute", already mapped/resolved.
                context.makeRequire(null, {
                    skipMap: true
                })([id]);

                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (isNormalized) {
                        normalizedName = name;
                    } else if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        // If nested plugin references, then do not try to
                        // normalize, as it will not normalize correctly. This
                        // places a restriction on resourceIds, and the longer
                        // term solution is not to normalize until plugins are
                        // loaded and all normalizations to allow for async
                        // loading of a loader plugin. But for now, fixes the
                        // common uses. Details in #1131
                        normalizedName = name.indexOf('!') === -1 ?
                                         normalize(name, parentName, applyMap) :
                                         name;
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === 'error') {
                    fn(mod.error);
                } else {
                    mod.on(name, fn);
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                each(globalDefQueue, function(queueItem) {
                    var id = queueItem[0];
                    if (typeof id === 'string') {
                        context.defQueueMap[id] = true;
                    }
                    defQueue.push(queueItem);
                });
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports);
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return getOwn(config.config, mod.map.id) || {};
                        },
                        exports: mod.exports || (mod.exports = {})
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                var map = mod.map,
                    modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    // Only fetch if not already in the defQueue.
                    if (!hasProp(context.defQueueMap, id)) {
                        this.fetch();
                    }
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error. However,
                            //only do it for define()'d  modules. require
                            //errbacks should not be called for failures in
                            //their callbacks (#699). However if a global
                            //onError is set, use that.
                            if ((this.events.error && this.map.isDefine) ||
                                req.onError !== defaultOnError) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            // Favor return value over exports. If node/cjs in play,
                            // then will not have a return value anyway. Favor
                            // module.exports assignment over exports object.
                            if (this.map.isDefine && exports === undefined) {
                                cjsModule = this.module;
                                if (cjsModule) {
                                    exports = cjsModule.exports;
                                } else if (this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                err.requireType = this.map.isDefine ? 'define' : 'require';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                var resLoadMaps = [];
                                each(this.depMaps, function (depMap) {
                                    resLoadMaps.push(depMap.normalizedMap || depMap);
                                });
                                req.onResourceLoad(context, this.map, resLoadMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap,
                                                      true);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.map.normalizedMap = normalizedMap;
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    //If a paths config, then just load that file instead to
                    //resolve the plugin, as it is built into that paths layer.
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            if (this.undefed) {
                                return;
                            }
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', bind(this, this.errback));
                        } else if (this.events.error) {
                            // No direct errback on this module, but something
                            // else is listening for errors, so be sure to
                            // propagate the error correctly.
                            on(depMap, 'error', bind(this, function(err) {
                                this.emit('error', err);
                            }));
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +
                        args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
            context.defQueueMap = {};
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            defQueueMap: {},
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                // Convert old style urlArgs string to a function.
                if (typeof cfg.urlArgs === 'string') {
                    var urlArgs = cfg.urlArgs;
                    cfg.urlArgs = function(id, url) {
                        return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;
                    };
                }

                //Save off the paths since they require special processing,
                //they are additive.
                var shim = config.shim,
                    objs = {
                        paths: true,
                        bundles: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {};
                        }
                        mixin(config[prop], value, true, true);
                    } else {
                        config[prop] = value;
                    }
                });

                //Reverse map the bundles
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function (value, prop) {
                        each(value, function (v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop;
                            }
                        });
                    });
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location, name;

                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;

                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location;
                        }

                        //Save pointer to main module ID for pkg name.
                        //Remove leading dot in main, so main paths are normalized,
                        //and remove any trailing .js, since different package
                        //envs have different conventions: some use a module name,
                        //some use a file name.
                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
                                     .replace(currDirRegExp, '')
                                     .replace(jsSuffixRegExp, '');
                    });
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id, null, true);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        mod.undefed = true;
                        removeScript(id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        //Clean queued defines too. Go backwards
                        //in array so that the splices do not
                        //mess up the iteration.
                        eachReverse(defQueue, function(args, i) {
                            if (args[0] === id) {
                                defQueue.splice(i, 1);
                            }
                        });
                        delete context.defQueueMap[id];

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overridden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }
                context.defQueueMap = {};

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url,
                    parentPath, bundleId,
                    pkgMain = getOwn(config.pkgs, moduleName);

                if (pkgMain) {
                    moduleName = pkgMain;
                }

                bundleId = getOwn(bundlesMap, moduleName);

                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt);
                }

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');

                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/^data\:|^blob\:|\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs && !/^blob\:/.test(url) ?
                       url + config.urlArgs(moduleName, url) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callback function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    var parents = [];
                    eachProp(registry, function(value, key) {
                        if (key.indexOf('_@r') !== 0) {
                            each(value.depMaps, function(depMap) {
                                if (depMap.id === data.id) {
                                    parents.push(key);
                                    return true;
                                }
                            });
                        }
                    });
                    return onError(makeError('scripterror', 'Script error for "' + data.id +
                                             (parents.length ?
                                             '", needed by: ' + parents.join(', ') :
                                             '"'), evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = defaultOnError;

    /**
     * Creates the node for the load command. Only used in browser envs.
     */
    req.createNode = function (config, moduleName, url) {
        var node = config.xhtml ?
                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                document.createElement('script');
        node.type = config.scriptType || 'text/javascript';
        node.charset = 'utf-8';
        node.async = true;
        return node;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = req.createNode(config, moduleName, url);

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/requirejs/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/requirejs/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //Calling onNodeCreated after all properties on the node have been
            //set, but before it is placed in the DOM.
            if (config.onNodeCreated) {
                config.onNodeCreated(node, config, moduleName, url);
            }

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation is that a build has been done so
                //that only one script needs to be loaded anyway. This may need
                //to be reevaluated if other use cases become common.

                // Post a task to the event loop to work around a bug in WebKit
                // where the worker gets garbage-collected after calling
                // importScripts(): https://webkit.org/b/153317
                setTimeout(function() {}, 0);
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser && !cfg.skipDataMain) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Preserve dataMain in case it is a path (i.e. contains '?')
                mainScript = dataMain;

                //Set final baseUrl if there is not already an explicit one,
                //but only do so if the data-main value is not a loader plugin
                //module ID.
                if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = mainScript.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since mainScript is now
                //like a module name.
                mainScript = mainScript.replace(jsSuffixRegExp, '');

                //If mainScript is still a path, fall back to dataMain
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain;
                }

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = null;
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps && isFunction(callback)) {
            deps = [];
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, commentReplace)
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        if (context) {
            context.defQueue.push([name, deps, callback]);
            context.defQueueMap[name] = true;
        } else {
            globalDefQueue.push([name, deps, callback]);
        }
    };

    define.amd = {
        jQuery: true
    };

    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this, (typeof setTimeout === 'undefined' ? undefined : setTimeout)));

define("requireLib", function(){});


/* Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 */
// Inspired by base2 and Prototype
var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;
    
// The base Class implementation (does nothing)
Class = function() {};

// Create a new Class that inherits from this class
Class.extend = function(prop) {
    var _super = this.prototype;
    
    // Instantiate a base class (but only create the instance,
    // don't run the init constructor)
    initializing = true;
    var prototype = new this();
    initializing = false;
    
    // Copy the properties over onto the new prototype
    for (var name in prop) {
        // Check if we're overwriting an existing function
        prototype[name] = typeof prop[name] == "function" &&
            typeof _super[name] == "function" && fnTest.test(prop[name]) ?
            (function(name, fn){
                return function() {
                    var tmp = this._super;
                   
                    // Add a new ._super() method that is the same method
                    // but on the super-class
                    this._super = _super[name];
                   
                    // The method only need to be bound temporarily, so we
                    // remove it when we're done executing
                    var ret = fn.apply(this, arguments);
                    this._super = tmp;
                   
                    return ret;
                };
            })(name, prop[name]) :
            prop[name];
    }
    
    // The dummy class constructor
    Class = function () {
        // All construction is actually done in the init method
        if ( !initializing && this.init )
            this.init.apply(this, arguments);
    }
    
    // Populate our constructed prototype object
    Class.prototype = prototype;
    
    // Enforce the constructor to be what we expect
    Class.constructor = Class;
    
    // And make this class extendable
    Class.extend = arguments.callee;
    
    return Class;
};

if(!(typeof exports === 'undefined')) {
    exports.Class = Class;
}

;
define("lib/class", function(){});

// Underscore.js 1.1.7
// (c) 2011 Jeremy Ashkenas, DocumentCloud Inc.
// Underscore is freely distributable under the MIT license.
// Portions of Underscore are inspired or borrowed from Prototype,
// Oliver Steele's Functional, and John Resig's Micro-Templating.
// For all details and documentation:
// http://documentcloud.github.com/underscore
(function(){var p=this,C=p._,m={},i=Array.prototype,n=Object.prototype,f=i.slice,D=i.unshift,E=n.toString,l=n.hasOwnProperty,s=i.forEach,t=i.map,u=i.reduce,v=i.reduceRight,w=i.filter,x=i.every,y=i.some,o=i.indexOf,z=i.lastIndexOf;n=Array.isArray;var F=Object.keys,q=Function.prototype.bind,b=function(a){return new j(a)};typeof module!=="undefined"&&module.exports?(module.exports=b,b._=b):p._=b;b.VERSION="1.1.7";var h=b.each=b.forEach=function(a,c,b){if(a!=null)if(s&&a.forEach===s)a.forEach(c,b);else if(a.length===
+a.length)for(var e=0,k=a.length;e<k;e++){if(e in a&&c.call(b,a[e],e,a)===m)break}else for(e in a)if(l.call(a,e)&&c.call(b,a[e],e,a)===m)break};b.map=function(a,c,b){var e=[];if(a==null)return e;if(t&&a.map===t)return a.map(c,b);h(a,function(a,g,G){e[e.length]=c.call(b,a,g,G)});return e};b.reduce=b.foldl=b.inject=function(a,c,d,e){var k=d!==void 0;a==null&&(a=[]);if(u&&a.reduce===u)return e&&(c=b.bind(c,e)),k?a.reduce(c,d):a.reduce(c);h(a,function(a,b,f){k?d=c.call(e,d,a,b,f):(d=a,k=!0)});if(!k)throw new TypeError("Reduce of empty array with no initial value");
return d};b.reduceRight=b.foldr=function(a,c,d,e){a==null&&(a=[]);if(v&&a.reduceRight===v)return e&&(c=b.bind(c,e)),d!==void 0?a.reduceRight(c,d):a.reduceRight(c);a=(b.isArray(a)?a.slice():b.toArray(a)).reverse();return b.reduce(a,c,d,e)};b.find=b.detect=function(a,c,b){var e;A(a,function(a,g,f){if(c.call(b,a,g,f))return e=a,!0});return e};b.filter=b.select=function(a,c,b){var e=[];if(a==null)return e;if(w&&a.filter===w)return a.filter(c,b);h(a,function(a,g,f){c.call(b,a,g,f)&&(e[e.length]=a)});return e};
b.reject=function(a,c,b){var e=[];if(a==null)return e;h(a,function(a,g,f){c.call(b,a,g,f)||(e[e.length]=a)});return e};b.every=b.all=function(a,c,b){var e=!0;if(a==null)return e;if(x&&a.every===x)return a.every(c,b);h(a,function(a,g,f){if(!(e=e&&c.call(b,a,g,f)))return m});return e};var A=b.some=b.any=function(a,c,d){c=c||b.identity;var e=!1;if(a==null)return e;if(y&&a.some===y)return a.some(c,d);h(a,function(a,b,f){if(e|=c.call(d,a,b,f))return m});return!!e};b.include=b.contains=function(a,c){var b=
!1;if(a==null)return b;if(o&&a.indexOf===o)return a.indexOf(c)!=-1;A(a,function(a){if(b=a===c)return!0});return b};b.invoke=function(a,c){var d=f.call(arguments,2);return b.map(a,function(a){return(c.call?c||a:a[c]).apply(a,d)})};b.pluck=function(a,c){return b.map(a,function(a){return a[c]})};b.max=function(a,c,d){if(!c&&b.isArray(a))return Math.max.apply(Math,a);var e={computed:-Infinity};h(a,function(a,b,f){b=c?c.call(d,a,b,f):a;b>=e.computed&&(e={value:a,computed:b})});return e.value};b.min=function(a,
c,d){if(!c&&b.isArray(a))return Math.min.apply(Math,a);var e={computed:Infinity};h(a,function(a,b,f){b=c?c.call(d,a,b,f):a;b<e.computed&&(e={value:a,computed:b})});return e.value};b.sortBy=function(a,c,d){return b.pluck(b.map(a,function(a,b,f){return{value:a,criteria:c.call(d,a,b,f)}}).sort(function(a,b){var c=a.criteria,d=b.criteria;return c<d?-1:c>d?1:0}),"value")};b.groupBy=function(a,b){var d={};h(a,function(a,f){var g=b(a,f);(d[g]||(d[g]=[])).push(a)});return d};b.sortedIndex=function(a,c,d){d||
(d=b.identity);for(var e=0,f=a.length;e<f;){var g=e+f>>1;d(a[g])<d(c)?e=g+1:f=g}return e};b.toArray=function(a){if(!a)return[];if(a.toArray)return a.toArray();if(b.isArray(a))return f.call(a);if(b.isArguments(a))return f.call(a);return b.values(a)};b.size=function(a){return b.toArray(a).length};b.first=b.head=function(a,b,d){return b!=null&&!d?f.call(a,0,b):a[0]};b.rest=b.tail=function(a,b,d){return f.call(a,b==null||d?1:b)};b.last=function(a){return a[a.length-1]};b.compact=function(a){return b.filter(a,
function(a){return!!a})};b.flatten=function(a){return b.reduce(a,function(a,d){if(b.isArray(d))return a.concat(b.flatten(d));a[a.length]=d;return a},[])};b.without=function(a){return b.difference(a,f.call(arguments,1))};b.uniq=b.unique=function(a,c){return b.reduce(a,function(a,e,f){if(0==f||(c===!0?b.last(a)!=e:!b.include(a,e)))a[a.length]=e;return a},[])};b.union=function(){return b.uniq(b.flatten(arguments))};b.intersection=b.intersect=function(a){var c=f.call(arguments,1);return b.filter(b.uniq(a),
function(a){return b.every(c,function(c){return b.indexOf(c,a)>=0})})};b.difference=function(a,c){return b.filter(a,function(a){return!b.include(c,a)})};b.zip=function(){for(var a=f.call(arguments),c=b.max(b.pluck(a,"length")),d=Array(c),e=0;e<c;e++)d[e]=b.pluck(a,""+e);return d};b.indexOf=function(a,c,d){if(a==null)return-1;var e;if(d)return d=b.sortedIndex(a,c),a[d]===c?d:-1;if(o&&a.indexOf===o)return a.indexOf(c);d=0;for(e=a.length;d<e;d++)if(a[d]===c)return d;return-1};b.lastIndexOf=function(a,
b){if(a==null)return-1;if(z&&a.lastIndexOf===z)return a.lastIndexOf(b);for(var d=a.length;d--;)if(a[d]===b)return d;return-1};b.range=function(a,b,d){arguments.length<=1&&(b=a||0,a=0);d=arguments[2]||1;for(var e=Math.max(Math.ceil((b-a)/d),0),f=0,g=Array(e);f<e;)g[f++]=a,a+=d;return g};b.bind=function(a,b){if(a.bind===q&&q)return q.apply(a,f.call(arguments,1));var d=f.call(arguments,2);return function(){return a.apply(b,d.concat(f.call(arguments)))}};b.bindAll=function(a){var c=f.call(arguments,1);
c.length==0&&(c=b.functions(a));h(c,function(c){a[c]=b.bind(a[c],a)});return a};b.memoize=function(a,c){var d={};c||(c=b.identity);return function(){var b=c.apply(this,arguments);return l.call(d,b)?d[b]:d[b]=a.apply(this,arguments)}};b.delay=function(a,b){var d=f.call(arguments,2);return setTimeout(function(){return a.apply(a,d)},b)};b.defer=function(a){return b.delay.apply(b,[a,1].concat(f.call(arguments,1)))};var B=function(a,b,d){var e;return function(){var f=this,g=arguments,h=function(){e=null;
a.apply(f,g)};d&&clearTimeout(e);if(d||!e)e=setTimeout(h,b)}};b.throttle=function(a,b){return B(a,b,!1)};b.debounce=function(a,b){return B(a,b,!0)};b.once=function(a){var b=!1,d;return function(){if(b)return d;b=!0;return d=a.apply(this,arguments)}};b.wrap=function(a,b){return function(){var d=[a].concat(f.call(arguments));return b.apply(this,d)}};b.compose=function(){var a=f.call(arguments);return function(){for(var b=f.call(arguments),d=a.length-1;d>=0;d--)b=[a[d].apply(this,b)];return b[0]}};b.after=
function(a,b){return function(){if(--a<1)return b.apply(this,arguments)}};b.keys=F||function(a){if(a!==Object(a))throw new TypeError("Invalid object");var b=[],d;for(d in a)l.call(a,d)&&(b[b.length]=d);return b};b.values=function(a){return b.map(a,b.identity)};b.functions=b.methods=function(a){var c=[],d;for(d in a)b.isFunction(a[d])&&c.push(d);return c.sort()};b.extend=function(a){h(f.call(arguments,1),function(b){for(var d in b)b[d]!==void 0&&(a[d]=b[d])});return a};b.defaults=function(a){h(f.call(arguments,
1),function(b){for(var d in b)a[d]==null&&(a[d]=b[d])});return a};b.clone=function(a){return b.isArray(a)?a.slice():b.extend({},a)};b.tap=function(a,b){b(a);return a};b.isEqual=function(a,c){if(a===c)return!0;var d=typeof a;if(d!=typeof c)return!1;if(a==c)return!0;if(!a&&c||a&&!c)return!1;if(a._chain)a=a._wrapped;if(c._chain)c=c._wrapped;if(a.isEqual)return a.isEqual(c);if(c.isEqual)return c.isEqual(a);if(b.isDate(a)&&b.isDate(c))return a.getTime()===c.getTime();if(b.isNaN(a)&&b.isNaN(c))return!1;
if(b.isRegExp(a)&&b.isRegExp(c))return a.source===c.source&&a.global===c.global&&a.ignoreCase===c.ignoreCase&&a.multiline===c.multiline;if(d!=="object")return!1;if(a.length&&a.length!==c.length)return!1;d=b.keys(a);var e=b.keys(c);if(d.length!=e.length)return!1;for(var f in a)if(!(f in c)||!b.isEqual(a[f],c[f]))return!1;return!0};b.isEmpty=function(a){if(b.isArray(a)||b.isString(a))return a.length===0;for(var c in a)if(l.call(a,c))return!1;return!0};b.isElement=function(a){return!!(a&&a.nodeType==
1)};b.isArray=n||function(a){return E.call(a)==="[object Array]"};b.isObject=function(a){return a===Object(a)};b.isArguments=function(a){return!(!a||!l.call(a,"callee"))};b.isFunction=function(a){return!(!a||!a.constructor||!a.call||!a.apply)};b.isString=function(a){return!!(a===""||a&&a.charCodeAt&&a.substr)};b.isNumber=function(a){return!!(a===0||a&&a.toExponential&&a.toFixed)};b.isNaN=function(a){return a!==a};b.isBoolean=function(a){return a===!0||a===!1};b.isDate=function(a){return!(!a||!a.getTimezoneOffset||
!a.setUTCFullYear)};b.isRegExp=function(a){return!(!a||!a.test||!a.exec||!(a.ignoreCase||a.ignoreCase===!1))};b.isNull=function(a){return a===null};b.isUndefined=function(a){return a===void 0};b.noConflict=function(){p._=C;return this};b.identity=function(a){return a};b.times=function(a,b,d){for(var e=0;e<a;e++)b.call(d,e)};b.mixin=function(a){h(b.functions(a),function(c){H(c,b[c]=a[c])})};var I=0;b.uniqueId=function(a){var b=I++;return a?a+b:b};b.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g};
b.template=function(a,c){var d=b.templateSettings;d="var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('"+a.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(d.interpolate,function(a,b){return"',"+b.replace(/\\'/g,"'")+",'"}).replace(d.evaluate||null,function(a,b){return"');"+b.replace(/\\'/g,"'").replace(/[\r\n\t]/g," ")+"__p.push('"}).replace(/\r/g,"\\r").replace(/\n/g,"\\n").replace(/\t/g,"\\t")+"');}return __p.join('');";d=new Function("obj",d);return c?d(c):d};
var j=function(a){this._wrapped=a};b.prototype=j.prototype;var r=function(a,c){return c?b(a).chain():a},H=function(a,c){j.prototype[a]=function(){var a=f.call(arguments);D.call(a,this._wrapped);return r(c.apply(b,a),this._chain)}};b.mixin(b);h(["pop","push","reverse","shift","sort","splice","unshift"],function(a){var b=i[a];j.prototype[a]=function(){b.apply(this._wrapped,arguments);return r(this._wrapped,this._chain)}});h(["concat","join","slice"],function(a){var b=i[a];j.prototype[a]=function(){return r(b.apply(this._wrapped,
arguments),this._chain)}});j.prototype.chain=function(){this._chain=!0;return this};j.prototype.value=function(){return this._wrapped}})();

define("lib/underscore.min", function(){});

// Domain Public by Eric Wendelin http://eriwen.com/ (2008)
//                  Luke Smith http://lucassmith.name/ (2008)
//                  Loic Dachary <loic@dachary.org> (2008)
//                  Johan Euphrosine <proppy@aminche.com> (2008)
//                  Øyvind Sean Kinsey http://kinsey.no/blog (2010)
//
// Information and discussions
// http://jspoker.pokersource.info/skin/test-printstacktrace.html
// http://eriwen.com/javascript/js-stack-trace/
// http://eriwen.com/javascript/stacktrace-update/
// http://pastie.org/253058
//
// guessFunctionNameFromLines comes from firebug
//
// Software License Agreement (BSD License)
//
// Copyright (c) 2007, Parakey Inc.
// All rights reserved.
//
// Redistribution and use of this software in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above
//   copyright notice, this list of conditions and the
//   following disclaimer.
//
// * Redistributions in binary form must reproduce the above
//   copyright notice, this list of conditions and the
//   following disclaimer in the documentation and/or other
//   materials provided with the distribution.
//
// * Neither the name of Parakey Inc. nor the names of its
//   contributors may be used to endorse or promote products
//   derived from this software without specific prior
//   written permission of Parakey Inc.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
// IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
// OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 * Main function giving a function stack trace with a forced or passed in Error 
 *
 * @cfg {Error} e The error to create a stacktrace from (optional)
 * @cfg {Boolean} guess If we should try to resolve the names of anonymous functions
 * @return {Array} of Strings with functions, lines, files, and arguments where possible 
 */
function printStackTrace(options) {
    var ex = (options && options.e) ? options.e : null;
    var guess = options ? !!options.guess : true;
    
    var p = new printStackTrace.implementation();
    var result = p.run(ex);
    return (guess) ? p.guessFunctions(result) : result;
}

printStackTrace.implementation = function() {};

printStackTrace.implementation.prototype = {
    run: function(ex) {
        // Use either the stored mode, or resolve it
        var mode = this._mode || this.mode();
        if (mode === 'other') {
            return this.other(arguments.callee);
        } else {
            ex = ex ||
                (function() {
                    try {
                        var _err = __undef__ << 1;
                    } catch (e) {
                        return e;
                    }
                })();
            return this[mode](ex);
        }
    },
    
    /**
     * @return {String} mode of operation for the environment in question.
     */
    mode: function() {
        try {
            var _err = __undef__ << 1;
        } catch (e) {
            if (e['arguments']) {
                return (this._mode = 'chrome');
            } else if (window.opera && e.stacktrace) {
                return (this._mode = 'opera10');
            } else if (e.stack) {
                return (this._mode = 'firefox');
            } else if (window.opera && !('stacktrace' in e)) { //Opera 9-
                return (this._mode = 'opera');
            }
        }
        return (this._mode = 'other');
    },

    /**
     * Given a context, function name, and callback function, overwrite it so that it calls
     * printStackTrace() first with a callback and then runs the rest of the body.
     * 
     * @param {Object} context of execution (e.g. window)
     * @param {String} functionName to instrument
     * @param {Function} function to call with a stack trace on invocation
     */
    instrumentFunction: function(context, functionName, callback) {
        context = context || window;
        context['_old' + functionName] = context[functionName];
        context[functionName] = function() { 
            callback.call(this, printStackTrace());
            return context['_old' + functionName].apply(this, arguments);
        };
        context[functionName]._instrumented = true;
    },
    
    /**
     * Given a context and function name of a function that has been
     * instrumented, revert the function to it's original (non-instrumented)
     * state.
     *
     * @param {Object} context of execution (e.g. window)
     * @param {String} functionName to de-instrument
     */
    deinstrumentFunction: function(context, functionName) {
        if (context[functionName].constructor === Function &&
                context[functionName]._instrumented &&
                context['_old' + functionName].constructor === Function) {
            context[functionName] = context['_old' + functionName];
        }
    },
    
    /**
     * Given an Error object, return a formatted Array based on Chrome's stack string.
     * 
     * @param e - Error object to inspect
     * @return Array<String> of function calls, files and line numbers
     */
    chrome: function(e) {
        return e.stack.replace(/^[^\n]*\n/, '').replace(/^[^\n]*\n/, '').replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@').split('\n');
    },

    /**
     * Given an Error object, return a formatted Array based on Firefox's stack string.
     * 
     * @param e - Error object to inspect
     * @return Array<String> of function calls, files and line numbers
     */
    firefox: function(e) {
        return e.stack.replace(/^[^\n]*\n/, '').replace(/(?:\n@:0)?\s+$/m, '').replace(/^\(/gm, '{anonymous}(').split('\n');
    },

    /**
     * Given an Error object, return a formatted Array based on Opera 10's stacktrace string.
     * 
     * @param e - Error object to inspect
     * @return Array<String> of function calls, files and line numbers
     */
    opera10: function(e) {
        var stack = e.stacktrace;
        var lines = stack.split('\n'), ANON = '{anonymous}',
            lineRE = /.*line (\d+), column (\d+) in ((<anonymous function\:?\s*(\S+))|([^\(]+)\([^\)]*\))(?: in )?(.*)\s*$/i, i, j, len;
        for (i = 2, j = 0, len = lines.length; i < len - 2; i++) {
            if (lineRE.test(lines[i])) {
                var location = RegExp.$6 + ':' + RegExp.$1 + ':' + RegExp.$2;
                var fnName = RegExp.$3;
                fnName = fnName.replace(/<anonymous function\s?(\S+)?>/g, ANON);
                lines[j++] = fnName + '@' + location;
            }
        }
        
        lines.splice(j, lines.length - j);
        return lines;
    },
    
    // Opera 7.x-9.x only!
    opera: function(e) {
        var lines = e.message.split('\n'), ANON = '{anonymous}', 
            lineRE = /Line\s+(\d+).*script\s+(http\S+)(?:.*in\s+function\s+(\S+))?/i, 
            i, j, len;
        
        for (i = 4, j = 0, len = lines.length; i < len; i += 2) {
            //TODO: RegExp.exec() would probably be cleaner here
            if (lineRE.test(lines[i])) {
                lines[j++] = (RegExp.$3 ? RegExp.$3 + '()@' + RegExp.$2 + RegExp.$1 : ANON + '()@' + RegExp.$2 + ':' + RegExp.$1) + ' -- ' + lines[i + 1].replace(/^\s+/, '');
            }
        }
        
        lines.splice(j, lines.length - j);
        return lines;
    },
    
    // Safari, IE, and others
    other: function(curr) {
        var ANON = '{anonymous}', fnRE = /function\s*([\w\-$]+)?\s*\(/i,
            stack = [], j = 0, fn, args;
        
        var maxStackSize = 10;
        while (curr && stack.length < maxStackSize) {
            fn = fnRE.test(curr.toString()) ? RegExp.$1 || ANON : ANON;
            args = Array.prototype.slice.call(curr['arguments']);
            stack[j++] = fn + '(' + this.stringifyArguments(args) + ')';
            curr = curr.caller;
        }
        return stack;
    },
    
    /**
     * Given arguments array as a String, subsituting type names for non-string types.
     *
     * @param {Arguments} object
     * @return {Array} of Strings with stringified arguments
     */
    stringifyArguments: function(args) {
        for (var i = 0; i < args.length; ++i) {
            var arg = args[i];
            if (arg === undefined) {
                args[i] = 'undefined';
            } else if (arg === null) {
                args[i] = 'null';
            } else if (arg.constructor) {
                if (arg.constructor === Array) {
                    if (arg.length < 3) {
                        args[i] = '[' + this.stringifyArguments(arg) + ']';
                    } else {
                        args[i] = '[' + this.stringifyArguments(Array.prototype.slice.call(arg, 0, 1)) + '...' + this.stringifyArguments(Array.prototype.slice.call(arg, -1)) + ']';
                    }
                } else if (arg.constructor === Object) {
                    args[i] = '#object';
                } else if (arg.constructor === Function) {
                    args[i] = '#function';
                } else if (arg.constructor === String) {
                    args[i] = '"' + arg + '"';
                }
            }
        }
        return args.join(',');
    },
    
    sourceCache: {},
    
    /**
     * @return the text from a given URL.
     */
    ajax: function(url) {
        var req = this.createXMLHTTPObject();
        if (!req) {
            return;
        }
        req.open('GET', url, false);
        req.setRequestHeader('User-Agent', 'XMLHTTP/1.0');
        req.send('');
        return req.responseText;
    },
    
    /**
     * Try XHR methods in order and store XHR factory.
     *
     * @return <Function> XHR function or equivalent
     */
    createXMLHTTPObject: function() {
        var xmlhttp, XMLHttpFactories = [
            function() {
                return new XMLHttpRequest();
            }, function() {
                return new ActiveXObject('Msxml2.XMLHTTP');
            }, function() {
                return new ActiveXObject('Msxml3.XMLHTTP');
            }, function() {
                return new ActiveXObject('Microsoft.XMLHTTP');
            }
        ];
        for (var i = 0; i < XMLHttpFactories.length; i++) {
            try {
                xmlhttp = XMLHttpFactories[i]();
                // Use memoization to cache the factory
                this.createXMLHTTPObject = XMLHttpFactories[i];
                return xmlhttp;
            } catch (e) {}
        }
    },

    /**
     * Given a URL, check if it is in the same domain (so we can get the source
     * via Ajax).
     *
     * @param url <String> source url
     * @return False if we need a cross-domain request
     */
    isSameDomain: function(url) {
        return url.indexOf(location.hostname) !== -1;
    },
    
    /**
     * Get source code from given URL if in the same domain.
     *
     * @param url <String> JS source URL
     * @return <String> Source code
     */
    getSource: function(url) {
        if (!(url in this.sourceCache)) {
            this.sourceCache[url] = this.ajax(url).split('\n');
        }
        return this.sourceCache[url];
    },
    
    guessFunctions: function(stack) {
        for (var i = 0; i < stack.length; ++i) {
            var reStack = /\{anonymous\}\(.*\)@(\w+:\/\/([\-\w\.]+)+(:\d+)?[^:]+):(\d+):?(\d+)?/;
            var frame = stack[i], m = reStack.exec(frame);
            if (m) {
                var file = m[1], lineno = m[4]; //m[7] is character position in Chrome
                if (file && this.isSameDomain(file) && lineno) {
                    var functionName = this.guessFunctionName(file, lineno);
                    stack[i] = frame.replace('{anonymous}', functionName);
                }
            }
        }
        return stack;
    },
    
    guessFunctionName: function(url, lineNo) {
        try {
            return this.guessFunctionNameFromLines(lineNo, this.getSource(url));
        } catch (e) {
            return 'getSource failed with url: ' + url + ', exception: ' + e.toString();
        }
    },
    
    guessFunctionNameFromLines: function(lineNo, source) {
        var reFunctionArgNames = /function ([^(]*)\(([^)]*)\)/;
        var reGuessFunction = /['"]?([0-9A-Za-z_]+)['"]?\s*[:=]\s*(function|eval|new Function)/;
        // Walk backwards from the first line in the function until we find the line which
        // matches the pattern above, which is the function definition
        var line = "", maxLines = 10;
        for (var i = 0; i < maxLines; ++i) {
            line = source[lineNo - i] + line;
            if (line !== undefined) {
                var m = reGuessFunction.exec(line);
                if (m && m[1]) {
                    return m[1];
                } else {
                    m = reFunctionArgNames.exec(line);
                    if (m && m[1]) {
                        return m[1];
                    }
                }
            }
        }
        return '(?)';
    }
};

define("lib/stacktrace", function(){});

/*Function.prototype.bind = function (bind) {
    var self = this;
    return function () {
        var args = Array.prototype.slice.call(arguments);
        return self.apply(bind || null, args);
    };
};*/

var Utils = {};

var isInt = function(n) {
    return (n % 1) === 0;
};

var TRANSITIONEND = 'transitionend webkitTransitionEnd oTransitionEnd';

// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
window.requestAnimFrame = (function(){
  return  window.requestAnimationFrame       ||
          window.webkitRequestAnimationFrame ||
          window.mozRequestAnimationFrame    ||
          window.oRequestAnimationFrame      ||
          window.msRequestAnimationFrame     ||
          function(/* function */ callback, /* DOMElement */ element){
            window.setTimeout(callback, 16);
          };
})();

var getUrlVars = function() {
	//from http://snipplr.com/view/19838/get-url-parameters/
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
        vars[key] = value;
    });
    return vars;
}

var distanceTo = function(x, y, x2, y2) {
    var distX = Math.abs(x - x2);
    var distY = Math.abs(y - y2);

    return (distX > distY) ? distX : distY;
};

var random = function(range) {
    return Math.floor(Math.random() * range);
};
var randomRange = function(min, max) {
    return min + (Math.random() * (max - min));
};

var randomInt = function(min, max) {
    return min + Math.floor(Math.random() * (max - min + 1));
};

Utils.randomRangeInt = randomInt;


var SendNative = function(data) {
	if (typeof Native !== 'undefined') {
		var newData = JSON.stringify(data)
	        newData = newData.replace("null", "0");
		//log.info("newData="+newData);
	        Native("dataCallback",newData);
	}
}

var fixed = function(value, length) {
    var buffer = '00000000' + value;
    return buffer.substring(buffer.length - length);
}

String.prototype.format = String.prototype.f = function() {
    var s = this,
        i = arguments.length;

    while (i--) {
        s = s.replace(new RegExp('\\{' + i + '\\}', 'gm'), arguments[i]);
    }
    return s;
};

/*var wait = function(ms) {
	var start = new Date().getTime();
	var end = start;
	while(end < start + ms) {
		end = new Date().getTime();
	}
}*/

var _base64ToArrayBuffer = function(base64) {
	var bin_string = window.atob(base64);
	var l = bin_string.length;
	var bytes = new Uint8Array(l);
	for (var i=0; i < l; ++i)
	{
		bytes[i] = bin_string.charCodeAt(i);
	}
	return bytes.buffer;
}

var _arrayBufferToBase64 = function(buffer) {
    var binary = '';
    var bytes = new Uint8Array( buffer );
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
        binary += String.fromCharCode( bytes[ i ] );
    }
    return window.btoa( binary );
}

var removeDoubleQuotes = function (val) {
	return val.toString().replace(/^"(.+(?="$))"$/,'$1');
}

var rgb2hex = function (rgb){
 rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
 return (rgb && rgb.length === 4) ?
  ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
  ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
  ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';
}

/**
 * Shuffles array in place. ES6 version
 * @param {Array} a items The array containing the items.
 */
var shuffle = function (a) {
    return;
};

var manhattenDistance = function (pos1, pos2) {
	return Math.abs(pos1.x-pos2.x) + Math.abs(pos1.y-pos2.y);
};

var realDistance = function (e1, e2) {
  return Utils.realDistance([e1.x,e1.y],[e2.x,e2.y]);
}

Utils.realDistance = function (p1, p2) {
	return ~~(Math.pow( Math.pow(p2[0]-p1[0],2) + Math.pow(p2[1]-p1[1],2), 0.5) );
};

var pointerEventToXY = function(e){
  var out = {x:0, y:0};
  if (e.originalEvent.hasOwnProperty('touches'))
  {
  	var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
    out.x = touch.pageX;
    out.y = touch.pageY;
  } else {
    out.x = e.pageX;
    out.y = e.pageY;
  }
  return out;
};

var ceilGrid = function (val) {
    return ~~(val+0.5);
};

if (!Number.prototype.ceilGrid) {
  Number.prototype.ceilGrid = function () {
    return ~~(this+0.5);
  }
}

var clamp = function (val, min, max) {
  var out = Math.min(Math.max(val, min), max);
  return out;
};

Number.prototype.clamp = function (min, max) {
  var out = Math.min(Math.max(this, min), max);
  //this = out;
  return out;
};

Utils.clamp = function(min, max, value) {
  return value.clamp(min,max);
}

Number.prototype.mod = function(n) {
    return ((this%n)+n)%n;
};

var remainder = function (a, b)
{
    return a - (a / b) * b;
};

var getGoldShortHand = function (val) {
  if (val <= 1000)
    return val;
  if (val <= 1000000)
    return (val/1000).toFixed(2)+"K";
  if (val <= 1000000000)
    return (val/1000000).toFixed(2)+"M";
  if (val <= 1000000000000)
    return (val/1000000000).toFixed(2)+"B";
  else
    return (val/1000000000000).toFixed(2)+"T";
}

var padding = function (val, size) {
    var s = val+"";
    while (s.length < size) s = "0" + s;
    return s;
}

var WORLDTIME = null;
var LOCALTIME = null;
var setWorldTime = function (localTime, remoteTime) {
  //WORLDTIME = new Date();
  //console.warn("localTime: "+localTime);
  //console.warn("remoteTime: "+remoteTime);
  //console.warn("Date.now(): "+Date.now());
  var diff = ~~((Date.now()-localTime)/2);
  WORLDTIME = remoteTime+diff;
  LOCALTIME = localTime+diff;
  console.warn("LOCALTIME: "+LOCALTIME);
  console.warn("WORLDTIME: "+WORLDTIME);
  console.warn("Date.diff: "+(LOCALTIME - WORLDTIME));
}

var getWorldTime = function () {
  return WORLDTIME + (Date.now()-LOCALTIME);
  //return Date.now();
}

var getTime = function () {
  return Date.now();
}

/*var getWorldTime = function () {
  console.warn("getWorldTime");
  //console.warn("LOCALTIME: "+LOCALTIME);
  //console.warn("WORLDTIME: "+WORLDTIME);
  console.warn("Date.now(): "+Date.now());
  return (LOCALTIME - WORLDTIME) + Date.now();
}*/

/*var getDiffTime = function (val) {
    console.warn("getWorldTime-NOW: " +getWorldTime());
    console.warn("getDiffTime-val:"+val);
    console.warn("getDiffTime result:"+(getWorldTime()-val));
    return (getWorldTime()-val);
}*/

Number.prototype.roundupsign = function () {
    return (this >= 0 || -1) * Math.ceil(Math.abs(this));
}

Number.prototype.roundUpTo = function (num)
{
    return Math.ceil(this/num)*num;
}

Number.prototype.roundTo = function (num)
{
    return Math.round(this/num)*num;
}

String.prototype.capitalizeFirstLetter = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
}

var getX = function(id, w) {
    if(id === 0) {
        return 0;
    }
    return (id % w === 0) ? w - 1 : (id % w) - 1;
};

if (!Array.prototype.parseInt) {
  Object.defineProperty(Array.prototype, 'parseInt', {
      value: function(){ return this.map(function (x) { return parseInt(x, 10); }); }
  });
}

if (!Array.prototype.In) {
  Object.defineProperty(Array.prototype, 'In', {
      value: function(index) { return (index >= 0 && index < this.length); }
  });
}

/*ArrayParseInt = function() {
  var l = this.length;
  for (var i=0; i < l; ++i)
    this[i] = parseInt(this[i]);
  return this;
}

ArrayIn = function(index) {
  if (index >= 0 && index < this.length)
    return true;
  return false;
}*/

if (!String.prototype.reverse) {
  String.prototype.reverse = function () {
    return this.split("").reverse().join("");
  }
}

var BinToHex = function (uint8array) {
    var len = Math.ceil(uint8array.length / 4);
    var hex = "";
    for (var i=0; i < len; i++) {
      j=i*4;
      var num = uint8array.slice(j,j+4).join('');
      hex += parseInt(num, 2).toString(16).toUpperCase();
    }
    return hex;
}

var HexToBin = function (hex) {
  var len = Math.ceil(hex.length);
  var tmp;
  var sum = "";
  for (var i=0; i < len; i++) {
    tmp = hex.substr(i,1);
    sum += parseInt(tmp, 16).toString(2).padStart(4,'0');
  }
  var uint8arr = new Uint8Array( sum.split('') );
  return uint8arr;
}

var RectContains = function (a, b) {
  // no horizontal overlap
	if (a.x1 >= b.x2 || b.x1 >= a.x2) return false;

	// no vertical overlap
	if (a.y1 >= b.y2 || b.y1 >= a.y2) return false;

	return true;
}

var msleep = function (ms) {
   return new Promise(resolve => setTimeout(resolve, ms));
}

Number.prototype.between = function(a, b) {
  var min = Math.min(a, b),
    max = Math.max(a, b);

  return this >= min && this <= max;
};

String.prototype.format = function (args) {
  // Storing arguments into an array
  var tmp = Array.isArray(args) ? args : arguments;
  // Using replace for iterating over the string
  // Select the match and check whether related arguments are present.
  // If yes, then replace the match with the argument.

  return this.replace(/{([0-9]+)}/g, function (match, index) {
    // checking whether the argument is present
    return typeof tmp[index] == 'undefined' ? match : tmp[index];
  });
};

var getGridPosition = function (x, y) {
  return {gx: x >> 4, gy: y >> 4};
}

var getPositionFromGrid = function (gx, gy) {
  return {x: gx << 4, y: gy << 4};
}
;
define("util", function(){});

/* global bootKind, _, exports, module, Types */

var ItemTypes = {};
var ItemData = {};
var KindData = {};

//ItemTypes.KindData = KindData;

ItemTypes.setKindData = function(kindData) {
	//log.info(JSON.stringify(kindData));
	KindData = kindData;
	ItemTypes.KindData = kindData;
};


ItemTypes.getData = function (k) {
	var data = KindData[k];
	if (!data || data.legacy == 1)
			return null;
	return data;
}

ItemTypes.getName = function(kind) {
    //if (kind == null) return false;
    try {
    	var item = KindData[kind];
    	if (!item) return '';
        return item.name;
   } catch(e) {
        log.error("No name found for item: "+KindData[kind]);
        log.error('Error stack: ' + e.stack);
    }
}

ItemTypes.getWeaponLevel = function(kind) {
    //if (kind == null) return false;
    try {
    	var item = KindData[kind];
    	if (!item) return 0;
        return item.modifier;
    } catch(e) {
        log.error("No level found for weapon: "+KindData[kind]);
        log.error('Error stack: ' + e.stack);
    }
};


ItemTypes.getArmorLevel = function(kind) {
    //if (kind == null) return false;
    try {
    	var item = KindData[kind];
        if (!item) return 0;
    	return item.modifier;
    } catch(e) {
        log.error("No level found for armor: "+KindData[kind]);
        log.error('Error stack: ' + e.stack);
    }
};

ItemTypes.getItemByLevel = function(type, level) {
	for (var kind in KindData)
	{
	    var item = KindData[kind];
	    if ((item.type == "armor" || item.type == "armorarcher") &&
		item.type == type && level == item.modifier)
	    {
		return item;
	    }
	    if ((item.type == "weapon" || item.type == "weaponarcher") &&
		item.type == type && level == item.modifier)
	    {
		return item;
	    }

	}
	return null;
};

ItemTypes.getLevelByKind = function(kind) {
    var item = KindData[kind];
    if (ItemTypes.isArmor(kind))
    {
			return item.level;
    }
    if (ItemTypes.isWeapon(kind))
    {
			return item.level;
    }
    return null;
};

ItemTypes.getType = function(kind) {
    //if (kind == null) return false;
    try {
    	var item = KindData[kind];
        return item.type;
    } catch(e) {
        log.error("No type found for item: "+kind);
        log.error('Error stack: ' + e.stack);
    }
};

ItemTypes.getBuyPrice = function(kind) {
    	var item = KindData[kind];
        if (!item) return 0;

				var type = item.type;
        if (type == "bow") {
        	return Math.floor(item.modifier*item.modifier*10);
        } else if (type == "chest") {
        	return Math.floor(item.modifier*item.modifier*10);
				} else if (ItemTypes.isArmor(kind)) {
					return Math.floor(item.modifier*item.modifier*10);
				} else if (ItemTypes.isWeapon(kind)) {
					return Math.floor(item.modifier*item.modifier*10);
        } else if (type == "object" && item.buy > 0) {
        	if (item.buyCount > 1)
        		return (item.buy * item.buyCount);
        	else
        		return item.buy;
        }
    	return 0;
};

ItemTypes.getCraftPrice = function (k) {
	var item = KindData[k];
	if (!item || item.legacy == 1)
			return 0;

	if (item.buy > 0) return item.buy;

	return ~~(ItemTypes.getBuyPrice(k) / 4);
};

ItemTypes.getEnchantSellPrice = function(item) {
	var value = ItemTypes.getBuyPrice(item.itemKind) / 10;
	//log.info("getEnchantSellPrice:" + itemKind + " " + enchantLevel + " " + durabilityMax + " " + experience);
	var enchantLevel = item.itemNumber;
	if (enchantLevel > 1)
	{
		//log.info("getEnchantSellPrice: " + ItemTypes.getEnchantPrice(itemKind,enchantLevel-1,experience) / 10);
		value += ~~(ItemTypes.getEnchantPrice(item) / 10);
	}
	//log.info("full price1:"+value);
	value *= item.itemDurabilityMax / 900;
	//log.info("full price2:"+value);
	return Math.floor(value);
};

ItemTypes.getEnchantPrice = function(item, current) {
			current = current || false;
			if (!item) return NaN;

			var data = KindData[item.itemKind];
			var enchantLevel = (current) ? item.itemNumber : item.itemNumber+1;
			var curLevel = item.itemNumber;
			if (enchantLevel >= 25) return NaN;

			experience = item.itemExperience;

      var baseLevel = data.modifier;
			console.info("getEnchantPrice: "+ItemTypes.itemExpForLevel[enchantLevel]);
			var cost = Math.floor(baseLevel*baseLevel*10 * Math.pow(2, enchantLevel) *
      	(1-(experience / ItemTypes.itemExpForLevel[enchantLevel])));
			console.info("cost: "+cost);
      return cost;
};

var Clamp = function(min, max, value) {
    if(value < min) {
        return min;
    } else if(value > max) {
        return max;
    } else {
        return value;
    }
};

ItemTypes.getRepairPrice = function(item) {
	var value = ItemTypes.getBuyPrice(item.itemKind) / 10;
	//var point = item.itemNumber;
	//console.info("kind="+kind+",point="+point);
	if (item.itemDurability == item.itemDurabilityMax)
		return 0;

	if (item.itemNumber > 1)
	{
			value = ItemTypes.getEnchantPrice(item, true) / 10;
	}
	var mp = ((item.itemDurabilityMax / 900) * (1 - (item.itemDurability / item.itemDurabilityMax)));
	log.info("getRepairPrice - mp: "+mp);
	value *= Clamp(0,1,mp);
	//value *= (item.itemDurability / item.itemDurabilityMax) * (item.itemDurabilityMax / 900) * item.itemNumber;
	//console.info("full price:"+value);
	return 1 + ~~(value);
};

ItemTypes.isEquippable = function(kind) {
	if (ItemTypes.isArmor(kind) ||
	    ItemTypes.isWeapon(kind) || ItemTypes.isArcherWeapon(kind) ||
		ItemTypes.isClothes(kind))
			return true;
	return false;
};

ItemTypes.isClothes = function(kind) {
    var item = KindData[kind];
    if (!item) return false;
    return (item.type === "helm" || item.type === "chest" || item.type === "gloves" || item.type === "boots");
};

ItemTypes.isArmor = function(kind) {
    var item = KindData[kind];
    if (!item) return false;
    return ItemTypes.isClothes(kind);
};

ItemTypes.isWeapon = function(kind) {
    var item = KindData[kind];
    if (!item) return false;
    return ItemTypes.isMeleeWeapon(kind) || ItemTypes.isArcherWeapon(kind);
};

ItemTypes.isEquipment = function(kind) {
    var item = KindData[kind];
    if (!item) return false;
    return ItemTypes.isWeapon(kind) || ItemTypes.isArmor(kind);
};

ItemTypes.getSpriteCode = function (kind) {
	var data = KindData[kind];
	if (ItemTypes.isArmor(kind))
	{
		return kind;
	}
	if (ItemTypes.isWeapon(kind))
	{
		var type = data.type;
		if (!type)
			return 0;
		if (type == "sword")
			return 1;
		if (type == "axe")
			return 2;
		if (type == "hammer")
			return 12;
		if (type == "bow")
			return 50;
	}
	return 0;
};

ItemTypes.getEquipmentSlot = function (kind) {
	if (ItemTypes.isWeapon(kind)) return 4;

	var item = KindData[kind];
	if (!item) return -1;

	if (item.type === "helm") return 0;
	if (item.type === "chest") return 1;
	if (item.type === "gloves") return 2;
	if (item.type === "boots") return 3;
	return -1;
};

ItemTypes.isMeleeWeapon = function(kind) {
    var item = KindData[kind];
    if (!item) return false;
    return item.type === "sword" ||
			item.type === "hammer" ||
			item.type === "axe";
};

ItemTypes.isHarvestWeapon = function(kind) {
    var item = KindData[kind];
    if (!item) return false;
    return item.type === "hammer" ||
			item.type === "axe";
};

ItemTypes.isArcherWeapon = function(kind) {
    var item = KindData[kind];
    if (!item) return false;
    return item.type === "bow";
};

ItemTypes.isObject = function(kind) {
    var item = KindData[kind];
    if (!item) return false;
    return item.type === "object";
};

ItemTypes.isCraftItem = function(kind) {
    var item = KindData[kind];
    if (!item) return false;
    return item.type === "craft";
};

ItemTypes.isLootItem = function(kind) {
    return kind >= 1000 && kind < 2000;
};

ItemTypes.isConsumableItem = function(kind) {
    var item = KindData[kind];
    if (!item)
    	return false;
    return item.type === "object";
};

ItemTypes.isHealingItem = function(kind) {
    var item = KindData[kind];
    if (!item)
    	return false;
    return item.type === "object" && (item.typemod=="health" || item.typemod=="healthpercent");
};

ItemTypes.isItem = function (kind) {
    var item = ItemTypes.KindData[kind];
    if (!item) return false;
    return ItemTypes.isArmor(kind) || ItemTypes.isWeapon(kind) ||
    	item.type == "object" ||
    	item.type == "craft";
}

ItemTypes.forEachKind = function(callback) {
    for(var k in kindData) {
    	//log.info("k="+JSON.stringify(k));
        callback(KindData[k], k);
    }
};

ItemTypes.forEachArmorKind = function(callback) {
    Types.forEachKind(function(kind, kindName) {
        if(ItemTypes.isArmor(kind)) {
            callback(kind, kindName);
        }
    });
};
ItemTypes.forEachWeaponKind = function(callback) {
    Types.forEachKind(function(kind, kindName) {
        if(ItemTypes.isWeapon(kind)) {
            callback(kind, kindName);
        }
    });
};

ItemTypes.forEachArcherWeaponKind = function(callback) {
    Types.forEachKind(function(kind, kindName) {
        if(ItemTypes.isArcherWeapon(kind)) {
            callback(kind, kindName);
        }
    });
};

ItemTypes.getItemListBy = function (itemType, minLevel, maxLevel) {
    var ItemsList = [];
    for(var k in KindData) {
    	var item = KindData[k];
    	if (!item || item.legacy == 1)
    	    continue;

			if (itemType == 4 && !(ItemTypes.isArmor(k) || ItemTypes.isWeapon(k)))
      {
          ItemsList.push({
						name: item.name,
						kind: k,
						type: item.type,
						buyCount: item.buycount,
						buyPrice: item.buy,
						craftPrice: ItemTypes.getCraftPrice(k),
						itemKind: k,
						itemNumber: item.buycount,
						craft: item.craft
          });
      }
      if (itemType == 1 && item.type == "object" && item.buy > 0)
      {
          ItemsList.push({
						name: item.name,
						kind: k,
						type: item.type,
						buyCount: item.buycount,
						buyPrice: item.buy,
						craftPrice: ItemTypes.getCraftPrice(k),
						itemKind: k,
						itemNumber: item.buycount,
						craft: item.craft
          });
      }
      else if (itemType == 2 && ItemTypes.isArmor(k) &&
      	 item.modifier >= minLevel && item.modifier <= maxLevel) {
          ItemsList.push({
						name: item.name,
						kind: k,
						type: item.type,
						buyCount: item.buyCount,
						buyPrice: ItemTypes.getBuyPrice(k),
						craftPrice: ItemTypes.getCraftPrice(k),
						rank: item.level,
						itemKind: k,
						itemNumber: item.buycount,
						craft: item.craft
          });
      }
      else if (itemType == 3 && ItemTypes.isWeapon(k) &&
      	 item.modifier >= minLevel && item.modifier <= maxLevel) {
          ItemsList.push({
						name: item.name,
						kind: k,
						type: item.type,
						buyCount: item.buyCount,
						buyPrice: ItemTypes.getBuyPrice(k),
						craftPrice: ItemTypes.getCraftPrice(k),
						rank: item.level,
						itemKind: k,
						itemNumber: item.buycount,
						craft: item.craft
          });
      }

    }

    if (ItemsList.length > 0 && ItemsList[0].rank > 0)
			ItemsList.sort(function(a, b) {
	    	return a.rank - b.rank;
    	});

    return ItemsList;
};


ItemTypes.Store = {
    isBuy: function(id) {
        var item = KindData[id];
        if (!item) return false;
        return (item.buy > 0) ? true : false;
    },
    isBuyMultiple: function(id) {
    	var item = KindData[id];
        if (!item) return false;
    	return (item.buycount > 0) ? true : false;
    },
    isSell: function(id) {
        var item = KindData[id];
        if (!item) return false;
        return (item.buy >= 2) ? true : false;
    },
    getBuyCount: function(id) {
    	var item = KindData[id];
        if (!item) return false;
    	return (item.buyCount > 1) ? item.buyCount : 1;
    },

    getItems: function (type, min, max)
    {
			return ItemTypes.getItemListBy(type, min, max);
    },
};

ItemTypes.itemExpForLevel = [];

ItemTypes.itemExpForLevel[0] = 0;

for(i=1; i < 30; i++){
    var points = Math.floor((i * 150) * Math.pow(2, i / 10.));
    //log.info("level_"+i+"="+points);
    ItemTypes.itemExpForLevel[i] = points;
};

ItemTypes.getItemLevel = function(exp){
    if (exp==0) return 1;
    var i=1;
    for(i=1; i < 30; i++){
        if(exp > ItemTypes.itemExpForLevel[i-1] &&
        	exp <= ItemTypes.itemExpForLevel[i]){
            return i;
        }
    }
    return 30;
};


if(!(typeof exports === 'undefined')) {
    module.exports = ItemTypes;
}
;
define("../shared/js/itemtypes", function(){});

/* global bootKind, _, exports, module, Types */

EventType = {
  KILLMOB: 1,
  LOOTITEM: 2,
  KILLPLAYER: 3,
  DAMAGE: 4,
  USE_NODE: 5,
  HARVEST: 6
};

QuestType = {
  KILLMOBKIND: 1,
  GETITEMKIND: 2,
  KILLMOBS: 3,
  HIDEANDSEEK: 4,
  USENODE: 5
};

QuestStatus = {
  STARTED: 0,
  INPROGRESS: 1,
  COMPLETE: 2
};

InventoryMode = {
  MODE_NORMAL: 0,
  MODE_SELL: 1,
  MODE_REPAIR: 2,
  MODE_ENCHANT: 3,
  MODE_BANK: 4,
  MODE_AUCTION: 5
};

SkillEffects = {
  SkillType: {
    SELF: 0,
    TARGET: 1,
    ATTACK: 2
  },
  TargetType: {
    SELF: 0,
    ENEMY: 1,
    PLAYER_AOE: 2,
    ENEMY_AOE: 3
  },
  EffectStat: {
    HP: 0,
    EP: 1,
    ATTACK: 2,
    DEFENSE: 3,
    DAMAGE: 4,
    FREEZE: 5,
    MOVESPEED: 6
  }
};

Types = {
    Messages: {
      BI_SYNCTIME: 200,

      CS_CREATE_USER: 1,
      CS_LOGIN_USER: 2,
      CS_CREATE_PLAYER: 3,
      CS_LOGIN_PLAYER: 4,
      CS_REMOVE_USER: 5,
      CS_ITEMSLOT: 6,
      CS_APPEARANCEUNLOCK: 7,
      CS_ATTACK: 8,
      CS_AUCTIONBUY: 9,
      CS_AUCTIONDELETE: 10,
      CS_AUCTIONOPEN: 11,
      CS_AUCTIONSELL: 12,
      CS_BANKRETRIEVE: 13,
      CS_BANKSTORE: 14,
      CS_CHAT: 15,
      CS_COLOR_TINT: 16,
      CS_BLOCK_MODIFY: 17,
      CS_GOLD: 18,
      CS_PARTY: 19,
      CS_HARVEST: 20,
      CS_USE_NODE: 21,
      CS_LOOKUPDATE: 22,
      CS_LOOT: 23,
      CS_MOVE: 24,
      CS_MOVEPATH: 25,
      CS_QUEST: 26,
      CS_STATADD: 27,
      CS_STOREBUY: 28,
      CS_STORE_MODITEM: 29,
      CS_STORESELL: 30,
      CS_TALKTONPC: 31,
      CS_CRAFT: 32,
      CS_TELEPORT_MAP: 33,
      CS_WHO: 34,
      CS_SKILL: 35,
      CS_SHORTCUT: 36,
      CS_REQUEST: 37,

      SC_ERROR: 100,
      SC_WORLDS: 101,
      SC_VERSION: 102,
      SC_PLAYER_SUM: 103,
      SC_PLAYER: 104,
      SC_ACHIEVEMENT: 105,
      SC_AUCTIONOPEN: 106,
      SC_ITEMSLOT: 107,
      SC_CHANGEPOINTS: 108,
      SC_CHAT: 109,
      SC_COLOR_TINT: 110,
      SC_DAMAGE: 111,
      SC_DESPAWN: 112,
      SC_SWAPSPRITE: 113,
      SC_APPEARANCE: 114,
      SC_GOLD: 115,
      SC_PARTY: 116,
      SC_PLAYERINFO: 117,
      SC_ITEMLEVELUP: 118,
      SC_STAT: 119,
      SC_LEVELUP: 120,
      SC_LIST: 121,
      SC_LOOKS: 122,
      SC_LOG: 123,
      SC_HARVEST: 124,
      SC_MOVE: 125,
      SC_MOVEPATH: 126,
      SC_NOTIFY: 127,
      SC_QUEST: 128,
      SC_SKILLEFFECTS: 129,
      SC_SKILLLOAD: 130,
      SC_SPAWN: 131,
      SC_SPEECH: 132,
      SC_STATINFO: 133,
      SC_TELEPORT_MAP: 134,
      SC_SKILL_XP: 135,
      SC_DIALOGUE: 136,
      SC_SET_SPRITE: 137,
      SC_SET_ANIMATION: 138,
      SC_BLOCK_MODIFY: 139,
      SC_PLAYERINFO: 140
    },

    Orientations: {
        NONE: 0,
        UP: 1,
        DOWN: 2,
        LEFT: 3,
        RIGHT: 4
    },

    EntityTypes: {
      NONE: 0,
      PLAYER: 1,
      MOB: 2,
      ITEM: 3,
      ITEMLOOT: 4,
      NPCSTATIC: 5,
      NPCMOVE: 6,
      CHEST: 7,
      BLOCK: 8,
      TRAP: 9,
      NODE: 10,
    },

    Keys: {
        ENTER: 13,
        UP: 38,
        DOWN: 40,
        LEFT: 37,
        RIGHT: 39,
        W: 87,
        A: 65,
        S: 83,
        D: 68,
        SPACE: 32,
        I: 73,
        H: 72,
        M: 77,
        P: 80,
        T: 84,
        Y: 89,
        KEYPAD_4: 100,
        KEYPAD_6: 102,
        KEYPAD_8: 104,
        KEYPAD_2: 98,
        KEY_0: 48,
        KEY_1: 49,
        KEY_2: 50,
        KEY_3: 51,
        KEY_4: 52,
        KEY_5: 53,
        KEY_6: 54,
        KEY_7: 55,
        KEY_8: 56,
        KEY_9: 57
    },

    Skills: {
      BLOODSUCKING: 1,
      RECOVERHEALTH: 2,
      HEALANDHEAL: 3,
      AVOIDATTACK: 4,
      ADDEXPERIENCE: 5,
      ATTACKWITHBLOOD: 6,
      CRITICALATTACK: 7,
      CRITICALRATIO: 8
    },

    PlayerClass: {
      FIGHTER: 0,
      ARCHER: 1,
      DEFENDER: 2,
      MAGE: 3
    },

    PlayerState: {
    	Roaming: 0,
    	Moving: 1,
    	Following: 2,
    	Aggro: 3,
    	Hurting: 4,
    	GettingItems: 5,
    	FollowPlayer: 6,
    },
};

var EntityTypes = Types.EntityTypes;

Types.expForLevel = [];
Types.defenseExp = [];
Types.attackExp = [];
Types.moveExp = [];
Types.skillExp = [];
Types.weaponExp = [];

Types.expForLevel[0] = 0;
Types.defenseExp[0] = 0;
Types.attackExp[0] = 0;
Types.moveExp[0] = 0;
Types.skillExp[0] = 0;
Types.weaponExp[0] = 0;

for(i=1; i < 50; i++){
    var points = Math.floor((i * 300) * Math.pow(1.5, i / 5.));
    console.info("level_"+i+"="+points);
    Types.expForLevel[i] = points;
    Types.defenseExp[i] = (points * 10)+50;
    Types.attackExp[i] = (points * 10)+50;
    Types.moveExp[i] = (points * 5)+20;
    Types.skillExp[i] = ~~(points / 1.5);
    Types.weaponExp[i] = (points * 10)+50;
};


Types.getLevel = function(exp){
    if (typeof(exp)=='undefined' || exp==0) return 1;
    for(var i=1; i < 200; i++){
        if(exp < Types.expForLevel[i]){
            return i;
        }
    }
    return 50;
};

Types.getAttackLevel = function(exp){
    if (exp==0) return 1;
    for(var i=1; i < 200; i++){
        if(exp < Types.attackExp[i]){
            return i;
        }
    }
    return 50;
};

Types.getDefenseLevel = function(exp){
    if (exp==0) return 1;
    for(var i=1; i < 200; i++){
        if(exp < Types.defenseExp[i]){
            return i;
        }
    }
    return 50;
};

Types.getMoveLevel = function(exp){
    if (exp==0) return 1;
    for(var i=1; i < 200; i++){
        if(exp < Types.moveExp[i]){
            return i;
        }
    }
    return 50;
};

Types.getWeaponLevel = function(exp){
    if (exp==0) return 1;
    for(var i=1; i < 200; i++){
        if(exp < Types.weaponExp[i]){
            return i;
        }
    }
    return 50;
};

Types.getSkillLevel = function(exp, level) {
    level = level || 1;
    if (typeof(exp)=='undefined' || exp==0) return 1;
    for(var i=level; i < 20; i++){
        if(exp < Types.skillExp[i]){
            return i;
        }
    }
    return 20;
};

Types.isPlayer = function(kind) {
	if (kind === 1 || kind === 222)
		return true;
	return false;
};

Types.getOrientationAsString = function(orientation) {
    switch(orientation) {
        case Types.Orientations.LEFT: return "left"; break;
        case Types.Orientations.RIGHT: return "right"; break;
        case Types.Orientations.UP: return "up"; break;
        case Types.Orientations.DOWN: return "down"; break;
    }
};

Types.getMessageTypeAsString = function(type) {
    var typeName;
    _.each(Types.Messages, function(value, name) {
        if(value === type) {
            typeName = name;
        }
    });
    if(!typeName) {
        typeName = "UNKNOWN";
    }
    return typeName;
};


if(!(typeof exports === 'undefined')) {
    module.exports = Types;
}
;
define("../shared/js/gametypes", function(){});

/*!
    localForage -- Offline Storage, Improved
    Version 1.5.2
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define('lib/localforage',[],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw (f.code="MODULE_NOT_FOUND", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function (global){
'use strict';
var Mutation = global.MutationObserver || global.WebKitMutationObserver;

var scheduleDrain;

{
  if (Mutation) {
    var called = 0;
    var observer = new Mutation(nextTick);
    var element = global.document.createTextNode('');
    observer.observe(element, {
      characterData: true
    });
    scheduleDrain = function () {
      element.data = (called = ++called % 2);
    };
  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
    var channel = new global.MessageChannel();
    channel.port1.onmessage = nextTick;
    scheduleDrain = function () {
      channel.port2.postMessage(0);
    };
  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
    scheduleDrain = function () {

      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var scriptEl = global.document.createElement('script');
      scriptEl.onreadystatechange = function () {
        nextTick();

        scriptEl.onreadystatechange = null;
        scriptEl.parentNode.removeChild(scriptEl);
        scriptEl = null;
      };
      global.document.documentElement.appendChild(scriptEl);
    };
  } else {
    scheduleDrain = function () {
      setTimeout(nextTick, 0);
    };
  }
}

var draining;
var queue = [];
//named nextTick for less confusing stack traces
function nextTick() {
  draining = true;
  var i, oldQueue;
  var len = queue.length;
  while (len) {
    oldQueue = queue;
    queue = [];
    i = -1;
    while (++i < len) {
      oldQueue[i]();
    }
    len = queue.length;
  }
  draining = false;
}

module.exports = immediate;
function immediate(task) {
  if (queue.push(task) === 1 && !draining) {
    scheduleDrain();
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(_dereq_,module,exports){
'use strict';
var immediate = _dereq_(1);

/* istanbul ignore next */
function INTERNAL() {}

var handlers = {};

var REJECTED = ['REJECTED'];
var FULFILLED = ['FULFILLED'];
var PENDING = ['PENDING'];

module.exports = exports = Promise;

function Promise(resolver) {
  if (typeof resolver !== 'function') {
    throw new TypeError('resolver must be a function');
  }
  this.state = PENDING;
  this.queue = [];
  this.outcome = void 0;
  if (resolver !== INTERNAL) {
    safelyResolveThenable(this, resolver);
  }
}

Promise.prototype["catch"] = function (onRejected) {
  return this.then(null, onRejected);
};
Promise.prototype.then = function (onFulfilled, onRejected) {
  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
    typeof onRejected !== 'function' && this.state === REJECTED) {
    return this;
  }
  var promise = new this.constructor(INTERNAL);
  if (this.state !== PENDING) {
    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
    unwrap(promise, resolver, this.outcome);
  } else {
    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
  }

  return promise;
};
function QueueItem(promise, onFulfilled, onRejected) {
  this.promise = promise;
  if (typeof onFulfilled === 'function') {
    this.onFulfilled = onFulfilled;
    this.callFulfilled = this.otherCallFulfilled;
  }
  if (typeof onRejected === 'function') {
    this.onRejected = onRejected;
    this.callRejected = this.otherCallRejected;
  }
}
QueueItem.prototype.callFulfilled = function (value) {
  handlers.resolve(this.promise, value);
};
QueueItem.prototype.otherCallFulfilled = function (value) {
  unwrap(this.promise, this.onFulfilled, value);
};
QueueItem.prototype.callRejected = function (value) {
  handlers.reject(this.promise, value);
};
QueueItem.prototype.otherCallRejected = function (value) {
  unwrap(this.promise, this.onRejected, value);
};

function unwrap(promise, func, value) {
  immediate(function () {
    var returnValue;
    try {
      returnValue = func(value);
    } catch (e) {
      return handlers.reject(promise, e);
    }
    if (returnValue === promise) {
      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
    } else {
      handlers.resolve(promise, returnValue);
    }
  });
}

handlers.resolve = function (self, value) {
  var result = tryCatch(getThen, value);
  if (result.status === 'error') {
    return handlers.reject(self, result.value);
  }
  var thenable = result.value;

  if (thenable) {
    safelyResolveThenable(self, thenable);
  } else {
    self.state = FULFILLED;
    self.outcome = value;
    var i = -1;
    var len = self.queue.length;
    while (++i < len) {
      self.queue[i].callFulfilled(value);
    }
  }
  return self;
};
handlers.reject = function (self, error) {
  self.state = REJECTED;
  self.outcome = error;
  var i = -1;
  var len = self.queue.length;
  while (++i < len) {
    self.queue[i].callRejected(error);
  }
  return self;
};

function getThen(obj) {
  // Make sure we only access the accessor once as required by the spec
  var then = obj && obj.then;
  if (obj && typeof obj === 'object' && typeof then === 'function') {
    return function appyThen() {
      then.apply(obj, arguments);
    };
  }
}

function safelyResolveThenable(self, thenable) {
  // Either fulfill, reject or reject with error
  var called = false;
  function onError(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.reject(self, value);
  }

  function onSuccess(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.resolve(self, value);
  }

  function tryToUnwrap() {
    thenable(onSuccess, onError);
  }

  var result = tryCatch(tryToUnwrap);
  if (result.status === 'error') {
    onError(result.value);
  }
}

function tryCatch(func, value) {
  var out = {};
  try {
    out.value = func(value);
    out.status = 'success';
  } catch (e) {
    out.status = 'error';
    out.value = e;
  }
  return out;
}

exports.resolve = resolve;
function resolve(value) {
  if (value instanceof this) {
    return value;
  }
  return handlers.resolve(new this(INTERNAL), value);
}

exports.reject = reject;
function reject(reason) {
  var promise = new this(INTERNAL);
  return handlers.reject(promise, reason);
}

exports.all = all;
function all(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var values = new Array(len);
  var resolved = 0;
  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    allResolver(iterable[i], i);
  }
  return promise;
  function allResolver(value, i) {
    self.resolve(value).then(resolveFromAll, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
    function resolveFromAll(outValue) {
      values[i] = outValue;
      if (++resolved === len && !called) {
        called = true;
        handlers.resolve(promise, values);
      }
    }
  }
}

exports.race = race;
function race(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    resolver(iterable[i]);
  }
  return promise;
  function resolver(value) {
    self.resolve(value).then(function (response) {
      if (!called) {
        called = true;
        handlers.resolve(promise, response);
      }
    }, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
  }
}

},{"1":1}],3:[function(_dereq_,module,exports){
(function (global){
'use strict';
if (typeof global.Promise !== 'function') {
  global.Promise = _dereq_(2);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"2":2}],4:[function(_dereq_,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function getIDB() {
    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */
    try {
        if (typeof indexedDB !== 'undefined') {
            return indexedDB;
        }
        if (typeof webkitIndexedDB !== 'undefined') {
            return webkitIndexedDB;
        }
        if (typeof mozIndexedDB !== 'undefined') {
            return mozIndexedDB;
        }
        if (typeof OIndexedDB !== 'undefined') {
            return OIndexedDB;
        }
        if (typeof msIndexedDB !== 'undefined') {
            return msIndexedDB;
        }
    } catch (e) {
        return;
    }
}

var idb = getIDB();

function isIndexedDBValid() {
    try {
        // Initialize IndexedDB; fall back to vendor-prefixed versions
        // if needed.
        if (!idb) {
            return false;
        }
        // We mimic PouchDB here;
        //
        // We test for openDatabase because IE Mobile identifies itself
        // as Safari. Oh the lulz...
        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);

        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;

        // Safari <10.1 does not meet our requirements for IDB support (#5572)
        // since Safari 10.1 shipped with fetch, we can use that to detect it
        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&
        // some outdated implementations of IDB that appear on Samsung
        // and HTC Android devices <4.4 are missing IDBKeyRange
        // See: https://github.com/mozilla/localForage/issues/128
        // See: https://github.com/mozilla/localForage/issues/272
        typeof IDBKeyRange !== 'undefined';
    } catch (e) {
        return false;
    }
}

// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
function createBlob(parts, properties) {
    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
    parts = parts || [];
    properties = properties || {};
    try {
        return new Blob(parts, properties);
    } catch (e) {
        if (e.name !== 'TypeError') {
            throw e;
        }
        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;
        var builder = new Builder();
        for (var i = 0; i < parts.length; i += 1) {
            builder.append(parts[i]);
        }
        return builder.getBlob(properties.type);
    }
}

// This is CommonJS because lie is an external dependency, so Rollup
// can just ignore it.
if (typeof Promise === 'undefined') {
    // In the "nopromises" build this will just throw if you don't have
    // a global promise object, but it would throw anyway later.
    _dereq_(3);
}
var Promise$1 = Promise;

function executeCallback(promise, callback) {
    if (callback) {
        promise.then(function (result) {
            callback(null, result);
        }, function (error) {
            callback(error);
        });
    }
}

function executeTwoCallbacks(promise, callback, errorCallback) {
    if (typeof callback === 'function') {
        promise.then(callback);
    }

    if (typeof errorCallback === 'function') {
        promise["catch"](errorCallback);
    }
}

function normalizeKey(key) {
    // Cast the key to a string, as that's all we can set as a key.
    if (typeof key !== 'string') {
        console.warn(key + ' used as a key, but it is not a string.');
        key = String(key);
    }

    return key;
}

// Some code originally from async_storage.js in
// [Gaia](https://github.com/mozilla-b2g/gaia).

var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
var supportsBlobs;
var dbContexts;
var toString = Object.prototype.toString;

// Transaction Modes
var READ_ONLY = 'readonly';
var READ_WRITE = 'readwrite';

// Transform a binary string to an array buffer, because otherwise
// weird stuff happens when you try to work with the binary string directly.
// It is known.
// From http://stackoverflow.com/questions/14967647/ (continues on next line)
// encode-decode-image-with-base64-breaks-image (2013-04-21)
function _binStringToArrayBuffer(bin) {
    var length = bin.length;
    var buf = new ArrayBuffer(length);
    var arr = new Uint8Array(buf);
    for (var i = 0; i < length; i++) {
        arr[i] = bin.charCodeAt(i);
    }
    return buf;
}

//
// Blobs are not supported in all versions of IndexedDB, notably
// Chrome <37 and Android <5. In those versions, storing a blob will throw.
//
// Various other blob bugs exist in Chrome v37-42 (inclusive).
// Detecting them is expensive and confusing to users, and Chrome 37-42
// is at very low usage worldwide, so we do a hacky userAgent check instead.
//
// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
//
// Code borrowed from PouchDB. See:
// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
//
function _checkBlobSupportWithoutCaching(idb) {
    return new Promise$1(function (resolve) {
        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
        var blob = createBlob(['']);
        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');

        txn.onabort = function (e) {
            // If the transaction aborts now its due to not being able to
            // write to the database, likely due to the disk being full
            e.preventDefault();
            e.stopPropagation();
            resolve(false);
        };

        txn.oncomplete = function () {
            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
            var matchedEdge = navigator.userAgent.match(/Edge\//);
            // MS Edge pretends to be Chrome 42:
            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
        };
    })["catch"](function () {
        return false; // error, so assume unsupported
    });
}

function _checkBlobSupport(idb) {
    if (typeof supportsBlobs === 'boolean') {
        return Promise$1.resolve(supportsBlobs);
    }
    return _checkBlobSupportWithoutCaching(idb).then(function (value) {
        supportsBlobs = value;
        return supportsBlobs;
    });
}

function _deferReadiness(dbInfo) {
    var dbContext = dbContexts[dbInfo.name];

    // Create a deferred object representing the current database operation.
    var deferredOperation = {};

    deferredOperation.promise = new Promise$1(function (resolve) {
        deferredOperation.resolve = resolve;
    });

    // Enqueue the deferred operation.
    dbContext.deferredOperations.push(deferredOperation);

    // Chain its promise to the database readiness.
    if (!dbContext.dbReady) {
        dbContext.dbReady = deferredOperation.promise;
    } else {
        dbContext.dbReady = dbContext.dbReady.then(function () {
            return deferredOperation.promise;
        });
    }
}

function _advanceReadiness(dbInfo) {
    var dbContext = dbContexts[dbInfo.name];

    // Dequeue a deferred operation.
    var deferredOperation = dbContext.deferredOperations.pop();

    // Resolve its promise (which is part of the database readiness
    // chain of promises).
    if (deferredOperation) {
        deferredOperation.resolve();
    }
}

function _rejectReadiness(dbInfo, err) {
    var dbContext = dbContexts[dbInfo.name];

    // Dequeue a deferred operation.
    var deferredOperation = dbContext.deferredOperations.pop();

    // Reject its promise (which is part of the database readiness
    // chain of promises).
    if (deferredOperation) {
        deferredOperation.reject(err);
    }
}

function _getConnection(dbInfo, upgradeNeeded) {
    return new Promise$1(function (resolve, reject) {

        if (dbInfo.db) {
            if (upgradeNeeded) {
                _deferReadiness(dbInfo);
                dbInfo.db.close();
            } else {
                return resolve(dbInfo.db);
            }
        }

        var dbArgs = [dbInfo.name];

        if (upgradeNeeded) {
            dbArgs.push(dbInfo.version);
        }

        var openreq = idb.open.apply(idb, dbArgs);

        if (upgradeNeeded) {
            openreq.onupgradeneeded = function (e) {
                var db = openreq.result;
                try {
                    db.createObjectStore(dbInfo.storeName);
                    if (e.oldVersion <= 1) {
                        // Added when support for blob shims was added
                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
                    }
                } catch (ex) {
                    if (ex.name === 'ConstraintError') {
                        console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
                    } else {
                        throw ex;
                    }
                }
            };
        }

        openreq.onerror = function (e) {
            e.preventDefault();
            reject(openreq.error);
        };

        openreq.onsuccess = function () {
            resolve(openreq.result);
            _advanceReadiness(dbInfo);
        };
    });
}

function _getOriginalConnection(dbInfo) {
    return _getConnection(dbInfo, false);
}

function _getUpgradedConnection(dbInfo) {
    return _getConnection(dbInfo, true);
}

function _isUpgradeNeeded(dbInfo, defaultVersion) {
    if (!dbInfo.db) {
        return true;
    }

    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
    var isDowngrade = dbInfo.version < dbInfo.db.version;
    var isUpgrade = dbInfo.version > dbInfo.db.version;

    if (isDowngrade) {
        // If the version is not the default one
        // then warn for impossible downgrade.
        if (dbInfo.version !== defaultVersion) {
            console.warn('The database "' + dbInfo.name + '"' + ' can\'t be downgraded from version ' + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
        }
        // Align the versions to prevent errors.
        dbInfo.version = dbInfo.db.version;
    }

    if (isUpgrade || isNewStore) {
        // If the store is new then increment the version (if needed).
        // This will trigger an "upgradeneeded" event which is required
        // for creating a store.
        if (isNewStore) {
            var incVersion = dbInfo.db.version + 1;
            if (incVersion > dbInfo.version) {
                dbInfo.version = incVersion;
            }
        }

        return true;
    }

    return false;
}

// encode a blob for indexeddb engines that don't support blobs
function _encodeBlob(blob) {
    return new Promise$1(function (resolve, reject) {
        var reader = new FileReader();
        reader.onerror = reject;
        reader.onloadend = function (e) {
            var base64 = btoa(e.target.result || '');
            resolve({
                __local_forage_encoded_blob: true,
                data: base64,
                type: blob.type
            });
        };
        reader.readAsBinaryString(blob);
    });
}

// decode an encoded blob
function _decodeBlob(encodedBlob) {
    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
    return createBlob([arrayBuff], { type: encodedBlob.type });
}

// is this one of our fancy encoded blobs?
function _isEncodedBlob(value) {
    return value && value.__local_forage_encoded_blob;
}

// Specialize the default `ready()` function by making it dependent
// on the current database operations. Thus, the driver will be actually
// ready when it's been initialized (default) *and* there are no pending
// operations on the database (initiated by some other instances).
function _fullyReady(callback) {
    var self = this;

    var promise = self._initReady().then(function () {
        var dbContext = dbContexts[self._dbInfo.name];

        if (dbContext && dbContext.dbReady) {
            return dbContext.dbReady;
        }
    });

    executeTwoCallbacks(promise, callback, callback);
    return promise;
}

// Try to establish a new db connection to replace the
// current one which is broken (i.e. experiencing
// InvalidStateError while creating a transaction).
function _tryReconnect(dbInfo) {
    _deferReadiness(dbInfo);

    var dbContext = dbContexts[dbInfo.name];
    var forages = dbContext.forages;

    for (var i = 0; i < forages.length; i++) {
        if (forages[i]._dbInfo.db) {
            forages[i]._dbInfo.db.close();
            forages[i]._dbInfo.db = null;
        }
    }

    return _getConnection(dbInfo, false).then(function (db) {
        for (var j = 0; j < forages.length; j++) {
            forages[j]._dbInfo.db = db;
        }
    })["catch"](function (err) {
        _rejectReadiness(dbInfo, err);
        throw err;
    });
}

// FF doesn't like Promises (micro-tasks) and IDDB store operations,
// so we have to do it with callbacks
function createTransaction(dbInfo, mode, callback) {
    try {
        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
        callback(null, tx);
    } catch (err) {
        if (!dbInfo.db || err.name === 'InvalidStateError') {
            return _tryReconnect(dbInfo).then(function () {

                var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
                callback(null, tx);
            });
        }

        callback(err);
    }
}

// Open the IndexedDB database (automatically creates one if one didn't
// previously exist), using any options set in the config.
function _initStorage(options) {
    var self = this;
    var dbInfo = {
        db: null
    };

    if (options) {
        for (var i in options) {
            dbInfo[i] = options[i];
        }
    }

    // Initialize a singleton container for all running localForages.
    if (!dbContexts) {
        dbContexts = {};
    }

    // Get the current context of the database;
    var dbContext = dbContexts[dbInfo.name];

    // ...or create a new context.
    if (!dbContext) {
        dbContext = {
            // Running localForages sharing a database.
            forages: [],
            // Shared database.
            db: null,
            // Database readiness (promise).
            dbReady: null,
            // Deferred operations on the database.
            deferredOperations: []
        };
        // Register the new context in the global container.
        dbContexts[dbInfo.name] = dbContext;
    }

    // Register itself as a running localForage in the current context.
    dbContext.forages.push(self);

    // Replace the default `ready()` function with the specialized one.
    if (!self._initReady) {
        self._initReady = self.ready;
        self.ready = _fullyReady;
    }

    // Create an array of initialization states of the related localForages.
    var initPromises = [];

    function ignoreErrors() {
        // Don't handle errors here,
        // just makes sure related localForages aren't pending.
        return Promise$1.resolve();
    }

    for (var j = 0; j < dbContext.forages.length; j++) {
        var forage = dbContext.forages[j];
        if (forage !== self) {
            // Don't wait for itself...
            initPromises.push(forage._initReady()["catch"](ignoreErrors));
        }
    }

    // Take a snapshot of the related localForages.
    var forages = dbContext.forages.slice(0);

    // Initialize the connection process only when
    // all the related localForages aren't pending.
    return Promise$1.all(initPromises).then(function () {
        dbInfo.db = dbContext.db;
        // Get the connection or open a new one without upgrade.
        return _getOriginalConnection(dbInfo);
    }).then(function (db) {
        dbInfo.db = db;
        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
            // Reopen the database for upgrading.
            return _getUpgradedConnection(dbInfo);
        }
        return db;
    }).then(function (db) {
        dbInfo.db = dbContext.db = db;
        self._dbInfo = dbInfo;
        // Share the final connection amongst related localForages.
        for (var k = 0; k < forages.length; k++) {
            var forage = forages[k];
            if (forage !== self) {
                // Self is already up-to-date.
                forage._dbInfo.db = dbInfo.db;
                forage._dbInfo.version = dbInfo.version;
            }
        }
    });
}

function getItem(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.get(key);

                    req.onsuccess = function () {
                        var value = req.result;
                        if (value === undefined) {
                            value = null;
                        }
                        if (_isEncodedBlob(value)) {
                            value = _decodeBlob(value);
                        }
                        resolve(value);
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Iterate over all items stored in database.
function iterate(iterator, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.openCursor();
                    var iterationNumber = 1;

                    req.onsuccess = function () {
                        var cursor = req.result;

                        if (cursor) {
                            var value = cursor.value;
                            if (_isEncodedBlob(value)) {
                                value = _decodeBlob(value);
                            }
                            var result = iterator(value, cursor.key, iterationNumber++);

                            // when the iterator callback retuns any
                            // (non-`undefined`) value, then we stop
                            // the iteration immediately
                            if (result !== void 0) {
                                resolve(result);
                            } else {
                                cursor["continue"]();
                            }
                        } else {
                            resolve();
                        }
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);

    return promise;
}

function setItem(key, value, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        var dbInfo;
        self.ready().then(function () {
            dbInfo = self._dbInfo;
            if (toString.call(value) === '[object Blob]') {
                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
                    if (blobSupport) {
                        return value;
                    }
                    return _encodeBlob(value);
                });
            }
            return value;
        }).then(function (value) {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.put(value, key);

                    // The reason we don't _save_ null is because IE 10 does
                    // not support saving the `null` type in IndexedDB. How
                    // ironic, given the bug below!
                    // See: https://github.com/mozilla/localForage/issues/161
                    if (value === null) {
                        value = undefined;
                    }

                    transaction.oncomplete = function () {
                        // Cast to undefined so the value passed to
                        // callback/promise is the same as what one would get out
                        // of `getItem()` later. This leads to some weirdness
                        // (setItem('foo', undefined) will return `null`), but
                        // it's not my fault localStorage is our baseline and that
                        // it's weird.
                        if (value === undefined) {
                            value = null;
                        }

                        resolve(value);
                    };
                    transaction.onabort = transaction.onerror = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function removeItem(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    // We use a Grunt task to make this safe for IE and some
                    // versions of Android (including those used by Cordova).
                    // Normally IE won't like `.delete()` and will insist on
                    // using `['delete']()`, but we have a build step that
                    // fixes this for us now.
                    var req = store["delete"](key);
                    transaction.oncomplete = function () {
                        resolve();
                    };

                    transaction.onerror = function () {
                        reject(req.error);
                    };

                    // The request will be also be aborted if we've exceeded our storage
                    // space.
                    transaction.onabort = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function clear(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.clear();

                    transaction.oncomplete = function () {
                        resolve();
                    };

                    transaction.onabort = transaction.onerror = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function length(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.count();

                    req.onsuccess = function () {
                        resolve(req.result);
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function key(n, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        if (n < 0) {
            resolve(null);

            return;
        }

        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var advanced = false;
                    var req = store.openCursor();

                    req.onsuccess = function () {
                        var cursor = req.result;
                        if (!cursor) {
                            // this means there weren't enough keys
                            resolve(null);

                            return;
                        }

                        if (n === 0) {
                            // We have the first key, return it if that's what they
                            // wanted.
                            resolve(cursor.key);
                        } else {
                            if (!advanced) {
                                // Otherwise, ask the cursor to skip ahead n
                                // records.
                                advanced = true;
                                cursor.advance(n);
                            } else {
                                // When we get here, we've got the nth key.
                                resolve(cursor.key);
                            }
                        }
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function keys(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.openCursor();
                    var keys = [];

                    req.onsuccess = function () {
                        var cursor = req.result;

                        if (!cursor) {
                            resolve(keys);
                            return;
                        }

                        keys.push(cursor.key);
                        cursor["continue"]();
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

var asyncStorage = {
    _driver: 'asyncStorage',
    _initStorage: _initStorage,
    _support: isIndexedDBValid(),
    iterate: iterate,
    getItem: getItem,
    setItem: setItem,
    removeItem: removeItem,
    clear: clear,
    length: length,
    key: key,
    keys: keys
};

function isWebSQLValid() {
    return typeof openDatabase === 'function';
}

// Sadly, the best way to save binary data in WebSQL/localStorage is serializing
// it to Base64, so this is how we store it to prevent very strange errors with less
// verbose ways of binary <-> string data storage.
var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

var BLOB_TYPE_PREFIX = '~~local_forage_type~';
var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;

var SERIALIZED_MARKER = '__lfsc__:';
var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;

// OMG the serializations!
var TYPE_ARRAYBUFFER = 'arbf';
var TYPE_BLOB = 'blob';
var TYPE_INT8ARRAY = 'si08';
var TYPE_UINT8ARRAY = 'ui08';
var TYPE_UINT8CLAMPEDARRAY = 'uic8';
var TYPE_INT16ARRAY = 'si16';
var TYPE_INT32ARRAY = 'si32';
var TYPE_UINT16ARRAY = 'ur16';
var TYPE_UINT32ARRAY = 'ui32';
var TYPE_FLOAT32ARRAY = 'fl32';
var TYPE_FLOAT64ARRAY = 'fl64';
var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;

var toString$1 = Object.prototype.toString;

function stringToBuffer(serializedString) {
    // Fill the string into a ArrayBuffer.
    var bufferLength = serializedString.length * 0.75;
    var len = serializedString.length;
    var i;
    var p = 0;
    var encoded1, encoded2, encoded3, encoded4;

    if (serializedString[serializedString.length - 1] === '=') {
        bufferLength--;
        if (serializedString[serializedString.length - 2] === '=') {
            bufferLength--;
        }
    }

    var buffer = new ArrayBuffer(bufferLength);
    var bytes = new Uint8Array(buffer);

    for (i = 0; i < len; i += 4) {
        encoded1 = BASE_CHARS.indexOf(serializedString[i]);
        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);

        /*jslint bitwise: true */
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return buffer;
}

// Converts a buffer to a string to store, serialized, in the backend
// storage library.
function bufferToString(buffer) {
    // base64-arraybuffer
    var bytes = new Uint8Array(buffer);
    var base64String = '';
    var i;

    for (i = 0; i < bytes.length; i += 3) {
        /*jslint bitwise: true */
        base64String += BASE_CHARS[bytes[i] >> 2];
        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
        base64String += BASE_CHARS[bytes[i + 2] & 63];
    }

    if (bytes.length % 3 === 2) {
        base64String = base64String.substring(0, base64String.length - 1) + '=';
    } else if (bytes.length % 3 === 1) {
        base64String = base64String.substring(0, base64String.length - 2) + '==';
    }

    return base64String;
}

// Serialize a value, afterwards executing a callback (which usually
// instructs the `setItem()` callback/promise to be executed). This is how
// we store binary data with localStorage.
function serialize(value, callback) {
    var valueType = '';
    if (value) {
        valueType = toString$1.call(value);
    }

    // Cannot use `value instanceof ArrayBuffer` or such here, as these
    // checks fail when running the tests using casper.js...
    //
    // TODO: See why those tests fail and use a better solution.
    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {
        // Convert binary arrays to a string and prefix the string with
        // a special marker.
        var buffer;
        var marker = SERIALIZED_MARKER;

        if (value instanceof ArrayBuffer) {
            buffer = value;
            marker += TYPE_ARRAYBUFFER;
        } else {
            buffer = value.buffer;

            if (valueType === '[object Int8Array]') {
                marker += TYPE_INT8ARRAY;
            } else if (valueType === '[object Uint8Array]') {
                marker += TYPE_UINT8ARRAY;
            } else if (valueType === '[object Uint8ClampedArray]') {
                marker += TYPE_UINT8CLAMPEDARRAY;
            } else if (valueType === '[object Int16Array]') {
                marker += TYPE_INT16ARRAY;
            } else if (valueType === '[object Uint16Array]') {
                marker += TYPE_UINT16ARRAY;
            } else if (valueType === '[object Int32Array]') {
                marker += TYPE_INT32ARRAY;
            } else if (valueType === '[object Uint32Array]') {
                marker += TYPE_UINT32ARRAY;
            } else if (valueType === '[object Float32Array]') {
                marker += TYPE_FLOAT32ARRAY;
            } else if (valueType === '[object Float64Array]') {
                marker += TYPE_FLOAT64ARRAY;
            } else {
                callback(new Error('Failed to get type for BinaryArray'));
            }
        }

        callback(marker + bufferToString(buffer));
    } else if (valueType === '[object Blob]') {
        // Conver the blob to a binaryArray and then to a string.
        var fileReader = new FileReader();

        fileReader.onload = function () {
            // Backwards-compatible prefix for the blob type.
            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);

            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
        };

        fileReader.readAsArrayBuffer(value);
    } else {
        try {
            callback(JSON.stringify(value));
        } catch (e) {
            console.error("Couldn't convert value into a JSON string: ", value);

            callback(null, e);
        }
    }
}

// Deserialize data we've inserted into a value column/field. We place
// special markers into our strings to mark them as encoded; this isn't
// as nice as a meta field, but it's the only sane thing we can do whilst
// keeping localStorage support intact.
//
// Oftentimes this will just deserialize JSON content, but if we have a
// special marker (SERIALIZED_MARKER, defined above), we will extract
// some kind of arraybuffer/binary data/typed array out of the string.
function deserialize(value) {
    // If we haven't marked this string as being specially serialized (i.e.
    // something other than serialized JSON), we can just return it and be
    // done with it.
    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
        return JSON.parse(value);
    }

    // The following code deals with deserializing some kind of Blob or
    // TypedArray. First we separate out the type of data we're dealing
    // with from the data itself.
    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);

    var blobType;
    // Backwards-compatible blob type serialization strategy.
    // DBs created with older versions of localForage will simply not have the blob type.
    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
        blobType = matcher[1];
        serializedString = serializedString.substring(matcher[0].length);
    }
    var buffer = stringToBuffer(serializedString);

    // Return the right type based on the code/type set during
    // serialization.
    switch (type) {
        case TYPE_ARRAYBUFFER:
            return buffer;
        case TYPE_BLOB:
            return createBlob([buffer], { type: blobType });
        case TYPE_INT8ARRAY:
            return new Int8Array(buffer);
        case TYPE_UINT8ARRAY:
            return new Uint8Array(buffer);
        case TYPE_UINT8CLAMPEDARRAY:
            return new Uint8ClampedArray(buffer);
        case TYPE_INT16ARRAY:
            return new Int16Array(buffer);
        case TYPE_UINT16ARRAY:
            return new Uint16Array(buffer);
        case TYPE_INT32ARRAY:
            return new Int32Array(buffer);
        case TYPE_UINT32ARRAY:
            return new Uint32Array(buffer);
        case TYPE_FLOAT32ARRAY:
            return new Float32Array(buffer);
        case TYPE_FLOAT64ARRAY:
            return new Float64Array(buffer);
        default:
            throw new Error('Unkown type: ' + type);
    }
}

var localforageSerializer = {
    serialize: serialize,
    deserialize: deserialize,
    stringToBuffer: stringToBuffer,
    bufferToString: bufferToString
};

/*
 * Includes code from:
 *
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
// Open the WebSQL database (automatically creates one if one didn't
// previously exist), using any options set in the config.
function _initStorage$1(options) {
    var self = this;
    var dbInfo = {
        db: null
    };

    if (options) {
        for (var i in options) {
            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
        }
    }

    var dbInfoPromise = new Promise$1(function (resolve, reject) {
        // Open the database; the openDatabase API will automatically
        // create it for us if it doesn't exist.
        try {
            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
        } catch (e) {
            return reject(e);
        }

        // Create our key/value table if it doesn't exist.
        dbInfo.db.transaction(function (t) {
            t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {
                self._dbInfo = dbInfo;
                resolve();
            }, function (t, error) {
                reject(error);
            });
        });
    });

    dbInfo.serializer = localforageSerializer;
    return dbInfoPromise;
}

function getItem$1(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                t.executeSql('SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {
                    var result = results.rows.length ? results.rows.item(0).value : null;

                    // Check to see if this is serialized content we need to
                    // unpack.
                    if (result) {
                        result = dbInfo.serializer.deserialize(result);
                    }

                    resolve(result);
                }, function (t, error) {

                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function iterate$1(iterator, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;

            dbInfo.db.transaction(function (t) {
                t.executeSql('SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {
                    var rows = results.rows;
                    var length = rows.length;

                    for (var i = 0; i < length; i++) {
                        var item = rows.item(i);
                        var result = item.value;

                        // Check to see if this is serialized content
                        // we need to unpack.
                        if (result) {
                            result = dbInfo.serializer.deserialize(result);
                        }

                        result = iterator(result, item.key, i + 1);

                        // void(0) prevents problems with redefinition
                        // of `undefined`.
                        if (result !== void 0) {
                            resolve(result);
                            return;
                        }
                    }

                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function _setItem(key, value, callback, retriesLeft) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            // The localStorage API doesn't return undefined values in an
            // "expected" way, so undefined is always cast to null in all
            // drivers. See: https://github.com/mozilla/localForage/pull/42
            if (value === undefined) {
                value = null;
            }

            // Save the original value to pass to the callback.
            var originalValue = value;

            var dbInfo = self._dbInfo;
            dbInfo.serializer.serialize(value, function (value, error) {
                if (error) {
                    reject(error);
                } else {
                    dbInfo.db.transaction(function (t) {
                        t.executeSql('INSERT OR REPLACE INTO ' + dbInfo.storeName + ' (key, value) VALUES (?, ?)', [key, value], function () {
                            resolve(originalValue);
                        }, function (t, error) {
                            reject(error);
                        });
                    }, function (sqlError) {
                        // The transaction failed; check
                        // to see if it's a quota error.
                        if (sqlError.code === sqlError.QUOTA_ERR) {
                            // We reject the callback outright for now, but
                            // it's worth trying to re-run the transaction.
                            // Even if the user accepts the prompt to use
                            // more storage on Safari, this error will
                            // be called.
                            //
                            // Try to re-run the transaction.
                            if (retriesLeft > 0) {
                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));
                                return;
                            }
                            reject(sqlError);
                        }
                    });
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function setItem$1(key, value, callback) {
    return _setItem.apply(this, [key, value, callback, 1]);
}

function removeItem$1(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                t.executeSql('DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {
                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Deletes every item in the table.
// TODO: Find out if this resets the AUTO_INCREMENT number.
function clear$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                t.executeSql('DELETE FROM ' + dbInfo.storeName, [], function () {
                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Does a simple `COUNT(key)` to get the number of items stored in
// localForage.
function length$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                // Ahhh, SQL makes this one soooooo easy.
                t.executeSql('SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {
                    var result = results.rows.item(0).c;

                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Return the key located at key index X; essentially gets the key from a
// `WHERE id = ?`. This is the most efficient way I can think to implement
// this rarely-used (in my experience) part of the API, but it can seem
// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
// the ID of each key will change every time it's updated. Perhaps a stored
// procedure for the `setItem()` SQL would solve this problem?
// TODO: Don't change ID on `setItem()`.
function key$1(n, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                t.executeSql('SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {
                    var result = results.rows.length ? results.rows.item(0).key : null;
                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function keys$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                t.executeSql('SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {
                    var keys = [];

                    for (var i = 0; i < results.rows.length; i++) {
                        keys.push(results.rows.item(i).key);
                    }

                    resolve(keys);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

var webSQLStorage = {
    _driver: 'webSQLStorage',
    _initStorage: _initStorage$1,
    _support: isWebSQLValid(),
    iterate: iterate$1,
    getItem: getItem$1,
    setItem: setItem$1,
    removeItem: removeItem$1,
    clear: clear$1,
    length: length$1,
    key: key$1,
    keys: keys$1
};

function isLocalStorageValid() {
    try {
        return typeof localStorage !== 'undefined' && 'setItem' in localStorage && typeof localStorage.setItem === 'function';
    } catch (e) {
        return false;
    }
}

// Config the localStorage backend, using options set in the config.
function _initStorage$2(options) {
    var self = this;
    var dbInfo = {};
    if (options) {
        for (var i in options) {
            dbInfo[i] = options[i];
        }
    }

    dbInfo.keyPrefix = dbInfo.name + '/';

    if (dbInfo.storeName !== self._defaultConfig.storeName) {
        dbInfo.keyPrefix += dbInfo.storeName + '/';
    }

    self._dbInfo = dbInfo;
    dbInfo.serializer = localforageSerializer;

    return Promise$1.resolve();
}

// Remove all keys from the datastore, effectively destroying all data in
// the app's key/value store!
function clear$2(callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var keyPrefix = self._dbInfo.keyPrefix;

        for (var i = localStorage.length - 1; i >= 0; i--) {
            var key = localStorage.key(i);

            if (key.indexOf(keyPrefix) === 0) {
                localStorage.removeItem(key);
            }
        }
    });

    executeCallback(promise, callback);
    return promise;
}

// Retrieve an item from the store. Unlike the original async_storage
// library in Gaia, we don't modify return values at all. If a key's value
// is `undefined`, we pass that value to the callback function.
function getItem$2(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var result = localStorage.getItem(dbInfo.keyPrefix + key);

        // If a result was found, parse it from the serialized
        // string into a JS object. If result isn't truthy, the key
        // is likely undefined and we'll pass it straight to the
        // callback.
        if (result) {
            result = dbInfo.serializer.deserialize(result);
        }

        return result;
    });

    executeCallback(promise, callback);
    return promise;
}

// Iterate over all items in the store.
function iterate$2(iterator, callback) {
    var self = this;

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var keyPrefix = dbInfo.keyPrefix;
        var keyPrefixLength = keyPrefix.length;
        var length = localStorage.length;

        // We use a dedicated iterator instead of the `i` variable below
        // so other keys we fetch in localStorage aren't counted in
        // the `iterationNumber` argument passed to the `iterate()`
        // callback.
        //
        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
        var iterationNumber = 1;

        for (var i = 0; i < length; i++) {
            var key = localStorage.key(i);
            if (key.indexOf(keyPrefix) !== 0) {
                continue;
            }
            var value = localStorage.getItem(key);

            // If a result was found, parse it from the serialized
            // string into a JS object. If result isn't truthy, the
            // key is likely undefined and we'll pass it straight
            // to the iterator.
            if (value) {
                value = dbInfo.serializer.deserialize(value);
            }

            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

            if (value !== void 0) {
                return value;
            }
        }
    });

    executeCallback(promise, callback);
    return promise;
}

// Same as localStorage's key() method, except takes a callback.
function key$2(n, callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var result;
        try {
            result = localStorage.key(n);
        } catch (error) {
            result = null;
        }

        // Remove the prefix from the key, if a key is found.
        if (result) {
            result = result.substring(dbInfo.keyPrefix.length);
        }

        return result;
    });

    executeCallback(promise, callback);
    return promise;
}

function keys$2(callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var length = localStorage.length;
        var keys = [];

        for (var i = 0; i < length; i++) {
            if (localStorage.key(i).indexOf(dbInfo.keyPrefix) === 0) {
                keys.push(localStorage.key(i).substring(dbInfo.keyPrefix.length));
            }
        }

        return keys;
    });

    executeCallback(promise, callback);
    return promise;
}

// Supply the number of keys in the datastore to the callback function.
function length$2(callback) {
    var self = this;
    var promise = self.keys().then(function (keys) {
        return keys.length;
    });

    executeCallback(promise, callback);
    return promise;
}

// Remove an item from the store, nice and simple.
function removeItem$2(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        localStorage.removeItem(dbInfo.keyPrefix + key);
    });

    executeCallback(promise, callback);
    return promise;
}

// Set a key's value and run an optional callback once the value is set.
// Unlike Gaia's implementation, the callback function is passed the value,
// in case you want to operate on that value only after you're sure it
// saved, or something like that.
function setItem$2(key, value, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        // Convert undefined values to null.
        // https://github.com/mozilla/localForage/pull/42
        if (value === undefined) {
            value = null;
        }

        // Save the original value to pass to the callback.
        var originalValue = value;

        return new Promise$1(function (resolve, reject) {
            var dbInfo = self._dbInfo;
            dbInfo.serializer.serialize(value, function (value, error) {
                if (error) {
                    reject(error);
                } else {
                    try {
                        localStorage.setItem(dbInfo.keyPrefix + key, value);
                        resolve(originalValue);
                    } catch (e) {
                        // localStorage capacity exceeded.
                        // TODO: Make this a specific error/event.
                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                            reject(e);
                        }
                        reject(e);
                    }
                }
            });
        });
    });

    executeCallback(promise, callback);
    return promise;
}

var localStorageWrapper = {
    _driver: 'localStorageWrapper',
    _initStorage: _initStorage$2,
    _support: isLocalStorageValid(),
    iterate: iterate$2,
    getItem: getItem$2,
    setItem: setItem$2,
    removeItem: removeItem$2,
    clear: clear$2,
    length: length$2,
    key: key$2,
    keys: keys$2
};

var isArray = Array.isArray || function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
};

// Drivers are stored here when `defineDriver()` is called.
// They are shared across all instances of localForage.
var DefinedDrivers = {};

var DriverSupport = {};

var DefaultDrivers = {
    INDEXEDDB: asyncStorage,
    WEBSQL: webSQLStorage,
    LOCALSTORAGE: localStorageWrapper
};

var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];

var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];

var DefaultConfig = {
    description: '',
    driver: DefaultDriverOrder.slice(),
    name: 'localforage',
    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
    // we can use without a prompt.
    size: 4980736,
    storeName: 'keyvaluepairs',
    version: 1.0
};

function callWhenReady(localForageInstance, libraryMethod) {
    localForageInstance[libraryMethod] = function () {
        var _args = arguments;
        return localForageInstance.ready().then(function () {
            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
        });
    };
}

function extend() {
    for (var i = 1; i < arguments.length; i++) {
        var arg = arguments[i];

        if (arg) {
            for (var _key in arg) {
                if (arg.hasOwnProperty(_key)) {
                    if (isArray(arg[_key])) {
                        arguments[0][_key] = arg[_key].slice();
                    } else {
                        arguments[0][_key] = arg[_key];
                    }
                }
            }
        }
    }

    return arguments[0];
}

var LocalForage = function () {
    function LocalForage(options) {
        _classCallCheck(this, LocalForage);

        for (var driverTypeKey in DefaultDrivers) {
            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
                var driver = DefaultDrivers[driverTypeKey];
                var driverName = driver._driver;
                this[driverTypeKey] = driverName;

                if (!DefinedDrivers[driverName]) {
                    // we don't need to wait for the promise,
                    // since the default drivers can be defined
                    // in a blocking manner
                    this.defineDriver(driver);
                }
            }
        }

        this._defaultConfig = extend({}, DefaultConfig);
        this._config = extend({}, this._defaultConfig, options);
        this._driverSet = null;
        this._initDriver = null;
        this._ready = false;
        this._dbInfo = null;

        this._wrapLibraryMethodsWithReady();
        this.setDriver(this._config.driver)["catch"](function () {});
    }

    // Set any config values for localForage; can be called anytime before
    // the first API call (e.g. `getItem`, `setItem`).
    // We loop through options so we don't overwrite existing config
    // values.


    LocalForage.prototype.config = function config(options) {
        // If the options argument is an object, we use it to set values.
        // Otherwise, we return either a specified config value or all
        // config values.
        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
            // If localforage is ready and fully initialized, we can't set
            // any new configuration values. Instead, we return an error.
            if (this._ready) {
                return new Error('Can\'t call config() after localforage ' + 'has been used.');
            }

            for (var i in options) {
                if (i === 'storeName') {
                    options[i] = options[i].replace(/\W/g, '_');
                }

                if (i === 'version' && typeof options[i] !== 'number') {
                    return new Error('Database version must be a number.');
                }

                this._config[i] = options[i];
            }

            // after all config options are set and
            // the driver option is used, try setting it
            if ('driver' in options && options.driver) {
                return this.setDriver(this._config.driver);
            }

            return true;
        } else if (typeof options === 'string') {
            return this._config[options];
        } else {
            return this._config;
        }
    };

    // Used to define a custom driver, shared across all instances of
    // localForage.


    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
        var promise = new Promise$1(function (resolve, reject) {
            try {
                var driverName = driverObject._driver;
                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');

                // A driver name should be defined and not overlap with the
                // library-defined, default drivers.
                if (!driverObject._driver) {
                    reject(complianceError);
                    return;
                }

                var driverMethods = LibraryMethods.concat('_initStorage');
                for (var i = 0, len = driverMethods.length; i < len; i++) {
                    var customDriverMethod = driverMethods[i];
                    if (!customDriverMethod || !driverObject[customDriverMethod] || typeof driverObject[customDriverMethod] !== 'function') {
                        reject(complianceError);
                        return;
                    }
                }

                var setDriverSupport = function setDriverSupport(support) {
                    if (DefinedDrivers[driverName]) {
                        console.info('Redefining LocalForage driver: ' + driverName);
                    }
                    DefinedDrivers[driverName] = driverObject;
                    DriverSupport[driverName] = support;
                    // don't use a then, so that we can define
                    // drivers that have simple _support methods
                    // in a blocking manner
                    resolve();
                };

                if ('_support' in driverObject) {
                    if (driverObject._support && typeof driverObject._support === 'function') {
                        driverObject._support().then(setDriverSupport, reject);
                    } else {
                        setDriverSupport(!!driverObject._support);
                    }
                } else {
                    setDriverSupport(true);
                }
            } catch (e) {
                reject(e);
            }
        });

        executeTwoCallbacks(promise, callback, errorCallback);
        return promise;
    };

    LocalForage.prototype.driver = function driver() {
        return this._driver || null;
    };

    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));

        executeTwoCallbacks(getDriverPromise, callback, errorCallback);
        return getDriverPromise;
    };

    LocalForage.prototype.getSerializer = function getSerializer(callback) {
        var serializerPromise = Promise$1.resolve(localforageSerializer);
        executeTwoCallbacks(serializerPromise, callback);
        return serializerPromise;
    };

    LocalForage.prototype.ready = function ready(callback) {
        var self = this;

        var promise = self._driverSet.then(function () {
            if (self._ready === null) {
                self._ready = self._initDriver();
            }

            return self._ready;
        });

        executeTwoCallbacks(promise, callback, callback);
        return promise;
    };

    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
        var self = this;

        if (!isArray(drivers)) {
            drivers = [drivers];
        }

        var supportedDrivers = this._getSupportedDrivers(drivers);

        function setDriverToConfig() {
            self._config.driver = self.driver();
        }

        function extendSelfWithDriver(driver) {
            self._extend(driver);
            setDriverToConfig();

            self._ready = self._initStorage(self._config);
            return self._ready;
        }

        function initDriver(supportedDrivers) {
            return function () {
                var currentDriverIndex = 0;

                function driverPromiseLoop() {
                    while (currentDriverIndex < supportedDrivers.length) {
                        var driverName = supportedDrivers[currentDriverIndex];
                        currentDriverIndex++;

                        self._dbInfo = null;
                        self._ready = null;

                        return self.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
                    }

                    setDriverToConfig();
                    var error = new Error('No available storage method found.');
                    self._driverSet = Promise$1.reject(error);
                    return self._driverSet;
                }

                return driverPromiseLoop();
            };
        }

        // There might be a driver initialization in progress
        // so wait for it to finish in order to avoid a possible
        // race condition to set _dbInfo
        var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function () {
            return Promise$1.resolve();
        }) : Promise$1.resolve();

        this._driverSet = oldDriverSetDone.then(function () {
            var driverName = supportedDrivers[0];
            self._dbInfo = null;
            self._ready = null;

            return self.getDriver(driverName).then(function (driver) {
                self._driver = driver._driver;
                setDriverToConfig();
                self._wrapLibraryMethodsWithReady();
                self._initDriver = initDriver(supportedDrivers);
            });
        })["catch"](function () {
            setDriverToConfig();
            var error = new Error('No available storage method found.');
            self._driverSet = Promise$1.reject(error);
            return self._driverSet;
        });

        executeTwoCallbacks(this._driverSet, callback, errorCallback);
        return this._driverSet;
    };

    LocalForage.prototype.supports = function supports(driverName) {
        return !!DriverSupport[driverName];
    };

    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
        extend(this, libraryMethodsAndProperties);
    };

    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
        var supportedDrivers = [];
        for (var i = 0, len = drivers.length; i < len; i++) {
            var driverName = drivers[i];
            if (this.supports(driverName)) {
                supportedDrivers.push(driverName);
            }
        }
        return supportedDrivers;
    };

    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
        // Add a stub for each driver API method that delays the call to the
        // corresponding driver method until localForage is ready. These stubs
        // will be replaced by the driver methods as soon as the driver is
        // loaded, so there is no performance impact.
        for (var i = 0, len = LibraryMethods.length; i < len; i++) {
            callWhenReady(this, LibraryMethods[i]);
        }
    };

    LocalForage.prototype.createInstance = function createInstance(options) {
        return new LocalForage(options);
    };

    return LocalForage;
}();

// The actual localForage object that we expose as a module or via a
// global. It's extended by pulling in one of our other libraries.


var localforage_js = new LocalForage();

module.exports = localforage_js;

},{"3":3}]},{},[4])(4)
});

define('timer',[],function() {

    var Timer = Class.extend({
        init: function(duration, startTime) {
            this.lastTime = startTime;
            if (isNaN(startTime) || startTime === null || startTime === 0)
            {
              this.lastTime = Date.now();
            }

            this.duration = duration;
        },

        isOver: function(time) {
            var over = false;

            //log.info("Timer.isOver - lasttime: "+this.lastTime+", duration: "+(time - this.lastTime));
            if(this.lastTime == 0 || (time - this.lastTime) > this.duration) {
                over = true;
                this.lastTime = time;
            }
            return over;
        },

        getRatio: function (time) {
          var ratio = ((time - this.lastTime) / this.duration);
          if (ratio >= 1.0)
            return 1.0;
          return ratio;
        },
    });

    return Timer;
});


define('entity/entity',['../timer'], function(Timer) {

    var Entity = Class.extend({
        init: function(id, type, mapIndex, kind) {
            this.id = id;
            this.type = type;
            this.mapIndex = mapIndex;
            this.kind = kind;

            // Renderer
            this.sprite = null;
            this.flipSpriteX = false;
            this.flipSpriteY = false;
            this.pjsSprite = null;
            this.animations = null;
            this.currentAnimation = null;

            // Modes
            this.isLoaded = false;
            this.visible = true;
            this.isFading = false;

            this.prevOrientation=null;
            this.name = "";

            this.fadingTime = 1000;
            this.fadingTimer = new Timer(this.fadingTime, getTime());
            this.lockfadeIn = false;

            this.spriteChanged = true;

            this.x = 0;
            this.y = 0;
            //this.gx = 0;
            //this.gy = 0;
            //this.pgx = 0;
            //this.pgy = 0;
        },

        hasAnimation: function (type) {
          if (!this.currentAnimation)
            return false;
          return this.currentAnimation.name.indexOf(type) == 0;
        },

        animate: function(animation, speed, count, onEndCount) {
            var oriented = ['atk', 'walk', 'idle'],
                o = this.orientation || Types.Orientations.DOWN;

            this.flipSpriteX = false;
            this.flipSpriteY = false;

            if(_.indexOf(oriented, animation) >= 0) {
                animation += "_" + (o === Types.Orientations.LEFT ? "right" : Types.getOrientationAsString(o));
                this.flipSpriteX = (this.orientation === Types.Orientations.LEFT) ? true : false;
            }

            if (this.type == 10)
              console.info("animation: "+animation+", speed:"+speed+", count:"+count+", onEndCount:"+onEndCount);
            this.setAnimation(animation, speed, count, onEndCount);
        },

        onRemove: function(callback) {
          this.remove_callback = callback;
        },

        setName: function(name) {
            this.name = name;
        },

        _setPosition: function(x, y) {
            var ts = G_TILESIZE;

            this.x = x;
            this.y = y;

            var gx = (x >> 4);
            var gy = (y >> 4);

            if (x % ts == 0) {
              this.gx = gx;
            }
            if (y % ts == 0) {
              this.gy = gy;
            }

        },

        setPosition: function (x, y) {
          this._setPosition(x,y);
        },

        setPositionGrid: function(x, y) {
            var ts = game.tilesize;

            this.x = x;
            this.y = y;

            var gx = (x >> 4);
            var gy = (y >> 4);

            this.gx = gx;
            this.gy = gy;
            /*if (x % ts == 0) {
              this.gx = gx;
            }
            if (y % ts == 0) {
              this.gy = gy;
            }*/
        },

        getPositionGridPrev: function () {
          var gx = this.gx; //(this.x >> 4);
          var gy = this.gy; //(this.y >> 4);

          /*switch(this.orientation) {
            case Types.Orientations.UP:
              gy++;
              break;
            case Types.Orientations.DOWN:
              gy--;
              break;
            case Types.Orientations.LEFT:
              gx++;
              break;
            case Types.Orientations.RIGHT:
              gx--;
              break;
          }*/
          return {gx: gx, gy: gy};
        },

        setPositionSpawn: function(x, y) {
            log.info("setPositionSpawn - x:"+x+"y:"+y);

            this.x = x;
            this.y = y;

            var gx = this.gx = (x >> 4);
            var gy = this.gy = (y >> 4);

            this.spawnGx = gx;
            this.spawnGy = gy;
        },

        setSprite: function(sprite) {
            if(!sprite) {
                log.error(this.id + " : sprite is null", true);
                throw "Sprite error";
            }

            if(this.sprite && this.sprite.name === sprite.name) {
                return;
            }

            if (!this.pjsSprite)
              this.pjsSprite = game.renderer.createSprite(sprite);
            else
              game.renderer.changeSprite(sprite, this.pjsSprite);
            this.oldSprite = this.sprite;
            this.sprite = sprite;
            this.animations = sprite.createAnimations();

            this.isLoaded = true;
            if(this.ready_func) {
                this.ready_func();
            }
        },

        getSprite: function() {
            return this.sprite;
        },

        getSpriteName: function() {
            return this.spriteName;
        },

        getAnimationByName: function(name) {
            var animation = null;

            if(name in this.animations) {
                animation = this.animations[name];
            }
            else {
                var e = new Error();
                log.error(e.stack);
                log.info("No animation called "+ name);
                return null;
            }
            return animation;
        },

        setAnimation: function(name, speed, count, onEndCount) {
            var self = this;

            if(this.isLoaded) {
                if(this.currentAnimation && this.currentAnimation.name === name) {
                    return;
                }

                if ((this.isDying || this.isDead) && this.currentAnimation.name == "death")
                  return;

                var s = this.sprite,
                    a = this.getAnimationByName(name);

                if(a) {
                    this.currentAnimation = a;
                    if(name.indexOf("atk") === 0) {
                        this.currentAnimation.reset();
                    }
                    this.currentAnimation.setSpeed(speed);
                    this.currentAnimation.setCount(count ? count : 0, onEndCount || function() {
                        self.idle(self.orientation);
                    });
                }
            }
            else {
                this.log_error("Not ready for animation");
            }
        },

        ready: function(f) {
            this.ready_func = f;
        },

        clean: function() {
        },

        log_info: function(message) {
            log.info("["+this.id+"] " + message);
        },

        log_error: function(message) {
            log.error("["+this.id+"] " + message);
        },

        setVisible: function(value) {
            this.visible = value;
        },

        isVisible: function() {
            return this.visible;
        },

        toggleVisibility: function() {
            if(this.visible) {
                this.setVisible(false);
            } else {
                this.setVisible(true);
            }
        },

        fadeInEntity: function(time) {
            if (this.lockfadeIn == true)
              return;

            this.isFading = true;
            this.fadingTime.lastTime = time;
        },

        getFadeRatio: function(time) {
          if (this.lockfadeIn == true)
            return 1.0;

          if (this.fadingTimer.isOver(time))
          {
            this.isFading = false;
            this.lockfadeIn = true;
            return 1.0;
          }
          return this.fadingTimer.getRatio(time);
        },

        isNextToo: function (x,y,dist) {
          dist = dist || G_TILESIZE;
          return (Math.abs(this.x-x) <= dist && Math.abs(this.y-y) <= dist);
        },

        isNextTooEntity: function (entity) {
            return this.isNextToo(entity.x, entity.y);
        },

        isWithin: function (entity) {
          return this.isNextToo(entity.x,entity.y, (G_TILESIZE >> 1));
        },

        isTouching: function (entity) {
          return this.isNextToo(entity.x,entity.y, (G_TILESIZE-1));
        },

        isOver: function (x, y) {
            return this.isNextToo(x, y, (G_TILESIZE >> 1));
        },

        isOverlapping: function() {
          var entities = this.map.entities.getCharactersAround(this, 1);
              res = false,
              ts = G_TILESIZE;

          for(var entity of entities) {
            //var entity2 = entities[k];
            if (!entity || this == entity)
              continue;
            var tx = entity.x;
            var ty = entity.y;
            if (this.isTouching(entity.x, entity.y))
            {
              res = true;
              break;
            }
          }
          return res;
        }

    });

    return Entity;
});

define('transition',[],function() {
    var Transition = Class.extend({
      init: function(object) {
          this.startValue = 0;
          this.endValue = 0;
          this.duration = 0;
          this.inProgress = false;
          //this.currentValue = 0;
          this.modValue = 0;
          this.object = object;
      },

      start: function(updateFunction, stopFunction, modValue) {
          this.updateFunction = updateFunction;
          this.stopFunction = stopFunction;
          this.modValue = modValue;
          //this.object = object;
          this.inProgress = true;
      },

      step: function() {
          if(this.inProgress) {
              var inc = this.modValue;

              if (inc == 0) return;

              if (inc > 3)
                console.warn("inc="+inc);

              var j = 0;
              if(this.updateFunction) {
                var it;
                var itCount = Math.abs(inc);

                var start=0;
                var mod = (inc > 0) ? 1 : -1;
                for (it=1; it <= itCount; ++it)
                {
                  if (this.updateFunction(this.object, mod))
                  {
                      this.stop(this.object);
                      return;
                  }
                }
              }
          }
      },

      /*restart: function(currentTime, startValue, endValue) {
          this.start(currentTime, this.updateFunction, this.stopFunction, this.startValue, this.endValue, this.duration);
          this.step(currentTime);
      },*/

      stop: function() {
        if (this.stopFunction)
          this.stopFunction(this.object);

        this.inProgress = false;
      }
    });

    return Transition;
});


define('entity/entitymoving',['./entity', '../transition', '../timer'], function(Entity, Transition, Timer) {

    var EntityMoving = Entity.extend({
  init: function(id, type, map, kind, x, y) {
    var self = this;

    this._super(id, type, map, kind, x, y);

    // Position and orientation
    //this.nextX = -1;
    //this.nextY = -1;
    //this.prevX = -1;
    //this.prevY = -1;

    // Speeds
    this.moveSpeed = 100;
    this.setMoveRate(this.moveSpeed);
    this.walkSpeed = 150;
    this.idleSpeed = randomInt(750, 1000);

    this.followingMode = false;

    this.step = 0;

    this.orientation = 0;

    // Pathing
    this.movement = new Transition(this);

    this.path = null;
    this.newDestination = null;
    this.adjacentTiles = {};


    this.freeze = false;
  },

/*******************************************************************************
 * BEGIN - Movement Functions.
 ******************************************************************************/

   moveTo_: function(x, y, callback) {
     return this._moveTo(x, y, callback);
   },

   _moveTo: function(x, y, callback) {
     this.destination = {
       x: x,
       y: y
     };
     this.adjacentTiles = {};

     if (this.isMovingPath()) {
       this.continueTo(x, y);
     } else {
       var path = this.requestPathfindingTo(x, y);

       if (path)
         this.followPath(path);
     }
   },

   requestPathfindingTo: function(x, y) {
     //log.info(JSON.stringify(this.path));
     if (Array.isArray(this.path) && this.path.length > 0) {
       return this.path;
     } else if (this.request_path_callback) {
       return this.request_path_callback(x, y);
     } else {
       log.info(this.id + " couldn't request pathfinding to " + x + ", " + y);
       log.info("char x:" + this.x + ",y: " + this.y + ", x:" + x + "y: " + y);
       try {
         throw new Error()
       } catch (e) {
         log.info(e.stack);
       }
       return null;
     }
   },

   onRequestPath: function(callback) {
     this.request_path_callback = callback;
   },

   onStartPathing: function(callback) {
     this.start_pathing_callback = callback;
   },

   onStopPathing: function(callback) {
     this.stop_pathing_callback = callback;
   },

   onAbortPathing: function(callback) {
     this.abort_pathing_callback = callback;
   },

   followPath: function(path) {
     if (!path) return;
     this.path = path;
     this.step = 0;

     if (this.followingMode) { // following a character
       path.pop();
     }

     if (this.start_pathing_callback) {
       this.start_pathing_callback(path);
     }
   },

   continueTo: function(x, y) {
     this.newDestination = {x: x, y: y};
   },

   /**
    *
    */
   go: function(x, y) {
     if (this.followingMode) {
       this.followingMode = false;
       this.target = null;
     }
     this.moveTo_(x, y);
   },

   /**
    * Makes the character follow another one.
    */
   follow: function(entity, dist) {
     var found = false;

     var spot = this.getClosestSpot(entity, dist);

     if (spot && spot.x && spot.y)
       this.moveTo_(spot.x, spot.y);
   },

   getLastMove: function () {
       if (!this.path)
         return null;
       var lastPath = this.path[this.path.length-1];
       return [lastPath[0],
         lastPath[1]];
   },

   getSpotsAroundFrom: function(dest, adjStart, adjEnd) {
     adjStart = adjStart || 1;
     adjEnd = adjEnd || 1;

     var coords = [];
     var start = Math.min(adjStart, adjEnd);
     var end = Math.max(adjStart, adjEnd);
     for (var i=start; i <= end; ++i) {
       coords = coords.concat(this.getSpotsAround(dest, i));
     }
     return coords;
   },

   getSpotsAround: function(dest, adjDist) {
     adjDist = adjDist || 1;
     var d = adjDist * G_TILESIZE;
     var iterations = adjDist * 4;

     var pos = [dest.x, dest.y];
     var x2 = pos[0],
         y2 = pos[1];

     var sx = this.x,
         sy = this.y;

     var points = [];
     var sec = 2 * Math.PI / iterations;
     var x, y, deg = 0;
     for (var i = 0; i < iterations; ++i) {
       deg += sec;
       x = ~~(x2 + (Math.sin(deg)*d));
       y = ~~(y2 + (Math.cos(deg)*d));
       points.push([x,y]);
     }
     points = points.filter((v,i,a)=>a.findIndex(v2=>(v2[0]===v[0] && v2[1]===v[1]))===i);

     var coords = [];
     var p, tp, len = points.length;
     for (var i=0; i < len; ++i) {
       p = points[i];
       coords.push({d: Utils.realDistance([sx,sy],p),x: p[0], y: p[1]});
     }
     return coords;
   },

   getClosestSpot: function(dest, adjStart, adjEnd) {
     adjStart = adjStart || 1;
     adjEnd = adjEnd || 1;
     var coords = this.getSpotsAroundFrom(dest, adjStart, adjEnd);

     for (var i = (coords.length-1); i >= 0; --i)
     {
       var coord = coords[i];
       if (game.mapContainer.isColliding(coord.x, coord.y))
         coords.splice(i,1);
     }

     coords.sort(function(a,b) { return a.d-b.d; });

     return {x: coords[0].x, y: coords[0].y};
   },


   stopInPath: function(x,y) {
     if (this.isMovingPath()) {
       if (this.map.entities.pathfinder.isInPath(this.path, [x,y])) {
         this.setPosition(x,y);
         //this.stop();
         this.interrupted = true;
         this.forceStop();
       }
     }
   },

  idle: function(orientation) {
      this.setOrientation(orientation || this.orientation);
      this.animate("idle", this.idleSpeed);
  },

  walk: function(orientation) {
      this.setOrientation(orientation || this.orientation);
      this.animate("walk", this.walkSpeed);
  },

  forceStop: function () {
    this._forceStop();
    if (!this.isDying && !this.isDead && !this.hasAnimation('atk'))
        this.idle();
  },

  _forceStop: function() {
    if (this.path && this.movement.inProgress && this.abort_pathing_callback)
      this.abort_pathing_callback(this.x,this.y);

    this._stop();
  },

  /**
   * Stops a moving character.
   */
  _stop: function() {
    this.movement.stop();

    this.keyMove = false;
    this.moving = false;
    this.interrupted = false;
    this.path = null;
    this.newDestination = null;
    this.isReadyToMove = true;
    this.followingMode = false;
  },

  setMoveStopCallback: function (callback) {
    this.movestop_callback = callback;
  },

  onHasMoved: function(callback) {
    this.hasmoved_callback = callback;
  },

  hasMoved: function() {
    this.setDirty();
    if (this.hasmoved_callback) {
      this.hasmoved_callback(this);
    }
  },

  setMoveRate: function(rate) {
    this.moveSpeed = rate;
    this.walkSpeed = ~~(rate / 4);
    this.tick = Math.round(1000 / this.moveSpeed);
  },

  // New function to make coding easier.
  getPathIndex: function(step) {
    if (!this.path === null || this.path.length === 0)
      return null;
    if (step < 0 || step >= this.path.length)
      return null;
    return (this.path[step]);
  },

  updateMovement: function() {
      var p = this.path,
          i = this.step;

      if (!p || i > (p.length-1))
        return;

      this.orientation = this.getOrientation([this.x,this.y], p[i]);
      this.walk(this.orientation);
  },

  updateWalk: function(a, b) {
      this.orientation = this.getOrientation(a, b);
      this.walk(this.orientation);
  },

  nextStepPath: function () {
    if (this.step == 0)
    {
      //this.orientation = this.getOrientationTo([this.path[1][0]-tsh,this.path[1][1]-tsh]);
      this.step++;
      this.updateMovement();
    }

    //log.info("nextStepPath - x:"+this.x+", y:"+this.y);
    if (this.step < this.path.length)
    {
      //log.info("next-x:"+this.path[this.step][0]+",next-y:"+this.path[this.step][1]);
      if (this.x == this.path[this.step][0] &&
          this.y == this.path[this.step][1])
      {
        this.step++;
        this.updateMovement();
        return true;
      }
      return false;
    }
    return false;
  },

  nextStep: function() {
      var stop = false, res = false,
          path, x, y;

      if(!this.isMovingPath() || this.freeze) {
        //log.info("NOT MOVING OR FREEZE!!!!!!!!!!!!!");
        this.interrupted = true;
        stop = true;
      }

      /*if(this.interrupted) {
          //log.info("nextStep - id:"+this.id+", interrupted=true");
          stop = true;
      }*/
      if (!stop)
      {
          res = this.nextStepPath();

          if (this.step >= this.path.length) {
            //log.info("nextStep - id:"+this.id+", step >= length");
            stop = true;
          }

          if(this.step_callback) {
              this.step_callback();
          }
      }

      if(this.hasChangedItsPath()) {
          this.setPosition(this.x, this.y);
          x = this.newDestination.x;
          y = this.newDestination.y;
          path = this.requestPathfindingTo(x, y);


          this.newDestination = null;
          this.followPath(path);
          return true;
      }

      if(stop) { // Path is complete or has been interrupted
        if(this.stop_pathing_callback) {
            this.stop_pathing_callback(this.x, this.y);

        this.forceStop();
        //log.info("nextStep - stopped, x:"+this.x+",y:"+this.y);
        }
        res = true;
      }

      return res;
  },

  onBeforeMove: function(callback) {
    this.before_move_callback = callback;
  },

  onBeforeStep: function(callback) {
    this.before_step_callback = callback;
  },

  onStep: function(callback) {
    this.step_callback = callback;
  },

  isMoving: function() {
    return this.movement.inProgress;
  },

  isMovingPath: function() {
    return (this.path && this.path.length > 0);
  },

  hasNextStep: function() {
    return (this.path && this.path.length - 1 > this.step);
  },

  hasChangedItsPath: function() {
    return !(this.newDestination === null);
  },

  movePath: function (path, orientation) {
    this.orientation = this.getOrientationTo([path[1][0],path[1][1]]);
    this.walk();

    this.path = path;
    this.step = 0;
  },

  setPosition: function (x, y) {
    this._setPosition(x,y);
  },

  move: function (time, orientation, state, x, y) {

    this.orientation = orientation;
    if (state == 1 && orientation != Types.Orientations.NONE)
    {
      this.forceStop();
      this.setPosition(x,y);
      this.walk(orientation);
    }
    else if (state == 0 || state == 2 || orientation == Types.Orientations.NONE)
    {
      this.forceStop();
      this.setPosition(x,y);
    }
  },

/*******************************************************************************
 * END - Movement Functions.
 ******************************************************************************/

/*******************************************************************************
 * BEGIN - Grid Functions.
 ******************************************************************************/

    isNear: function(character, distance) {
     var dx, dy, near = false;

     dx = Math.abs(this.x - character.x);
     dy = Math.abs(this.y - character.y);

     if (dx <= (distance*G_TILESIZE) && dy <= (distance*G_TILESIZE)) {
       near = true;
     }
     return near;
    },

   nextDist: function (x, y, o, dist) {
     x = x || this.x;
     y = y || this.y;
     o = o || this.orientation;
     dist = dist || 1;

     switch (o)
     {
       case 1:
         return [x,y-dist];
       case 2:
         return [x,y+dist];
       case 3:
         return [x-dist,y];
       case 4:
         return [x+dist,y];
     }
     return [x,y];
   },

   nextMove: function (x, y, o, dist) {
     return this.nextDist(x, y, o, 1);
   },

   nextTile: function (x, y, o, dist) {
     return this.nextDist(x, y, o, G_TILESIZE);
   },

   // New function to make coding easier.
   /// TODO - Fix, probably broken with new path code.
   isWithinPath: function(coords) {
     var tCoords = null;
     if (typeof(coords) === "Object" && coords.x > 0 && coords.y > 0) {
       tCoords = [coords.x, coords.y];
     } else if (Array.isArray(coords) && coords.length == 2) {
       tCoords = [coords[0], coords[1]];
     }
     if (!tCoords) return null;

     if (this.path === null || this.path.length === 0)
       return null;

     var pathLen = this.path.length;
     for (var i = 0; i < pathLen; ++i) {
       if (this.path[i][0] === tCoords[0] && this.path[i][1] === tCoords[1])
         return {
           x: tCoords[0],
           y: tCoords[1],
           step: i
         };
     }

     return null;
   },

/*******************************************************************************
 * END - Grid Functions.
 ******************************************************************************/

/*******************************************************************************
 * BEGIN - Orientation Functions.
 ******************************************************************************/

   /**
    * Gets the right orientation to face a target character from the current position.
    * Note:
    * In order to work properly, this method should be used in the following
    * situation :
    *    S
    *  S T S
    *    S
    * (where S is self, T is target character)
    *
    * @param {Character} character The character to face.
    * @returns {String} The orientation.
    */
   getOrientationTo: function(character) {
     if (this.x < character.x) {
       return 4;
     } else if (this.x > character.x) {
       return 3;
     } else if (this.y > character.y) {
       return 1;
     } else {
       return 2;
     }
   },

   getOrientation: function(p1, p2) {
       var x = Math.abs(p1[0]-p2[0]);
       var y = Math.abs(p1[1]-p2[1]);
       if(x > y) {
         if (p1[0] > p2[0])
           return 3;
         else
           return 4;
       } else if(y > x) {
         if (p1[1] > p2[1])
           return 1;
         else
           return 2;
       }
       return 0;
   },

  setOrientation: function(orientation) {
    if (orientation) {
      this.orientation = orientation || 0;
    }
  },

  getOrientationTo: function(arr) {
      return this.getOrientation([this.x,this.y],arr);
  },

  /**
   * Changes the character's orientation so that it is facing its target.
   */
   lookAt: function(x, y) {
       this.orientation = this.getOrientationTo([x, y]);
       this.idle(this.orientation);
       return this.orientation;
   },

  // Orientation Code.
  lookAtEntity: function(entity) {
    this._lookAtEntity(entity);
  },

  _lookAtEntity: function(entity) {
      if (entity) {
          this.orientation = this.getOrientationTo([entity.x, entity.y]);
      }
      return this.orientation;
  },

  lookAtTile: function (x, y) {
    var tsh = G_TILESIZE >> 1;
    var pos = getGridPosition(x, y);
    pos = getPositionFromGrid(pos.gx, pos.gy);
    this.lookAt(pos.x+tsh,pos.y+tsh);
  },

  isNextToo: function (x,y,o) {
    var o = o || this.orientation;
    var ts = G_TILESIZE;
    //log.info("isNextToo:");
    //log.info("dx:"+Math.abs(this.x-x));
    //log.info("dy:"+Math.abs(this.y-y));
    return (Math.abs(this.x-x) <= ts && Math.abs(this.y-y) <= ts);
  },

  isInReach: function (x,y,o,r,rs) {
    var o = o || this.orientation;
    var ts = G_TILESIZE;
    var rs = rs || ts >> 1;
    var r = r || ts + rs;

    var a = rs, b = rs;
    switch (o) {
      case Types.Orientations.UP:
      case Types.Orientations.DOWN:
        b=r;
        break;
      case Types.Orientations.LEFT:
      case Types.Orientations.RIGHT:
        a=r;
        break;
      case Types.Orientations.NONE:
        return false;
    }
    //log.info("isInReach:");
    //log.info("dx:"+Math.abs(this.x-x));
    //log.info("dy:"+Math.abs(this.y-y));
    //log.info("xa:"+a);
    //log.info("yb:"+b);
    return (Math.abs(this.x-x) <= a && Math.abs(this.y-y) <= b);
  },

  isFacing: function (x, y) {
    var dx = this.x - x;
    var dy = this.y - y;

    switch (this.orientation)
    {
      case 1:
        return (dy > 0);
      case 2:
        return (dy < 0);
      case 3:
        return (dx > 0);
      case 4:
        return (dx < 0);
    }
    return false;
  },

  isFacingEntity: function (entity) {
      return this.isFacing(entity.x, entity.y);
  },

  isNextTooEntity: function (entity) {
      return this.isNextToo(entity.x, entity.y);
  },

/*******************************************************************************
 * END - Orientation Functions.
 ******************************************************************************/

/*******************************************************************************
 * BEGIN - Misc Functions.
 ******************************************************************************/

   setFreeze: function(ms, callback) {
     var self = this;
     if (ms <= 0)
     {
       self.freeze = false;
       return;
     }
     this.freeze = true;
     this.freeze_callback = setTimeout(function() {
       self.freeze = false;
       //this.freeze_callback = null;
       if (callback)
         callback(self);
     }, ms);
   },

/*******************************************************************************
 * END - Misc Functions.
 ******************************************************************************/

  });

  return EntityMoving;
});

/*
 RequireJS text 0.26.0 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.
 Available via the MIT or new BSD license.
 see: http://github.com/jrburke/requirejs for details
*/
(function(){var j=["Msxml2.XMLHTTP","Microsoft.XMLHTTP","Msxml2.XMLHTTP.4.0"],l=/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,m=/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,n=typeof location!=="undefined"&&location.href,i=[];define('text',[],function(){var e,h,k;typeof window!=="undefined"&&window.navigator&&window.document?h=function(a,b){var c=e.createXhr();c.open("GET",a,!0);c.onreadystatechange=function(){c.readyState===4&&b(c.responseText)};c.send(null)}:typeof process!=="undefined"&&process.versions&&
process.versions.node?(k=require.nodeRequire("fs"),h=function(a,b){b(k.readFileSync(a,"utf8"))}):typeof Packages!=="undefined"&&(h=function(a,b){var c=new java.io.File(a),g=java.lang.System.getProperty("line.separator"),c=new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(c),"utf-8")),d,f,e="";try{d=new java.lang.StringBuffer;(f=c.readLine())&&f.length()&&f.charAt(0)===65279&&(f=f.substring(1));for(d.append(f);(f=c.readLine())!==null;)d.append(g),d.append(f);e=String(d.toString())}finally{c.close()}b(e)});
return e={version:"0.26.0",strip:function(a){if(a){var a=a.replace(l,""),b=a.match(m);b&&(a=b[1])}else a="";return a},jsEscape:function(a){return a.replace(/(['\\])/g,"\\$1").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r")},createXhr:function(){var a,b,c;if(typeof XMLHttpRequest!=="undefined")return new XMLHttpRequest;else for(b=0;b<3;b++){c=j[b];try{a=new ActiveXObject(c)}catch(e){}if(a){j=[c];break}}if(!a)throw Error("createXhr(): XMLHttpRequest not available");
return a},get:h,parseName:function(a){var b=!1,c=a.indexOf("."),e=a.substring(0,c),a=a.substring(c+1,a.length),c=a.indexOf("!");c!==-1&&(b=a.substring(c+1,a.length),b=b==="strip",a=a.substring(0,c));return{moduleName:e,ext:a,strip:b}},xdRegExp:/^((\w+)\:)?\/\/([^\/\\]+)/,canUseXhr:function(a,b,c,g){var d=e.xdRegExp.exec(a),f;if(!d)return!0;a=d[2];d=d[3];d=d.split(":");f=d[1];d=d[0];return(!a||a===b)&&(!d||d===c)&&(!f&&!d||f===g)},finishLoad:function(a,b,c,g,d){c=b?e.strip(c):c;d.isBuild&&d.inlineText&&
(i[a]=c);g(c)},load:function(a,b,c,g){var d=e.parseName(a),f=d.moduleName+"."+d.ext,h=b.toUrl(f);!n||e.canUseXhr(h)?e.get(h,function(b){e.finishLoad(a,d.strip,b,c,g)}):b([f],function(a){e.finishLoad(d.moduleName+"."+d.ext,d.strip,a,c,g)})},write:function(a,b,c){if(b in i){var g=e.jsEscape(i[b]);c("define('"+a+"!"+b+"', function () { return '"+g+"';});\n")}},writeFile:function(a,b,c,g,d){var b=e.parseName(b),f=b.moduleName+"."+b.ext,h=c.toUrl(b.moduleName+"."+b.ext)+".js";e.load(f,c,function(){e.write(a,
f,function(a){g(h,a)},d)},d)}}})})();


define('text!data/../../shared/data/mobs.json', function () { return '{\r\n    "Rat":{\r\n        "name":"Rat",\r\n        "kind":1,\r\n        "attackMod": 1,\r\n        "defenseMod": 1,\r\n        "hpMod": 1,\r\n        "xpMod": 1,\r\n        "minLevel": 1,\r\n        "maxLevel": 1,\r\n        "aggroRange": 0,\r\n        "attackRange": 1,\r\n        "isAggressive": 0,\r\n        "attackRateMod": 1,\r\n        "reactionMod": 1,\r\n        "moveSpeedMod": 2,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "rat",\r\n        "idleSpeedMod": 1\r\n    },\r\n    "Crab":{\r\n        "name":"Crab",\r\n        "kind":2,\r\n        "attackMod": 1.3,\r\n        "defenseMod": 1.3,\r\n        "hpMod": 1,\r\n        "minLevel": 2,\r\n        "maxLevel": 2,\r\n        "aggroRange": 5,\r\n        "attackRange": 1,\r\n        "isAggressive": 0,\r\n        "attackRateMod": 1,\r\n        "reactionMod": 1,\r\n        "moveSpeedMod": 2,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "crab",\r\n        "idleSpeedMod": 1\r\n    },\r\n    "Skeleton":{\r\n        "name":"Skeleton",\r\n        "kind":3,\r\n        "attackMod": 1.2,\r\n        "defenseMod": 1.2,\r\n        "hpMod": 1.5,\r\n        "minLevel": 6,\r\n        "maxLevel": 10,\r\n        "aggroRange": 2,\r\n        "attackRange": 1,\r\n        "isAggressive": 1,\r\n        "attackRateMod": 1.5,\r\n        "reactionMod": 1.5,\r\n        "moveSpeedMod": 2,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "skeleton",\r\n        "idleSpeedMod": 1\r\n    },\r\n    "Goblin":{\r\n        "name":"Goblin",\r\n        "kind":4,\r\n        "attackMod": 1.3,\r\n        "defenseMod": 0.9,\r\n        "hpMod": 0.9,\r\n        "minLevel": 3,\r\n        "maxLevel": 9,\r\n        "aggroRange": 3,\r\n        "attackRange": 1,\r\n        "isAggressive": 1,\r\n        "attackRateMod": 1,\r\n        "reactionMod": 1,\r\n        "moveSpeedMod": 2,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "goblin",\r\n        "idleSpeedMod": 1\r\n    },\r\n    "Snake":{\r\n        "name":"Snake",\r\n        "kind":5,\r\n        "attackMod": 2,\r\n        "defenseMod": 1,\r\n        "hpMod": 0.8,\r\n        "minLevel": 10,\r\n        "maxLevel": 14,\r\n        "aggroRange": 3,\r\n        "attackRange": 1,\r\n        "isAggressive": 1,\r\n        "attackRateMod": 1,\r\n        "reactionMod": 1,\r\n        "moveSpeedMod": 2,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "snek",\r\n        "idleSpeedMod": 1\r\n    },\r\n    "Bat":{\r\n        "name":"Bat",\r\n        "kind":6,\r\n        "attackMod": 1.3,\r\n        "defenseMod": 1,\r\n        "hpMod": 1,\r\n        "minLevel": 10,\r\n        "maxLevel": 30,\r\n        "aggroRange": 6,\r\n        "attackRange": 1,\r\n        "isAggressive": 1,\r\n        "attackRateMod": 1,\r\n        "reactionMod": 1,\r\n        "moveSpeedMod": 1,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "bat",\r\n        "idleSpeedMod": 1\r\n    },\r\n    "Skeleton2":{\r\n        "name":"HardSkeleton",\r\n        "kind":7,\r\n        "attackMod": 1.5,\r\n        "defenseMod": 1.5,\r\n        "hpMod": 1.5,\r\n        "minLevel": 15,\r\n        "maxLevel": 19,\r\n        "aggroRange": 2,\r\n        "attackRange": 1,\r\n        "isAggressive": 1,\r\n        "attackRateMod": 2,\r\n        "reactionMod": 2,\r\n        "moveSpeedMod": 2,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "skeleton2",\r\n        "idleSpeedMod": 1\r\n    },\r\n    "Ogre":{\r\n        "name":"Ogre",\r\n        "kind":8,\r\n        "attackMod": 1.5,\r\n        "defenseMod": 1.2,\r\n        "hpMod": 2,\r\n        "minLevel": 20,\r\n        "maxLevel": 24,\r\n        "aggroRange": 5,\r\n        "attackRange": 1,\r\n        "isAggressive": 1,\r\n        "attackRateMod": 1,\r\n        "reactionMod": 1,\r\n        "moveSpeedMod": 2,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "ogre",\r\n        "idleSpeedMod": 1\r\n    },\r\n    "Eye":{\r\n        "name":"Eye",\r\n        "kind":9,\r\n        "attackMod": 1.5,\r\n        "defenseMod": 1,\r\n        "hpMod": 1,\r\n        "minLevel": 25,\r\n        "maxLevel": 29,\r\n        "aggroRange": 3,\r\n        "attackRange": 1,\r\n        "isAggressive": 1,\r\n        "attackRateMod": 1,\r\n        "reactionMod": 1,\r\n        "moveSpeedMod": 2,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "eye",\r\n        "idleSpeedMod": 1\r\n    },\r\n    "Wizard":{\r\n        "name":"Wizard",\r\n        "kind":10,\r\n        "attackMod": 1.5,\r\n        "defenseMod": 1,\r\n        "hpMod": 1,\r\n        "minLevel": 30,\r\n        "maxLevel": 34,\r\n        "aggroRange": 6,\r\n        "attackRange": 3,\r\n        "isAggressive": 1,\r\n        "attackRateMod": 1,\r\n        "reactionMod": 1,\r\n        "moveSpeedMod": 3,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "wizard",\r\n        "idleSpeedMod": 1\r\n    },\r\n    "Spectre":{\r\n        "name":"Spectre",\r\n        "kind":11,\r\n        "attackMod": 1.5,\r\n        "defenseMod": 1.5,\r\n        "hpMod": 1,\r\n        "minLevel": 35,\r\n        "maxLevel": 29,\r\n        "aggroRange": 2,\r\n        "attackRange": 2,\r\n        "isAggressive": 1,\r\n        "attackRateMod": 2,\r\n        "reactionMod": 0.5,\r\n        "moveSpeedMod": 2,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "spectre",\r\n        "idleSpeedMod": 1\r\n    },\r\n    "DeathKnight":{\r\n        "name":"DeathKnight",\r\n        "kind":12,\r\n        "attackMod": 1.8,\r\n        "defenseMod": 1.8,\r\n        "hpMod": 1.5,\r\n        "minLevel": 40,\r\n        "maxLevel": 49,\r\n        "aggroRange": 4,\r\n        "attackRange": 1,\r\n        "isAggressive": 1,\r\n        "attackRateMod": 2,\r\n        "reactionMod": 0.5,\r\n        "moveSpeedMod": 2,\r\n        "respawnMod": 1,\r\n        "dropRate": 1,\r\n        "spawnChance": 50,\r\n        "dropBonus": 0,\r\n        "spriteName": "deathknight",\r\n        "idleSpeedMod": 1\r\n    }\r\n}\r\n';});

/* global Types */
define('data/mobdata',['text!../../shared/data/mobs.json'], function(MobsJson) {

	var MobData = {};
	MobData.Kinds = {};
	MobData.Properties = {};
	var mobParse = JSON.parse(MobsJson);
	$.each( mobParse, function( key, value ) {
		MobData.Properties[key.toLowerCase()] = {
			key: key.toLowerCase(),
			kind: value.kind,

			attack: (value.attackMod) ? (value.attackMod * 4) : 4,
			defense: (value.defenseMod) ? (value.defenseMod * 3) : 40,
			hp: value.hpMod ? (value.hpMod * 200) : 200,
			xp: value.xpMod ? (value.xpMod * 30) : 30,

			level: value.level ? value.level : 0,
			minLevel: value.minLevel ? value.minLevel : 0,
			maxLevel: value.maxLevel ? value.maxLevel : 0,

			aggroRange: (value.aggroRange) ? value.aggroRange+1 : 4,
			attackRange: (value.attackRange) ? value.attackRange : 1,
			isAggressive: (value.isAggressive == 1) ? true : false,

			attackRate: (value.attackRateMod) ? (value.attackRateMod * 1000) : 1000,
			reactionDelay: (value.reactionMod) ? (value.reactionMod * 768) : 768,
			moveSpeed: (value.moveSpeedMod) ? ~~(300 + (200 * value.moveSpeedMod)) : 500,
			//tick: 1, //(value.moveSpeedMod) ? (value.moveSpeedMod*2) : 2,
			idleSpeed: (value.idleSpeedMod) ? (value.idleSpeedMod * 1000) : 1000,

			respawn: (value.respawnMod) ? (value.respawnMod * 60000) : 60000,
			dropRate: (value.dropRate) ? value.dropRate : 1,
			spawnChance: (value.spawnChance) ? value.spawnChance : 50,

			dropBonus: (value.dropBonus) ? value.dropBonus : 0,
			drops: (value.drops) ? value.drops : null,
			spriteName: value.spriteName
		};
		MobData.Kinds[value.kind] = MobData.Properties[key.toLowerCase()];
	});
    return MobData;
});


define('text!data/../../shared/data/npcs.json', function () { return '[\n  {\n    "uid": "default",\n    "index": 0\n  },\n  {\n    "uid": "agent",\n    "name": "Auction",\n    "index": 1\n  },\n  {\n    "uid": "ancientmanumentnpc",\n    "index": 2\n  },\n  {\n    "uid": "angelnpc",\n    "index": 3\n  },\n  {\n    "uid": "beachnpc",\n    "name": "Beachgoer",\n    "index": 4\n  },\n  {\n    "uid": "bluebikinigirlnpc",\n    "index": 5\n  },\n  {\n    "uid": "bluestoremannpc",\n    "name": "Bank",\n    "index": 6\n  },\n  {\n    "uid": "boxingman",\n    "name": "Bank",\n    "index": 7\n  },\n  {\n    "uid": "coder",\n    "name": "Looks",\n    "index": 8\n  },\n  {\n    "uid": "desertnpc",\n    "name": "Repair",\n    "index": 9\n  },\n  {\n    "uid": "doctor",\n    "name": "Looks",\n    "index": 10\n  },\n  {\n    "uid": "elfnpc",\n    "index": 11\n  },\n  {\n    "uid": "fairynpc",\n    "index": 12\n  },\n  {\n    "uid": "firstsonangelnpc",\n    "index": 13\n  },\n  {\n    "uid": "fisherman",\n    "index": 14\n  },\n  {\n    "uid": "forestnpc",\n    "index": 15\n  },\n  {\n    "uid": "guard",\n    "index": 16\n  },\n  {\n    "uid": "iamverycoldnpc",\n    "index": 17\n  },\n  {\n    "uid": "iceelfnpc",\n    "index": 18\n  },\n  {\n    "uid": "king",\n    "index": 19\n  },\n  {\n    "uid": "lavanpc",\n    "name": "Dying Man",\n    "index": 20\n  },\n  {\n    "uid": "mermaidnpc",\n    "name": "Mermaid",\n    "index": 21\n  },\n  {\n    "uid": "mojojojonpc",\n    "index": 22\n  },\n  {\n    "uid": "momangelnpc",\n    "index": 23\n  },\n  {\n    "uid": "nyan",\n    "index": 24\n  },\n  {\n    "uid": "octocat",\n    "index": 25\n  },\n  {\n    "uid": "octopus",\n    "index": 26\n  },\n  {\n    "uid": "oddeyecat",\n    "index": 27\n  },\n  {\n    "uid": "pirategirlnpc",\n    "index": 28\n  },\n  {\n    "uid": "priest",\n    "index": 29\n  },\n  {\n    "uid": "redbikinigirlnpc",\n    "index": 30\n  },\n  {\n    "uid": "redstoremannpc",\n    "name": "Craft",\n    "index": 31\n  },\n  {\n    "uid": "rick",\n    "name": "Collect",\n    "index": 32\n  },\n  {\n    "uid": "scientist",\n    "index": 33\n  },\n  {\n    "uid": "secondsonangelnpc",\n    "index": 34\n  },\n  {\n    "uid": "shepherdboy",\n    "name": "Shop",\n    "index": 35\n  },\n  {\n    "uid": "snowshepherdboy",\n    "name": "Beginner shop",\n    "index": 36\n  },\n  {\n    "uid": "soldier",\n    "index": 37\n  },\n  {\n    "uid": "sorcerer",\n    "index": 38\n  },\n  {\n    "uid": "sponge",\n    "index": 39\n  },\n  {\n    "uid": "superiorangelnpc",\n    "index": 40\n  },\n  {\n    "uid": "vampire",\n    "index": 41\n  },\n  {\n    "uid": "vendingmachine",\n    "name": "Enchant",\n    "index": 42\n  },\n  {\n    "uid": "villagegirl",\n    "name": "Enchant",\n    "index": 43\n  },\n  {\n    "uid": "villager",\n    "name": "Craft",\n    "index": 44\n  },\n  {\n    "uid": "zombiegf",\n    "name": "Craft",\n    "index": 45\n  }\n]\n';});


define('text!data/../../shared/data/npc_english.json', function () { return '{\r\n  "0": {"type": 0, "text": "Kill %count Monsters Level %level or more"},\r\n  "1": {"type": 2, "text": "%names! Kill %count of em"},\r\n  "2": {"type": 2, "text": "I am dying kill %count of %names"},\r\n  "3": {"type": 2, "text": "%names have destroyed my home kill %count"},\r\n  "4": {"type": 2, "text": "%names have swarmed us kill %count"},\r\n  "5": {"type": 2, "text": "We\'ve been overtaken by %names kill %count"},\r\n  "6": {"type": 2, "text": "Kill %count %names for fun, there evil."},\r\n  "7": {"type": 1, "text": "Get %count %name. Return them to Collect in town."},\r\n  "8": {"type": 4, "text": "Find %name. We playing hide and seek!"}\r\n}\r\n';});

/* global Types */
define('data/npcdata',['text!../../shared/data/npcs.json', 'text!../../shared/data/npc_english.json'], function(NPCsJson, NPCSpeakJson) {

	var NpcData = {};
	NpcData.npcSpeak = JSON.parse(NPCSpeakJson);

	NpcData.Properties = {};
	NpcData.Kinds = JSON.parse(NPCsJson);
	NpcData.Kinds.forEach( function( value, key ) {
		value.title = value.name || value.uid;
		NpcData.Properties[value.uid] = value;
	});

	NpcData.isNpc = function(kind){
	    return NpcData.Kinds[kind] ? true : false;
	};
    return NpcData;
});


define('entity/character',['./entitymoving', '../transition', '../timer', 'data/mobdata', 'data/npcdata'], function(EntityMoving, Transition, Timer, MobData, NpcData) {

  var Character = EntityMoving.extend({
    init: function(id, type, mapIndex, kind) {
        var self = this;

        this._super(id, type, mapIndex, kind);

        this.orientation = Types.Orientations.DOWN;

        // Speeds
        this.atkSpeed = 70;

        this.setAttackRate(70);

        // Combat
        this.target = null;
        this.unconfirmedTarget = null;

        // Health
        this.stats = {};
        this.stats.hp = 0;
        this.stats.hpMax = 0;
        this.stats.ep = 0;
        this.stats.epMax = 0;

        // Modes
        this.isDying = false;
        this.isDead = false;
        this.attackingMode = false;
        this.followingMode = false;
        this.inspecting = null;

        this.isStunned = false;
        this.isAttacking = false;

        this.isReadyToMove = true;

        this.updateCharacter = false;

        this.requestMove = false;

        this.freeze = false;
        this.flagAttacking = false;

        this.observeTimer = new Timer(4096);

        this.sprite = [];

        this.attackers = {};
    },

/*******************************************************************************
 * BEGIN - Stat Functions.
 ******************************************************************************/
    resetHP: function () {
      var max = this.stats.hpMax;
      this.stats.hp = max;
    },

    resetEP: function () {
      var max = this.stats.epMax;
      this.stats.ep = max;
    },

    setHP: function (val) {
      val = val || this.stats.hpMax;
      this.stats.hp = val;
    },

    setEP: function (val) {
      val = val || this.stats.epMax;
      this.stats.ep = val;
    },

    setMaxHP: function(hp) {
        this.stats.hpMax = hp;
        this.stats.hp = hp;
    },

    setMaxEP: function(ep) {
        this.stats.epMax = ep;
        this.stats.ep = ep;
    },

    setAttackRange: function(range) {
        this.attackRange = range;
    },

/*******************************************************************************
 * END - Stat Functions.
 ******************************************************************************/

/*******************************************************************************
 * BEGIN - Attack Functions.
 ******************************************************************************/

    hit: function(orientation) {
        var self = this;
        this.setOrientation(orientation || this.orientation);
        this.fsm = "ATTACK";
        //this.freeze = true;
        this.animate("atk", this.atkSpeed, 1, function () {
          self.fsm = "IDLE";
          //self.freeze = false;
          self.idle(self.orientation);
        });
    },

    /**
     * Makes the character attack another character. Same as Character.follow but with an auto-attacking behavior.
     * @see Character.follow
     */
    engage: function(character) {
        this.attackingMode = true;
        this.setTarget(character);
        //this.follow(character);
    },

    disengage: function() {
        this.attackingMode = false;
        this.followingMode = false;
        this.removeTarget();
    },

    /**
     * Returns true if the character is currently attacking.
     */
    isAttacking: function() {
        return this.attackingMode;
    },

    /**
     * Returns true if this character is currently attacked by a given character.
     * @param {Character} character The attacking character.
     * @returns {Boolean} Whether this is an attacker of this character.
     */
    isAttackedBy: function(character) {
      if (Object.keys(this.attackers).length == 0) {
        return false;
      }
      return this.attackers.hasOwnProperty(character.id) &&
        this.attackers[character.id] === character;
    },

    isAttacked: function() {
      return !(Object.keys(this.attackers).length == 0);
    },

    /**
     * Registers a character as a current attacker of this one.
     * @param {Character} character The attacking character.
     */
    addAttacker: function(character) {
      if (!this.isAttackedBy(character)) {
        this.attackers[character.id] = character;
      }
    },

    /**
     * Unregisters a character as a current attacker of this one.
     * @param {Character} character The attacking character.
     */
    removeAttacker: function(character) {
      if (!this.isAttacked()) {
        return;
      }
      delete this.attackers[character.id];
    },

    removeAttackers: function() {
      this.attackers = {};
    },

    clearAttackerRefs: function () {
      var self = this;
      this.forEachAttacker(function (c) {
        c.removeAttacker(self);
      });
    },

    /**
     * Loops through all the characters currently attacking this one.
     * @param {Function} callback Function which must accept one character argument.
     */
    forEachAttacker: function(callback) {
      _.each(this.attackers, function(attacker) {
        callback(attacker);
      });
    },

    /**
     * Marks this character as waiting to attack a target.
     * By sending an "attack" message, the server will later confirm (or not)
     * that this character is allowed to acquire this target.
     *
     * @param {Character} character The target character
     */
    waitToAttack: function(character) {
      this.unconfirmedTarget = character;
    },

    /**
     * Returns true if this character is currently waiting to attack the target character.
     * @param {Character} character The target character.
     * @returns {Boolean} Whether this character is waiting to attack.
     */
    isWaitingToAttack: function(character) {
      return (this.unconfirmedTarget === character);
    },

    canAttack: function(time) {
        if(this.isDead == false && this.attackCooldown.isOver(time)) {
            return true;
        }
        return false;
    },

    setAttackRate: function(rate) {
        this.attackCooldown = new Timer(rate);
    },

/*******************************************************************************
 * END - Attack Functions.
 ******************************************************************************/

/*******************************************************************************
 * BEGIN - Target Functions.
 ******************************************************************************/

    /**
     * Sets this character's attack target. It can only have one target at any time.
     * @param {Character} character The target character.
     */
    setTarget: function(character) {
        //try { throw new Error(); } catch(err) { console.error(err.stack); }
         if (character == null || character.isDying || character.isDead) {
         	     this.removeTarget();
         	     return;
         }
         if(this.target !== character) { // If it's not already set as the target
            if(this.hasTarget()) {
                this.removeTarget(); // Cleanly remove the previous one
            }
            this.target = character;
            if(this.settarget_callback){
                var targetName = this.target.spriteName;
                if (MobData.Kinds[character.kind] && targetName)
                    this.settarget_callback(character, targetName, character.level);
            }
        } else {
            log.debug(character.id + " is already the target of " + this.id);
        }
    },

    onSetTarget: function(callback) {
      this.settarget_callback = callback;
    },

    showTarget: function(character) {
      if(this.inspecting !== character && character !== this){
        this.inspecting = character;
        if(this.settarget_callback && this.target){

          var targetName;
          var mobData = MobData.Kinds[character.kind];
          if (mobData)
          {
          	  if (mobData.spriteName)
          	      targetName = mobData.spriteName;
              else
                  targetName = mobData.key;
          }
          else if (isItem(character.id)) {
          	      targetName = ItemTypes.getKindAsString(character.kind);
          }
          this.settarget_callback(character, targetName, character.level, true);
        }
      }
    },

    /**
     * Removes the current attack target.
     */
    removeTarget: function() {
      var self = this;

      if (this.target) {
        if (this.target instanceof Character) {
          this.target.removeAttacker(this);
        }
        if (this.removetarget_callback) this.removetarget_callback(this.target.id);
        this.target = null;
      }
    },

    onRemoveTarget: function(callback){
        this.removetarget_callback = callback;
    },

    /**
     * Returns true if this character has a current attack target.
     * @returns {Boolean} Whether this character has a target.
     */
    hasTarget: function() {
        return !(this.target === null);
    },

    canReachTarget: function() {
        return this.canReach(this.target);
    },

    canInteract: function (entity) {
      return this.isInReach(entity.x, entity.y);
    },

    canReach: function(entity) {
      var ts = G_TILESIZE;

      //log.info("attackRange: " + this.attackRange);

      if (this.attackRange === 1)
        return this.isInReach(entity.x, entity.y, this.orientation);

      if (this.attackRange > 1)
      {
        var range = ~~(Utils.realDistance([entity.x,entity.y],[this.x,this.y])/G_TILESIZE);
        return range <= this.attackRange;
      }
      return false;
    },

    clearTarget: function () {
      this.target = null;
    },

/*******************************************************************************
 * END - Target Functions.
 ******************************************************************************/

/*******************************************************************************
 * BEGIN - Orientation Functions.
 ******************************************************************************/

    // Orientation Code.
    lookAtEntity: function(entity) {
      this._lookAtEntity(entity);
    },

    _lookAtEntity: function(entity) {
       log.info("lookAtEntity");
       if (entity) {
           log.info("lookAtEntity "+entity.id);
           this.orientation = this.getOrientationTo([entity.x, entity.y]);
           log.info("this.orientation="+this.orientation);
       }
       if (!this.hasAnimation('atk'))
         this.idle(this.orientation);
       return this.orientation;
    },

/*******************************************************************************
 * END - Orientation Functions.
 ******************************************************************************/

/*******************************************************************************
 * BEGIN - Misc Function.
 ******************************************************************************/

     onDeath: function(callback) {
         this.death_callback = callback;
     },

     hasWeapon: function() {
         return false;
     },

    /**
     *
     */
    dead: function () {
      this.isDead = true;
      this.isDying = false;
      this.forceStop();
      this.freeze = true;
    },

    die: function() {
        this.forceStop();
        this.removeTarget();
        this.isDying = true;
        this.freeze = true;
        clearTimeout(this.moveTimeout);

        if(this.death_callback) {
            this.death_callback();
        }
    },

    hurt: function() {
        var self = this;

        this.stopHurting();
        this.sprite = this.hurtSprite;
        this.hurting = setTimeout(this.stopHurting.bind(this), 75);
    },

    stopHurting: function() {
        this.sprite = this.normalSprite;
        clearTimeout(this.hurting);
    },

    followAttack: function(entity) {
      var found = false;

      var spot = this.getClosestSpot(entity, 1, this.attackRange);

      if (spot && spot.x && spot.y)
        this.moveTo_(spot.x, spot.y);
    },

    clean: function() {
    },

    // Observe used for zoning.
    canObserve: function (time) {
      if (this.observeTimer.isOver(time))
        return true;
      return false;
    },

/*******************************************************************************
 * END - Misc Function.
 ******************************************************************************/

  });

  return Character;
});


define('entity/mob',['./character', 'data/mobdata'], function(Character, MobData) {

    var Mob = Character.extend({
        init: function(id, type, map, kind, name, level) {
            this._super(id, type, map, kind);

            this.data = MobData.Kinds[this.kind];

            this.idleSpeed = randomInt(~~(this.data.idleSpeed * 2/3), ~~(this.data.idleSpeed * 4/3));

            this.level = level || this.data.level;

            this.title = this.data.name;

            this.stats.attack = this.data.attack * this.level;
            this.stats.defense = this.data.defense * this.level;
            this.stats.hp = this.data.hp * this.level;
            this.stats.hpMax = this.data.hp * this.level;
            this.stats.xp = this.data.xp * this.level;

            this.hatelist = [];
            this.hateCount = 0;
            this.tankerlist = [];

            this.respawnTimeout = null;
            this.returnTimeout = null;
            this.isDead = false;

            this.aggroRange = this.data.aggroRange;
            this.attackRange = this.data.attackRange;
            this.isAggressive = this.data.isAggressive;

            this.moveSpeed = this.data.moveSpeed;
            //this.tick = this.data.tick;
            this.setMoveRate(this.moveSpeed);

            this.setAttackRate(this.data.attackRate);
            //this.setAggroRate(this.data.reactionDelay);

            //this.orientation = Utils.randomOrientation();
        },

        getSpriteName: function() {
        	log.info("spriteName="+MobData.Kinds[this.kind].spriteName);
                return MobData.Kinds[this.kind].spriteName;
        },
    });

    return Mob;
});

/* global Types */

function ItemRoom(slot, itemKind, itemNumber, itemDurability, itemDurabilityMax, itemExperience)
{
  this.slot = slot;
  this.itemKind = itemKind;
  this.itemNumber = itemNumber;
  this.itemDurability = itemDurability;
  this.itemDurabilityMax = itemDurabilityMax;
  this.itemExperience = itemExperience;
}
ItemRoom.toArray = function () {
  var cols = [parseInt(this.slot),
    this.itemKind,
    this.itemNumber,
    this.itemDurability,
    this.itemDurabilityMax,
    this.itemExperience];
  return cols;
}
ItemRoom.toString = function () {
    return this.toArray().join(",");
}


define('entity/item',['./entity'], function(Entity) {

    var Item = Entity.extend({
        init: function(id, type, map, kind /*, type , durability, durabilityMax, experience*/) {
    	    this._super(id, type, map, kind);

          this.kind = kind;
    	    this.type = type;
    	    this.wasDropped = false;
          //this.itemDurability = durability;
          //this.itemDurabilityMax = durabilityMax;
          //this.itemExperience = experience;
    	    this.count = 1;
        },

        getItemSpriteName: function() {
             if (ItemTypes.KindData[this.kind].sprite !== "")
             {
             	     log.info("item-"+ ItemTypes.KindData[this.kind].sprite);
             	     return "item-"+ ItemTypes.KindData[this.kind].sprite;
             }
             return null;
        },

        getInfoMsg: function(){
            return this.getInfoMsgEx(this);
        },

        getInfoMsgEx: function(item) {
            var msg = '';
            if(ItemTypes.isEquipment(item.itemKind)){
                msg = ItemTypes.getName(item.itemKind) + ": Lv " + ItemTypes.getLevelByKind(item.itemKind) + (item.itemNumber ? "+" + item.itemNumber + " " : " ") + (item.itemDurability/10) + "/" + (item.itemDurabilityMax/10);
                return msg;
            }
            var name = ItemTypes.getName(item.itemKind);
            return (name) ? name : '';
        },

        getState: function () {
          this._getBaseState().concat([this.count]);
        }
    });
  Item.getInfoMsgEx = Item.prototype.getInfoMsgEx;
  return Item;
});

/* pako 1.0.5 nodeca/pako */(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define('lib/pako',[],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.pako = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';


var zlib_deflate = require('./zlib/deflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;

},{"./utils/common":3,"./utils/strings":4,"./zlib/deflate":8,"./zlib/messages":13,"./zlib/zstream":15}],2:[function(require,module,exports){
'use strict';


var zlib_inflate = require('./zlib/inflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var c            = require('./zlib/constants');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');
var GZheader     = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = strings.string2buf(dictionary);
      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = zlib_inflate.inflateSetDictionary(this.strm, dict);

    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;

},{"./utils/common":3,"./utils/strings":4,"./zlib/constants":6,"./zlib/gzheader":9,"./zlib/inflate":11,"./zlib/messages":13,"./zlib/zstream":15}],3:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],4:[function(require,module,exports){
// String encode/decode helpers



var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

},{"./common":3}],5:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],6:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],7:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],8:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":3,"./adler32":5,"./crc32":7,"./messages":13,"./trees":14}],9:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;

},{}],10:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],11:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":3,"./adler32":5,"./crc32":7,"./inffast":10,"./inftrees":12}],12:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":3}],13:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],14:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":3}],15:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],"/":[function(require,module,exports){
// Top level file is just a mixin of submodules & constants


var assign    = require('./lib/utils/common').assign;

var deflate   = require('./lib/deflate');
var inflate   = require('./lib/inflate');
var constants = require('./lib/zlib/constants');

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;

},{"./lib/deflate":1,"./lib/inflate":2,"./lib/utils/common":3,"./lib/zlib/constants":6}]},{},[])("/")
});

define('exceptions',[],function() {

    var Exceptions = {

        LootException: Class.extend({
            init: function(message) {
                this.message = message;
            }
        })
    };

    return Exceptions;
});


define('text!data/../../shared/data/appearance.json', function () { return '[\n\t{\n\t\t"name": "Sword 1",\n\t\t"type": "weapon",\n\t\t"sprite": "sword1",\n\t\t"buy": 0\n\t},\n\t{\n\t\t"name": "Sword 2",\n\t\t"type": "weapon",\n\t\t"sprite": "sword2",\n\t\t"buy": 500\n\n\t},\n\t{\n\t\t"name": "Axe",\n\t\t"type": "weapon",\n\t\t"sprite": "axe",\n\t\t"buy": 1000\n\t},\n\t{\n\t\t"name": "Morning Star",\n\t\t"type": "weapon",\n\t\t"sprite": "morningstar",\n\t\t"buy": 1500\n\t},\n\t{\n\t\t"name": "Blue Sword",\n\t\t"type": "weapon",\n\t\t"sprite": "bluesword",\n\t\t"buy": 2000\n\n\t},\n\t{\n\t\t"name": "Red Sword",\n\t\t"type": "weapon",\n\t\t"sprite": "redsword",\n\t\t"buy": 2500\n\t},\n\t{\n\t\t"name": "Golden Sword",\n\t\t"type": "weapon",\n\t\t"sprite": "goldensword",\n\t\t"buy": 3000\n\t},\n\t{\n\t\t"name": "Side Sword",\n\t\t"type": "weapon",\n\t\t"sprite": "sidesword",\n\t\t"buy": 3500\n\t},\n\t{\n\t\t"name": "Spear",\n\t\t"type": "weapon",\n\t\t"sprite": "spear",\n\t\t"buy": 4000\n\t},\n\t{\n\t\t"name": "Scimitar",\n\t\t"type": "weapon",\n\t\t"sprite": "scimitar",\n\t\t"buy": 4500\n\t},\n\t{\n\t\t"name": "Trident",\n\t\t"type": "weapon",\n\t\t"sprite": "trident",\n\t\t"buy": 5000\n\t},\n\t{\n\t\t"name": "Blue Scimitar",\n\t\t"type": "weapon",\n\t\t"sprite": "bluescimitar",\n\t\t"buy": 5500\n\t},\n\t{\n\t\t"name": "Hammer",\n\t\t"type": "weapon",\n\t\t"sprite": "hammer",\n\t\t"buy": 6000\n\t},\n\t{\n\t\t"name": "Green Light Saber",\n\t\t"type": "weapon",\n\t\t"sprite": "greenlightsaber",\n\t\t"buy": 6500\n\t},\n\t{\n\t\t"name": "Sky Light Saber",\n\t\t"type": "weapon",\n\t\t"sprite": "skylightsaber",\n\t\t"buy": 7000\n\t},\n\t{\n\t\t"name": "Red Light Saber",\n\t\t"type": "weapon",\n\t\t"sprite": "redlightsaber",\n\t\t"buy": 7500\n\t},\n\t{\n\t\t"name": "Bastard Sword",\n\t\t"type": "weapon",\n\t\t"sprite": "bastardsword",\n\t\t"buy": 8000\n\t},\n\t{\n\t\t"name": "Red Metal Sword",\n\t\t"type": "weapon",\n\t\t"sprite": "redmetalsword",\n\t\t"buy": 8500\n\t},\n\t{\n\t\t"name": "Justice Hammer",\n\t\t"type": "weapon",\n\t\t"sprite": "justicehammer",\n\t\t"buy": 9000\n\t},\n\t{\n\t\t"name": "Rose",\n\t\t"type": "weapon",\n\t\t"sprite": "rose",\n\t\t"buy": 9500\n\t},\n\t{\n\t\t"name": "Ice Rose",\n\t\t"type": "weapon",\n\t\t"sprite": "icerose",\n\t\t"buy": 10000\n\t},\n\t{\n\t\t"name": "Halberd",\n\t\t"type": "weapon",\n\t\t"sprite": "halberd",\n\t\t"buy": 10500\n\t},\n\t{\n\t\t"name": "Whip",\n\t\t"type": "weapon",\n\t\t"sprite": "whip",\n\t\t"buy": 11000\n\t},\n\t{\n\t\t"name": "Forest Guardian Sword",\n\t\t"type": "weapon",\n\t\t"sprite": "forestguardiansword",\n\t\t"buy": 11500\n\t},\n\t{\n\t\t"name": "Sickle",\n\t\t"type": "weapon",\n\t\t"sprite": "sickle",\n\t\t"buy": 12000\n\t},\n\t{\n\t\t"name": "Plunger",\n\t\t"type": "weapon",\n\t\t"sprite": "plunger",\n\t\t"buy": 12500\n\t},\n\t{\n\t\t"name": "Red Sickle",\n\t\t"type": "weapon",\n\t\t"sprite": "redsickle",\n\t\t"buy": 13000\n\t},\n\t{\n\t\t"name": "Day Walker",\n\t\t"type": "weapon",\n\t\t"sprite": "daywalker",\n\t\t"buy": 13500\n\t},\n\t{\n\t\t"name": "Purple Cloud Kallege",\n\t\t"type": "weapon",\n\t\t"sprite": "purplecloudkallege",\n\t\t"buy": 14000\n\t},\n\t{\n\t\t"name": "Sea Rage",\n\t\t"type": "weapon",\n\t\t"sprite": "searage",\n\t\t"buy": 14500\n\t},\n\t{\n\t\t"name": "Breaker",\n\t\t"type": "weapon",\n\t\t"sprite": "breaker",\n\t\t"buy": 15000\n\t},\n\t{\n\t\t"name": "Enel Trident",\n\t\t"type": "weapon",\n\t\t"sprite": "eneltrident",\n\t\t"buy": 15500\n\t},\n\t{\n\t\t"name": "Rainbow Sword",\n\t\t"type": "weapon",\n\t\t"sprite": "rainbowsword",\n\t\t"buy": 16000\n\t},\n\t{\n\t\t"name": "Typhoon",\n\t\t"type": "weapon",\n\t\t"sprite": "typhoon",\n\t\t"buy": 16500\n\t},\n\t{\n\t\t"name": "Memme",\n\t\t"type": "weapon",\n\t\t"sprite": "memme",\n\t\t"buy": 17000\n\t},\n\t{\n\t\t"name": "Candybar",\n\t\t"type": "weapon",\n\t\t"sprite": "candybar",\n\t\t"buy": 17500\n\t},\n\t{\n\t\t"name": "Butcher Knife",\n\t\t"type": "weapon",\n\t\t"sprite": "butcherknife",\n\t\t"buy": 18000\n\t},\n\t{\n\t\t"name": "Fire Shot",\n\t\t"type": "weapon",\n\t\t"sprite": "fireshot",\n\t\t"buy": 18500\n\t},\n\t{\n\t\t"name": "Comb",\n\t\t"type": "weapon",\n\t\t"sprite": "comb",\n\t\t"buy": 19000\n\t},\n\t{\n\t\t"name": "Squeaky Hammer",\n\t\t"type": "weapon",\n\t\t"sprite": "squeakyhammer",\n\t\t"buy": 19500\n\t},\n\t{\n\t\t"name": "Fire Play",\n\t\t"type": "weapon",\n\t\t"sprite": "fireplay",\n\t\t"buy": 20000\n\t},\n\t{\n\t\t"name": "Wea Staff",\n\t\t"type": "weapon",\n\t\t"sprite": "weastaff",\n\t\t"buy": 20500\n\t},\n\t{\n\t\t"name": "Pink Sword",\n\t\t"type": "weapon",\n\t\t"sprite": "pinksword",\n\t\t"buy": 21000\n\t},\n\t{\n\t\t"name": "Conference Call",\n\t\t"type": "weapon",\n\t\t"sprite": "conferencecall",\n\t\t"buy": 21500\n\t},\n\t{\n\t\t"name": "Cactus Axe",\n\t\t"type": "weapon",\n\t\t"sprite": "cactusaxe",\n\t\t"buy": 22000\n\t},\n\t{\n\t\t"name": "Devil Kazya Sword",\n\t\t"type": "weapon",\n\t\t"sprite": "devilkazyasword",\n\t\t"buy": 22500\n\t},\n\t{\n\t\t"name": "Bamboo Spear",\n\t\t"type": "weapon",\n\t\t"sprite": "bamboospear",\n\t\t"buy": 23000\n\t},\n\t{\n\t\t"name": "Paewoldo",\n\t\t"type": "weapon",\n\t\t"sprite": "paewoldo",\n\t\t"buy": 23500\n\t},\n\t{\n\t\t"name": "Magic Spear",\n\t\t"type": "weapon",\n\t\t"sprite": "magicspear",\n\t\t"buy": 24000\n\t},\n\t{\n\t\t"name": "Fire Sword",\n\t\t"type": "weapon",\n\t\t"sprite": "firesword",\n\t\t"buy": 24500\n\t},\n\n\t{\n\t\t"name": "Wooden Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "woodenbow",\n\t\t"buy": 0\n\t},\n\t{\n\t\t"name": "Plastic Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "plasticbow",\n\t\t"buy": 500\n\t},\n\t{\n\t\t"name": "Iron Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "ironbow",\n\t\t"buy": 1000\n\t},\n\t{\n\t\t"name": "Red Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "redbow",\n\t\t"buy": 1500\n\t},\n\t{\n\t\t"name": "Violet Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "violetbow",\n\t\t"buy": 2000\n\t},\n\t{\n\t\t"name": "Death Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "deathbow",\n\t\t"buy": 2500\n\t},\n\t{\n\t\t"name": "Golden Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "goldenbow",\n\t\t"buy": 3000\n\t},\n\t{\n\t\t"name": "Watermelon Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "watermelonbow",\n\t\t"buy": 3500\n\t},\n\t{\n\t\t"name": "Green Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "greenbow",\n\t\t"buy": 4000\n\t},\n\t{\n\t\t"name": "Redenel Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "redenelbow",\n\t\t"buy": 4500\n\t},\n\t{\n\t\t"name": "Mermaid Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "mermaidbow",\n\t\t"buy": 5000\n\t},\n\t{\n\t\t"name": "Seahorse Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "seahorsebow",\n\t\t"buy": 5500\n\t},\n\t{\n\t\t"name": "Hunter Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "hunterbow",\n\t\t"buy": 6000\n\t},\n\t{\n\t\t"name": "Green Light Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "greenlightbow",\n\t\t"buy": 6500\n\t},\n\t{\n\t\t"name": "Sky Light Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "skylightbow",\n\t\t"buy": 7000\n\t},\n\t{\n\t\t"name": "Red Light Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "redlightbow",\n\t\t"buy": 7500\n\t},\n\t{\n\t\t"name": "Captain Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "captainbow",\n\t\t"buy": 8000\n\t},\n\t{\n\t\t"name": "Red Metal Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "redmetalbow",\n\t\t"buy": 8500\n\t},\n\t{\n\t\t"name": "Justice Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "justicebow",\n\t\t"buy": 9000\n\t},\n\t{\n\t\t"name": "Rose Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "rosebow",\n\t\t"buy": 9500\n\t},\n\t{\n\t\t"name": "Marine Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "marinebow",\n\t\t"buy": 10000\n\t},\n\t{\n\t\t"name": "Crystal Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "crystalbow",\n\t\t"buy": 10500\n\t},\n\t{\n\t\t"name": "Colorful Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "gaybow",\n\t\t"buy": 11000\n\t},\n\t{\n\t\t"name": "Forest Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "forestbow",\n\t\t"buy": 11500\n\t},\n\t{\n\t\t"name": "Sickle Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "sicklebow",\n\t\t"buy": 12000\n\t},\n\t{\n\t\t"name": "Blood Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "bloodbow",\n\t\t"buy": 12500\n\t},\n\t{\n\t\t"name": "Red Sickle Bow",\n\t\t"type": "weaponarcher",\n\t\t"sprite": "redsicklebow",\n\t\t"buy": 13000\n\t},\n\n\t{\n\t\t"name": "Cloth Armor",\n\t\t"type": "armor",\n\t\t"sprite": "clotharmor",\n\t\t"buy": 0\n\t},\n\t{\n\t\t"name": "Leather Armor",\n\t\t"type": "armor",\n\t\t"sprite": "leatherarmor",\n\t\t"buy": 500\n\t},\n\t{\n\t\t"name": "Mail Armor",\n\t\t"type": "armor",\n\t\t"sprite": "mailarmor",\n\t\t"buy": 1000\n\t},\n\t{\n\t\t"name": "Plate Armor",\n\t\t"type": "armor",\n\t\t"sprite": "platearmor",\n\t\t"buy": 1500\n\t},\n\t{\n\t\t"name": "Red Armor",\n\t\t"type": "armor",\n\t\t"sprite": "redarmor",\n\t\t"buy": 2000\n\t},\n\t{\n\t\t"name": "Golden Armor",\n\t\t"type": "armor",\n\t\t"sprite": "goldenarmor",\n\t\t"buy": 2500\n\t},\n\t{\n\t\t"name": "Green Armor",\n\t\t"type": "armor",\n\t\t"sprite": "greenarmor",\n\t\t"buy": 3000\n\t},\n\t{\n\t\t"name": "Green Wing Armor",\n\t\t"type": "armor",\n\t\t"sprite": "greenwingarmor",\n\t\t"buy": 3500\n\t},\n\t{\n\t\t"name": "Guard Armor",\n\t\t"type": "armor",\n\t\t"sprite": "guardarmor",\n\t\t"buy": 4000\n\t},\n\t{\n\t\t"name": "Red Guard Armor",\n\t\t"type": "armor",\n\t\t"sprite": "redguardarmor",\n\t\t"buy": 4500\n\t},\n\t{\n\t\t"name": "White Armor",\n\t\t"type": "armor",\n\t\t"sprite": "whitearmor",\n\t\t"buy": 5000\n\t},\n\t{\n\t\t"name": "Rat Armor",\n\t\t"type": "armor",\n\t\t"sprite": "ratarmor",\n\t\t"buy": 5500\n\t},\n\t{\n\t\t"name": "Blue Pirate Armor",\n\t\t"type": "armor",\n\t\t"sprite": "bluepiratearmor",\n\t\t"buy": 6000\n\t},\n\t{\n\t\t"name": "Cheoli Armor",\n\t\t"type": "armor",\n\t\t"sprite": "cheoliarmor",\n\t\t"buy": 6500\n\t},\n\t{\n\t\t"name": "Dovakin Armor",\n\t\t"type": "armor",\n\t\t"sprite": "dovakinarmor",\n\t\t"buy": 7000\n\t},\n\t{\n\t\t"name": "GB Wing Armor",\n\t\t"type": "armor",\n\t\t"sprite": "gbwingarmor",\n\t\t"buy": 7500\n\t},\n\t{\n\t\t"name": "Red Wing Armor",\n\t\t"type": "armor",\n\t\t"sprite": "redwingarmor",\n\t\t"buy": 8000\n\t},\n\t{\n\t\t"name": "Snow Fox Armor",\n\t\t"type": "armor",\n\t\t"sprite": "snowfoxarmor",\n\t\t"buy": 8500\n\t},\n\t{\n\t\t"name": "Wolf Armor",\n\t\t"type": "armor",\n\t\t"sprite": "wolfarmor",\n\t\t"buy": 9000\n\t},\n\t{\n\t\t"name": "Blue Wing Armor",\n\t\t"type": "armor",\n\t\t"sprite": "bluewingarmor",\n\t\t"buy": 9500\n\t},\n\t{\n\t\t"name": "Thief Armor",\n\t\t"type": "armor",\n\t\t"sprite": "thiefarmor",\n\t\t"buy": 10000\n\t},\n\t{\n\t\t"name": "Ninja Armor",\n\t\t"type": "armor",\n\t\t"sprite": "ninjaarmor",\n\t\t"buy": 10500\n\t},\n\t{\n\t\t"name": "Dragon Armor",\n\t\t"type": "armor",\n\t\t"sprite": "dragonarmor",\n\t\t"buy": 11000\n\t},\n\t{\n\t\t"name": "Fallen Armor",\n\t\t"type": "armor",\n\t\t"sprite": "fallenarmor",\n\t\t"buy": 11500\n\t},\n\t{\n\t\t"name": "Paladin Armor",\n\t\t"type": "armor",\n\t\t"sprite": "paladinarmor",\n\t\t"buy": 12000\n\t},\n\t{\n\t\t"name": "Crystal Armor",\n\t\t"type": "armor",\n\t\t"sprite": "crystalarmor",\n\t\t"buy": 12500\n\t},\n\t{\n\t\t"name": "Adherer Robe",\n\t\t"type": "armor",\n\t\t"sprite": "adhererrobe",\n\t\t"buy": 13000\n\t},\n\t{\n\t\t"name": "Frost Armor",\n\t\t"type": "armor",\n\t\t"sprite": "frostarmor",\n\t\t"buy": 13500\n\t},\n\t{\n\t\t"name": "Strap Armor",\n\t\t"type": "armor",\n\t\t"sprite": "gayarmor",\n\t\t"buy": 14000\n\t},\n\t{\n\t\t"name": "School Uniform",\n\t\t"type": "armor",\n\t\t"sprite": "schooluniform",\n\t\t"buy": 14500\n\t},\n\t{\n\t\t"name": "Beautiful Life",\n\t\t"type": "armor",\n\t\t"sprite": "beautifullife",\n\t\t"buy": 15000\n\t},\n\t{\n\t\t"name": "Region Armor",\n\t\t"type": "armor",\n\t\t"sprite": "regionarmor",\n\t\t"buy": 15500\n\t},\n\t{\n\t\t"name": "Ghost Rider",\n\t\t"type": "armor",\n\t\t"sprite": "ghostrider",\n\t\t"buy": 16000\n\t},\n\t{\n\t\t"name": "Taekwondo",\n\t\t"type": "armor",\n\t\t"sprite": "taekwondo",\n\t\t"buy": 16500\n\t},\n\t{\n\t\t"name": "Rabbit Armor",\n\t\t"type": "armor",\n\t\t"sprite": "rabbitarmor",\n\t\t"buy": 17000\n\t},\n\t{\n\t\t"name": "Portal Armor",\n\t\t"type": "armor",\n\t\t"sprite": "portalarmor",\n\t\t"buy": 17500\n\t},\n\t{\n\t\t"name": "Pirate King",\n\t\t"type": "armor",\n\t\t"sprite": "pirateking",\n\t\t"buy": 18000\n\t},\n\t{\n\t\t"name": "Sea Dragon Armor",\n\t\t"type": "armor",\n\t\t"sprite": "seadragonarmor",\n\t\t"buy": 18500\n\t},\n\t{\n\t\t"name": "Shadow Region Armor",\n\t\t"type": "armor",\n\t\t"sprite": "shadowregionarmor",\n\t\t"buy": 19000\n\t},\n\t{\n\t\t"name": "Enel Armor",\n\t\t"type": "armor",\n\t\t"sprite": "enelarmor",\n\t\t"buy": 19500\n\t},\n\t{\n\t\t"name": "Mini Sea Dragon Armor",\n\t\t"type": "armor",\n\t\t"sprite": "miniseadragonarmor",\n\t\t"buy": 20000\n\t},\n\t{\n\t\t"name": "Huni Armor",\n\t\t"type": "armor",\n\t\t"sprite": "huniarmor",\n\t\t"buy": 20500\n\t},\n\t{\n\t\t"name": "Dambo Armor",\n\t\t"type": "armor",\n\t\t"sprite": "damboarmor",\n\t\t"buy": 21000\n\t},\n\t{\n\t\t"name": "Squid Armor",\n\t\t"type": "armor",\n\t\t"sprite": "squidarmor",\n\t\t"buy": 21500\n\t},\n\t{\n\t\t"name": "Bee Armor",\n\t\t"type": "armor",\n\t\t"sprite": "beearmor",\n\t\t"buy": 22000\n\t},\n\t{\n\t\t"name": "Blue Dambo Armor",\n\t\t"type": "armor",\n\t\t"sprite": "bluedamboarmor",\n\t\t"buy": 22500\n\t},\n\t{\n\t\t"name": "Rudolf Armor",\n\t\t"type": "armor",\n\t\t"sprite": "rudolfarmor",\n\t\t"buy": 23000\n\t},\n\t{\n\t\t"name": "Christmas Armor",\n\t\t"type": "armor",\n\t\t"sprite": "christmasarmor",\n\t\t"buy": 23500\n\t},\n\t{\n\t\t"name": "Robocop Armor",\n\t\t"type": "armor",\n\t\t"sprite": "robocoparmor",\n\t\t"buy": 24000\n\t},\n\t{\n\t\t"name": "Pink Cockroach Armor",\n\t\t"type": "armor",\n\t\t"sprite": "pinkcockroacharmor",\n\t\t"buy": 24500\n\t},\n\t{\n\t\t"name": "Cockroach Suit",\n\t\t"type": "armor",\n\t\t"sprite": "cockroachsuit",\n\t\t"buy": 25000\n\t},\n\t{\n\t\t"name": "Dinosaur Armor",\n\t\t"type": "armor",\n\t\t"sprite": "dinosaurarmor",\n\t\t"buy": 25500\n\t},\n\t{\n\t\t"name": "Cat Armor",\n\t\t"type": "armor",\n\t\t"sprite": "catarmor",\n\t\t"buy": 26000\n\t},\n\t{\n\t\t"name": "Snowman Armor",\n\t\t"type": "armor",\n\t\t"sprite": "snowmanarmor",\n\t\t"buy": 26500\n\t},\n\t{\n\t\t"name": "Beetle Armor",\n\t\t"type": "armor",\n\t\t"sprite": "beetlearmor",\n\t\t"buy": 27000\n\t},\n\t{\n\t\t"name": "Hongcheol Armor",\n\t\t"type": "armor",\n\t\t"sprite": "hongcheolarmor",\n\t\t"buy": 27500\n\t},\n\t{\n\t\t"name": "Tiger Armor",\n\t\t"type": "armor",\n\t\t"sprite": "tigerarmor",\n\t\t"buy": 28000\n\t},\n\t{\n\t\t"name": "Wizard Rob",\n\t\t"type": "armor",\n\t\t"sprite": "wizardrobe",\n\t\t"buy": 28500\n\n\t},\n\t{\n\t\t"name": "Iron Knight Armor",\n\t\t"type": "armor",\n\t\t"sprite": "ironknightarmor",\n\t\t"buy": 29000\n\t},\n\t{\n\t\t"name": "Evil Armor",\n\t\t"type": "armor",\n\t\t"sprite": "evilarmor",\n\t\t"buy": 29500\n\n\t},\n\t{\n\t\t"name": "Green Dambo Armor",\n\t\t"type": "armor",\n\t\t"sprite": "greendamboarmor",\n\t\t"buy": 30000\n\t},\n\t{\n\t\t"name": "Red Dambo Armor",\n\t\t"type": "armor",\n\t\t"sprite": "reddamboarmor",\n\t\t"buy": 30500\n\t},\n\t{\n\t\t"name": "Devil Kazya Armor",\n\t\t"type": "armor",\n\t\t"sprite": "devilkazyaarmor",\n\t\t"buy": 31000\n\t},\n\t{\n\t\t"name": "Bridal Mask",\n\t\t"type": "armor",\n\t\t"sprite": "bridalmask",\n\t\t"buy": 31500\n\t},\n\t{\n\t\t"name": "Black Spider Armor",\n\t\t"type": "armor",\n\t\t"sprite": "blackspiderarmor",\n\t\t"buy": 32000\n\t},\n\t{\n\t\t"name": "Frog Armor",\n\t\t"type": "armor",\n\t\t"sprite": "frogarmor",\n\t\t"buy": 32500\n\t},\n\t{\n\t\t"name": "Bearseonbi Armor",\n\t\t"type": "armor",\n\t\t"sprite": "bearseonbiarmor",\n\t\t"buy": 33000\n\t},\n\t{\n\t\t"name": "Raindow A Pro",\n\t\t"type": "armor",\n\t\t"sprite": "rainbowapro",\n\t\t"buy": 33500\n\t},\n\t{\n\t\t"name": "Coke Armor",\n\t\t"type": "armor",\n\t\t"sprite": "cokearmor",\n\t\t"buy": 34000\n\n\t},\n\t{\n\t\t"name": "Fried Potato Armor",\n\t\t"type": "armor",\n\t\t"sprite": "friedpotatoarmor",\n\t\t"buy": 34500\n\t},\n\t{\n\t\t"name": "Burger Armor",\n\t\t"type": "armor",\n\t\t"sprite": "burgerarmor",\n\t\t"buy": 35000\n\t},\n\t{\n\t\t"name": "Halloween JK Armor",\n\t\t"type": "armor",\n\t\t"sprite": "halloweenjkarmor",\n\t\t"buy": 35500\n\t},\n\t{\n\t\t"name": "Frankenstein Armor",\n\t\t"type": "armor",\n\t\t"sprite": "frankensteinarmor",\n\t\t"buy": 36000\n\t},\n\t{\n\t\t"name": "Admin armor",\n\t\t"type": "armor",\n\t\t"sprite": "adminarmor",\n\t\t"buy": 36500\n\t},\n\n\t{\n\t\t"name": "Cloth Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "clotharmor",\n\t\t"buy": 0\n\t},\n\t{\n\t\t"name": "Leather Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "leatherarcherarmor",\n\t\t"buy": 500\n\t},\n\t{\n\t\t"name": "Mail Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "mailarcherarmor",\n\t\t"buy": 1000\n\t},\n\t{\n\t\t"name": "Plate Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "platearcherarmor",\n\t\t"buy": 1500\n\t},\n\t{\n\t\t"name": "Red Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "redarcherarmor",\n\t\t"buy": 2000\n\t},\n\t{\n\t\t"name": "Golden Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "goldenarcherarmor",\n\t\t"buy": 2500\n\t},\n\t{\n\t\t"name": "Green Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "greenarcherarmor",\n\t\t"buy": 3000\n\t},\n\t{\n\t\t"name": "Green Wing Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "greenwingarcherarmor",\n\t\t"buy": 3500\n\t},\n\t{\n\t\t"name": "Guard Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "guardarcherarmor",\n\t\t"buy": 4000\n\t},\n\t{\n\t\t"name": "Red Guard Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "redguardarcherarmor",\n\t\t"buy": 4500\n\t},\n\t{\n\t\t"name": "White Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "whitearcherarmor",\n\t\t"buy": 5000\n\t},\n\t{\n\t\t"name": "Pirate Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "piratearcherarmor",\n\t\t"buy": 5500\n\t},\n\t{\n\t\t"name": "Cheoli Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "cheoliarcherarmor",\n\t\t"buy": 6000\n\t},\n\t{\n\t\t"name": "Dovakin Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "dovakinarcherarmor",\n\t\t"buy": 6500\n\t},\n\t{\n\t\t"name": "GB Wing Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "gbwingarcherarmor",\n\t\t"buy": 7000\n\t},\n\t{\n\t\t"name": "Red Wing Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "redwingarcherarmor",\n\t\t"buy": 7500\n\t},\n\t{\n\t\t"name": "Snow Fox Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "snowfoxarcherarmor",\n\t\t"buy": 8000\n\t},\n\t{\n\t\t"name": "Wolf Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "wolfarcherarmor",\n\t\t"buy": 8500\n\t},\n\t{\n\t\t"name": "Blue Wing Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "bluewingarcherarmor",\n\t\t"buy": 9000\n\t},\n\t{\n\t\t"name": "Fallen Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "fallenarcherarmor",\n\t\t"buy": 9500\n\t},\n\t{\n\t\t"name": "Crystal Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "crystalarcherarmor",\n\t\t"buy": 10000\n\t},\n\t{\n\t\t"name": "Legolas Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "legolasarmor",\n\t\t"buy": 10500\n\t},\n\t{\n\t\t"name": "Adherer Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "adhererarcherarmor",\n\t\t"buy": 11000\n\t},\n\t{\n\t\t"name": "School Uniform",\n\t\t"type": "armorarcher",\n\t\t"sprite": "archerschooluniform",\n\t\t"buy": 11500\n\t},\n\t{\n\t\t"name": "Combat Uniform",\n\t\t"type": "armorarcher",\n\t\t"sprite": "combatuniform",\n\t\t"buy": 12000\n\t},\n\t{\n\t\t"name": "Strap Armor",\n\t\t"type": "armorarcher",\n\t\t"sprite": "gayarcherarmor",\n\t\t"buy": 12500\n\t}\n]\n';});


define('data/appearancedata',['text!../../shared/data/appearance.json'], function(AppearancesJson) {
	var Appearances = [];
	var appearanceParse = JSON.parse(AppearancesJson);
	/*Appearances[0] = {
	  name: "blank",
	  type: "",
	  sprite: "",
	  buy: 0
	};*/

	$.each( appearanceParse, function( key, val ) {
		Appearances[key] = {
			name: val.name,
			type: val.type,
			sprite: val.sprite,
			buy: val.buy
		};
	});
    return Appearances;
});

/* global Types */

// TODO - Make Death Sprite seperate instead of changing Armor Sprite.
var STATE_IDLE = 0,
    STATE_MOVING = 1,
    STATE_ATTACKING = 2;

define('entity/player',['./entity', './character', '../exceptions', 'data/appearancedata'], function(Entity, Character, Exceptions, AppearanceData) {
  var Player = Character.extend({
    init: function(id, type, map, kind, name) {

      this._super(id, type, map, kind);
      var self = this;

      //this.game = game;
      this.name = name;

      // Renderer
      this.nameOffsetY = -10;
      this.rights = 0;

      // sprites
      this.spriteName = "clotharmor";
      this.armorName = "clotharmor";
      this.weaponName = "sword1";

      //this.pClass = 0;

      this.moveSpeed = 500;
      this.setMoveRate(this.moveSpeed);

      //this.timesAttack = 0;
      this.setAttackRate(64);

      //this.stopMove = false;

      this.exp = {};
      this.level = {};
      this.sprites = new Array(2);

      this.stats = {};

      this.orientation = Types.Orientations.DOWN;
      this.keyMove = false;
      this.joystickTime = 0;

      this.fsm = "IDLE";

    },

    setItems: function () {
      this.equipment = {};
      this.inventory = {};
      this.equipment.rooms = game.equipmentHandler.equipment;
      this.inventory.rooms = game.inventoryHandler.inventory;
    },

    isMovingAll: function () {
      return !this.freeze && (this.isMoving() || this.orientation !== Types.Orientations.NONE);
      //return true;
    },

    /*getGuild: function() {
      return this.guild;
    },

    setGuild: function(guild) {
      this.guild = guild;
      $('#guild-population').addClass("visible");
      $('#guild-name').html(guild.name);
    },

    unsetGuild: function() {
      delete this.guild;
      $('#guild-population').removeClass("visible");
    },

    hasGuild: function() {
      return (typeof this.guild !== 'undefined');
    },


    addInvite: function(inviteGuildId) {
      this.invite = {
        time: new Date().valueOf(),
        guildId: inviteGuildId
      };
    },

    deleteInvite: function() {
      delete this.invite;
    },

    checkInvite: function() {
      if (this.invite && ((new Date().valueOf() - this.invite.time) < 595000)) {
        return this.invite.guildId;
      } else {
        if (this.invite) {
          this.deleteInvite();
          return -1;
        } else {
          return false;
        }
      }
    },*/

    setSkill: function(index, exp) {
      this.skillHandler.add(index, exp);
    },

    setSkills: function(skillExps) {
      this.skillHandler.addAll(skillExps);
    },

    setConsumable: function(itemKind) {
    },

    isMovingToLoot: function() {
      return this.isLootMoving;
    },

    getSpriteName: function() {
      return this.getArmorSprite().name;
    },

    getArmorSprite: function() {
      var spriteName = this.spriteName;
      if (game.sprites.hasOwnProperty(spriteName))
        return game.sprites[spriteName];
      return null;
    },

    getWeaponSprite: function() {
      var spriteName = this.weaponName;
      if (game.sprites.hasOwnProperty(spriteName))
        return game.sprites[spriteName];
      return null;
    },

    isArcher: function () {
      if (!this.equipment)
        return false;

      var weapon = this.equipment.rooms[4];
      if (weapon && ItemTypes.isArcherWeapon(weapon.itemKind)) {
        return true;
      }
      return false;
    },

    /*setArmorSpriteId: function (id) {
      var sprite = game.sprites[AppearanceData[id].sprite];
      if (sprite) {
        this.spriteName = sprite.name;
        this.setSprite(sprite);
      }
    },

    setWeaponSpriteId: function (id) {
      var sprite = game.sprites[AppearanceData[id].sprite];
      if (sprite) {
        this.weaponName = sprite.name;
        if (!this.pjsWeaponSprite)
          this.pjsWeaponSprite = game.renderer.createSprite(sprite);
        else
        {
          this.pjsWeaponSprite = game.renderer.changeSprite(sprite, this.pjsWeaponSprite);
        }
      }
    },*/

    setArmorSprite: function(sprite) {
      this._setArmorSprite(sprite);
    },

    setWeaponSprite: function(sprite) {
      this._setWeaponSprite(sprite);
    },

    _setArmorSprite: function(sprite) {
      if (!sprite)
      {
        var id = this.sprites[0];
        /*if (this.isArcher()) {
          id = this.sprites[2];
        }*/
        sprite = game.sprites[AppearanceData[id].sprite];
      }
      if (sprite) {
        this.armorSprite = sprite;
        this.spriteName = sprite.name;
        this.setSprite(sprite);
      }
    },

    _setWeaponSprite: function(sprite) {
      if (!sprite)
      {
        var id = this.sprites[1];
        /*if (this.isArcher()) {
          id = this.sprites[3];
        }*/
        sprite = game.sprites[AppearanceData[id].sprite];
      }

      if (sprite) {
        this.weaponName = sprite.name;
        this.weaponSprite = sprite;
        if (!this.pjsWeaponSprite)
          this.pjsWeaponSprite = game.renderer.createSprite(sprite);
        else
        {
          this.pjsWeaponSprite = game.renderer.changeSprite(sprite, this.pjsWeaponSprite);
        }
      }
    },

    hasWeapon: function() {
      return this.weaponName !== null;
    },

    flagPVP: function(pvpFlag) {
      this.pvpFlag = pvpFlag;
    },

    // Override walk, idle, and updateMovement for mounts.
    /*walk: function(orientation) {
      this.setOrientation(orientation);
      this.animate("walk", this.walkSpeed);
    },

    idle: function(orientation) {
      orientation = orientation || 0;
      this.setOrientation(orientation);
      this.animate("idle", this.idleSpeed);
    },*/

    setRange: function() {
      //this.pClass = pClass;
      //ts = game.tilesize;
      this.setAttackRange(1);
      if (this.isArcher()) {
        this.setAttackRange(10);
      }
    },

    setPvpSide: function(side) {
      this.pvpSide = side;
    },

    canKeyMove: function () {
        var x=this.x, y=this.y;
        switch (this.orientation)
        {
          case Types.Orientations.UP:
            y--;
            break;
          case Types.Orientations.DOWN:
            y++;
            break;
          case Types.Orientations.LEFT:
            x--;
            break;
          case Types.Orientations.RIGHT:
            x++;
            break;
        }
        var ov = game.isOverlapping(this, x, y);
        if (ov)
          log.info("isOverlapping.")
        var ic = game.mapContainer.isColliding(x,y);
        if (ic)
          log.info("isColliding.")
        return !(ov || ic);
    },

    move: function (time, orientation, state, x, y) {
      var self = this;

      this.orientation = orientation;
      if (state == 1 && orientation != Types.Orientations.NONE)
      {
        var lockStepTime = (G_LATENCY - (getWorldTime()-time));
        lockStepTime = lockStepTime.clamp(G_UPDATE_INTERVAL,G_LATENCY);
        console.warn("lockStepTime="+lockStepTime);

        lockStepTime += G_LATENCY;
        clearTimeout(this.moving_callback)
        this.moving_callback = setTimeout(function () {
          self.forceStop();
          self.setPosition(x,y);
          self.ex = -1;
          self.ey = -1;
          self.moving_callback = null;
          self.walk(orientation);
          self.freeze = false;
          self.keyMove = true;
        }, lockStepTime);
      }
      else if (state == 0 || orientation == Types.Orientations.NONE)
      {
        this.ex = x;
        this.ey = y;
        if (!this.movement.inProgress || this.moving_callback) {
          this.forceStop();
          this.setPosition(x,y);
          clearTimeout(this.moving_callback);
          this.moving_callback = null;
        }
      }
      else if (state == 2 && orientation != Types.Orientations.NONE)
      {
        this.forceStop();
        this.setPosition(x,y);
        this.ex = -1;
        this.ey = -1;
        clearTimeout(this.moving_callback);
        this.moving_callback = null;
      }
    },

    /*forceStop: function () {
      this.keyMove = false;
      this._super();

    },*/


    /*moveTo_: function(x, y, callback) {
      var ts = G_TILESIZE;
      var self = this;
      var parent = self._super;

      if (!game.player) {
        return this._super(x, y, callback);
      }

      if (this.freeze || this.movement.inProgress || this.isMoving() || this.isMovingPath()) {
        //this.forceStop();
        return;
      }

      this.freeze = true;
      this._super(x, y, callback);
      if (!this.path)
        return;

      var orientation = this.orientation;

      log.info("background - free delay =" + G_LATENCY);
      this.fsm = "MOVE";
      //var orientation = this.orientation;
      clearTimeout(self.moveTimeout);
      self.moveTimeout = setTimeout(function() {
        if (self.movement.inProgress) {
          self.movement.stop();
          return;
        }
        //self.forceStop();
        self.orientation = orientation;
        //self.setOrientation(orientation);
        self.freeze = false;
        clearTimeout(self.moveTimeout);
        self.moveTimeout = null;

      }, G_LATENCY);

    },*/


    baseHit: function() {
      return 0;
    },

    baseHitDef: function() {
      return 0;
    },

    baseCrit: function() {
      var itemDiff = this.level.base*2;
      var item = this.equipment.rooms[4];
      if (item) {
        itemDiff = (3*ItemTypes.getData(item.itemKind).modifier)+(item.itemNumber*2);
      }
      var statDiff = this.stats.attack + (this.stats.luck*2);
      var chance = Utils.clamp(0, 500, ~~(statDiff + itemDiff));
      log.info("player - baseCrit: "+chance);
      var chance_out = (chance / 5).toFixed(0)+"%";
      return chance_out;
      //return chance;
    },

    baseCritDef: function() {
      var itemDiff = this.level.base*2;
      for (var id in this.equipment.rooms) {
        if (id == 4) continue;
        var item = this.equipment.rooms[id];
        if (item) {
          itemDiff += (3*ItemTypes.getData(item.itemKind).modifier)+(item.itemNumber*2);
        }
      }
      var statDiff = this.stats.defense + (this.stats.luck*2);
      var chance = Utils.clamp(0, 500, ~~(statDiff + itemDiff));
      log.info("player - baseCritDef: "+chance);
      var chance_out = (chance / 5).toFixed(0)+"%";
      return chance_out;
      //return chance;
    },

    getWeapon: function () {
      var weapon = this.equipment.rooms[4];
      return weapon;
    },

    getWeaponLevel: function () {
      var weapon = this.getWeapon();
      if (!weapon)
        return 0;
      var weaponData = ItemTypes.KindData[weapon.itemKind];
      return Types.getWeaponLevel(this.exp[weaponData.type]);
    },

    hasHarvestWeapon: function (type) {
      if (type && type == "any")
          return true;

      var weapon = this.getWeapon();
      if (!weapon)
        return false;

      var weaponData = ItemTypes.KindData[weapon.itemKind];
      if (type) {
        return weaponData.type == type;
      }
      return ItemTypes.isHarvestWeapon(weapon.itemKind);
    },

    getWeaponType : function () {
      //return "axe"; // todo remove.

      var weapon = this.getWeapon();
      if (!weapon)
        return null;
      var weaponData = ItemTypes.KindData[weapon.itemKind];
      return weaponData.type;
    },

    baseDamage: function() {
      var dealt, dmg;
      var weapon = this.equipment.rooms[4];
      var level = this.level.base;

      dealt = ~~(weapon ? (ItemTypes.getData(weapon.itemKind).modifier * 3 + weapon.itemNumber * 2) : level);

      var power = ((this.level.attack / 50) + 1);

      power *= ((this.getWeaponLevel() / 50) + 1);

      // Weapon Durability affects Damage.
      if (weapon) {
        dealt = ~~(dealt * ((weapon.itemDurability / weapon.itemDurabilityMax * 0.5) + 0.5));
      }

      // Players Stat affects Damage.
      var mods = (this.mod ? this.mod.attack : 0);
      dealt += ((this.stats.attack+mods)*3) + this.stats.luck;

      var min = ~~(level*power);
      var max = ~~(min*3);

      dmg = Utils.randomRangeInt(min, max) + dealt;

      var noobLvl = 10;
      var noobMulti = 1.15 + Math.max(0,(noobLvl-this.level.base) * (0.5/noobLvl));

      dmg = ~~(dmg * noobMulti);

      min = ~~((min + dealt)*noobMulti);
      max = ~~((max + dealt)*noobMulti);

      return [min,max];
      //return dmg;
    },

    baseDamageDef: function() {
      var dealt = 0, dmg = 0;

      var level = this.level.base+3;
      log.info("baseDamageDef:");

      dealt = level;
      for (var id in this.equipment.rooms)
      {
        var item = this.equipment.rooms[id];
        if (item) {
          var eq_multi = (id == 1) ? 4 : 2;
          var def = (ItemTypes.getData(item.itemKind).modifier * eq_multi + item.itemNumber * eq_multi);
          dealt += ~~(def * ((item.itemDurability / item.itemDurabilityMax * 0.5) + 0.5));
        }
      }

      log.info("dealt="+dealt);
      var power = ((this.level.defense / 50) + 1);
      log.info("power="+power);
      var min = ~~(level*power);
      var max = ~~(min*2);

      log.info("dealtrange="+dealt);
      // Players Stat affects Damage.
      var mods = (this.mod ? this.mod.defense : 0);
      dealt += ~~((this.stats.defense+mods)*3) + this.stats.luck;

      log.info("dealtstats="+dealt);

      dmg = Utils.randomRangeInt(min, max) + dealt;

      min += dealt;
      max += dealt;

      return [min,max];
      //return dmg;
    },

    onKeyMove: function (callback) {
      this.key_move_callback = callback;
    },

    hit: function(orientation) {
        this.fsm = "ATTACK";
        this.forceStop();
        this._super(orientation);
    },

    revive: function () {
      this.isDead = false;
      this.isDying = false;
      this.freeze = false;
      this.stats.hp = this.stats.hpMax;
      this.stats.ep = this.stats.epMax;

      this.setArmorSprite();
      this.forceStop();
      this.disengage();
    },

    respawn: function () {
      this.setArmorSprite();
      this.orientation = Types.Orientations.DOWN;
      this.idle(this.orientation);
      this.fsm = "IDLE";
    },

    setPosition: function (x, y) {
      this._super(x,y);

      if (this.holdingBlock)
      {
        var ts=G_TILESIZE;
        var posArray = [
          [x,y],
          [x,y-ts],
          [x,y+ts],
          [x-ts,y],
          [x+ts,y]
        ];
        var pos = posArray[this.orientation];
        this.holdingBlock.setPosition(pos[0], pos[1]);
      }
    },

    followPath: function(path) {
      this._followPath(path);
    },

    _followPath: function(path) {
        if(path.length > 1) { // Length of 1 means the player has clicked on himself
            this.path = path;
            this.step = 1;

            if(this.start_pathing_callback) {
                this.start_pathing_callback(path);
                this.updateMovement();
            }
            if(this.before_move_callback) {
                this.before_move_callback();
            }
        }
    },

    /*setPositionGrid: function() {
        var gx = (this.x >> 4);
        var gy = (this.y >> 4);
        //this.gx = gx;
        //this.gy = gy;
        var o = this.orientation;
    },*/

    /*isMoving: function() {
        return this._super() && this.keyMove;
    },*/

    harvestOn: function(type) {
      var self = this;
      var tmptype = type;
      var harvest = function () {
        self.setOrientation(self.orientation);
        self.fsm = "HARVEST";
        self.animate("atk", self.atkSpeed, 1, function () {
          self.idle(self.orientation);
        });
        if (tmptype == "any")
          self.hideWeapon = true;
      };
      harvest();
      clearInterval(this.harvestTimeout);
      this.harvestTimeout = setInterval(function () {
        if (!self.harvestTimeout) {
          self.harvestOff();
          return;
        }
        if (self.target && !(self.target.type == Types.EntityTypes.NODE)) {
          self.harvestOff();
          return;
        }
        harvest();
      },1000);
      this.startHarvestTime = Date.now();
    },

    harvestOff: function () {
      if (this.fsm == "HARVEST") {
        clearInterval(this.harvestTimeout);
        this.harvestTimeout = null;
        //this.fsm = "IDLE";
        this.forceStop();
        //this.fsm = "IDLE";
        //this.idle();
        this.startHarvestTime = 0;
        this.hideWeapon = false;
      }
    },

    forceStop: function () {
      //this.keyMove = false;
      this._super();
      if (this.key_move_callback)
      {
        this.key_move_callback(false);
      }
    },

  });

  return Player;
});


define('text!data/../../shared/data/quests.json', function () { return '{\n"1": {\n\t"npcKind": 0,\n\t"name": "Intro 1",\n\t"type": 1,\n\t"level": 0,\n\t"object": {"type": 2, "kind": 1, "count": 10}\n},\n"2": {\n\t"npcKind": 1,\n\t"name": "Intro 2",\n\t"type": 2,\n\t"level": 0,\n\t"object": {"type": 2, "kind": 1, "level": [0,5]},\n\t"object2": {"type": 4, "kind": 1, "count": 3, "chance": 20}\n},\n"3": {\n\t"npcKind": 2,\n\t"name": "Intro 3",\n\t"type": 2,\n\t"level": 0,\n\t"object": {"type": 2, "kind": 1, "level": [0,5]},\n\t"object2": {"type": 4, "kind": 41, "count": 5, "chance": 20}\n},\n"4": {\n\t"npcKind": 3,\n\t"name": "Intro 4",\n\t"type": 2,\n\t"level": 0,\n\t"object": {"type": 2, "kind": 2, "level": [3,5]},\n\t"object2": {"type": 4, "kind": 43, "count": 1, "chance": 5}\n},\n"5": {\n\t"npcKind": 4,\n\t"name": "Intro 5",\n\t"type": 1,\n\t"level": 0,\n\t"object": {"type": 2, "kind": 2, "count": 10}\n},\n"6": {\n\t"npcKind": 5,\n\t"name": "Intro 6",\n\t"type": 5,\n\t"level": 0,\n\t"data1": 1,\n\t"object": {"type": 10, "kind": 3, "count": 5}\n},\n"7": {\n\t"npcKind": 6,\n\t"name": "Intro 7",\n\t"type": 5,\n\t"level": 0,\n\t"data1": 2,\n\t"object": {"type": 10, "kind": 3, "count": 5}\n}\n\n}\n';});

/* global Types */
define('data/questdata',['text!../../shared/data/quests.json'], function(QuestsJson) {
	var padding = function (val, size) {
	    var s = val+"";
	    while (s.length < size) s = "0" + s;
	    return s;
	}

	var QuestData = {};
	var data = JSON.parse(QuestsJson);

  var i = 0;
  _.each(data, function( quest, key ) {
    var id = padding(quest.type,2) + padding(quest.npcId,4) + padding(i,3);
  	QuestData[id] = quest;
  	QuestData[id].id = id;
    QuestData[id].objectId = quest.objectId || 0;
    QuestData[id].objectCount = quest.objectCount || 0;
    i++;
  });

  return QuestData;
});


define('text!data/../../shared/data/itemloot.json', function () { return '[\r\n{\r\n  "name": "Scrolls",\r\n  "sprite": "itemloot.png",\r\n  "offset": [0,0], "staticsheet":3,\r\n  "rarity": "1"\r\n},\r\n{\r\n  "name": "Dice",\r\n  "sprite": "itemloot.png",\r\n  "offset": [0,1], "staticsheet":3,\r\n  "rarity": "1"\r\n},\r\n{\r\n  "name": "Book",\r\n  "sprite": "itemloot.png",\r\n  "offset": [0,2], "staticsheet":3,\r\n  "rarity": "1"\r\n},\r\n{\r\n  "name": "Key",\r\n  "sprite": "itemloot.png",\r\n  "offset": [0,3], "staticsheet":3,\r\n  "rarity": "1"\r\n},\r\n{\r\n  "name": "Bell",\r\n  "sprite": "itemloot.png",\r\n  "offset": [0,4], "staticsheet":3,\r\n  "rarity": "1"\r\n},\r\n{\r\n  "name": "Padlock",\r\n  "sprite": "itemloot.png",\r\n  "offset": [0,5], "staticsheet":3,\r\n  "rarity": "1"\r\n},\r\n{\r\n  "name": "Candle",\r\n  "sprite": "itemloot.png",\r\n  "offset": [0,6], "staticsheet":3,\r\n  "rarity": "1"\r\n},\r\n{\r\n  "name": "Drumstick",\r\n  "sprite": "itemloot.png",\r\n  "offset": [0,7], "staticsheet":3,\r\n  "rarity": "1"\r\n},\r\n{\r\n  "name": "IronHelmet",\r\n  "sprite": "itemloot.png",\r\n  "offset": [0,8], "staticsheet":3,\r\n  "rarity": "1"\r\n},\r\n{\r\n  "name": "Gumnut",\r\n  "sprite": "itemloot.png",\r\n  "offset": [0,9], "staticsheet":3,\r\n  "rarity": "1"\r\n},\r\n{\r\n  "name": "Fireball",\r\n  "sprite": "itemloot.png",\r\n  "offset": [1,0], "staticsheet":3,\r\n  "rarity": "2"\r\n},\r\n{\r\n  "name": "WitchHat",\r\n  "sprite": "itemloot.png",\r\n  "offset": [1,1], "staticsheet":3,\r\n  "rarity": "2"\r\n},\r\n{\r\n  "name": "Chest",\r\n  "sprite": "itemloot.png",\r\n  "offset": [1,2], "staticsheet":3,\r\n  "rarity": "2"\r\n},\r\n{\r\n  "name": "Shield",\r\n  "sprite": "itemloot.png",\r\n  "offset": [1,3], "staticsheet":3,\r\n  "rarity": "2"\r\n},\r\n{\r\n  "name": "Log",\r\n  "sprite": "itemloot.png",\r\n  "offset": [1,4], "staticsheet":3,\r\n  "rarity": "2"\r\n},\r\n{\r\n  "name": "RingOne",\r\n  "sprite": "itemloot.png",\r\n  "offset": [1,5], "staticsheet":3,\r\n  "rarity": "2"\r\n},\r\n{\r\n  "name": "DreamCatcher",\r\n  "sprite": "itemloot.png",\r\n  "offset": [1,6], "staticsheet":3,\r\n  "rarity": "2"\r\n},\r\n{\r\n  "name": "SealedScroll",\r\n  "sprite": "itemloot.png",\r\n  "offset": [1,7], "staticsheet":3,\r\n  "rarity": "2"\r\n},\r\n{\r\n  "name": "Spider",\r\n  "sprite": "itemloot.png",\r\n  "offset": [1,8], "staticsheet":3,\r\n  "rarity": "2"\r\n},\r\n{\r\n  "name": "MeltedCandles",\r\n  "sprite": "itemloot.png",\r\n  "offset": [1,9], "staticsheet":3,\r\n  "rarity": "2"\r\n},\r\n{\r\n  "name": "Feather",\r\n  "sprite": "itemloot.png",\r\n  "offset": [2,0], "staticsheet":3,\r\n  "rarity": "3"\r\n},\r\n{\r\n  "name": "Compass",\r\n  "sprite": "itemloot.png",\r\n  "offset": [2,1], "staticsheet":3,\r\n  "rarity": "3"\r\n},\r\n{\r\n  "name": "PinkFireball",\r\n  "sprite": "itemloot.png",\r\n  "offset": [2,2], "staticsheet":3,\r\n  "rarity": "3"\r\n},\r\n{\r\n  "name": "Gem",\r\n  "sprite": "itemloot.png",\r\n  "offset": [2,3], "staticsheet":3,\r\n  "rarity": "3"\r\n},\r\n{\r\n  "name": "FireEye",\r\n  "sprite": "itemloot.png",\r\n  "offset": [2,4], "staticsheet":3,\r\n  "rarity": "3"\r\n},\r\n{\r\n  "name": "TotemFace",\r\n  "sprite": "itemloot.png",\r\n  "offset": [2,5], "staticsheet":3,\r\n  "rarity": "3"\r\n},\r\n{\r\n  "name": "Gadget",\r\n  "sprite": "itemloot.png",\r\n  "offset": [2,6], "staticsheet":3,\r\n  "rarity": "3"\r\n},\r\n{\r\n  "name": "Frog",\r\n  "sprite": "itemloot.png",\r\n  "offset": [2,7], "staticsheet":3,\r\n  "rarity": "3"\r\n},\r\n{\r\n  "name": "ThrowingDagger",\r\n  "sprite": "itemloot.png",\r\n  "offset": [2,8], "staticsheet":3,\r\n  "rarity": "3"\r\n},\r\n{\r\n  "name": "UrnOne",\r\n  "sprite": "itemloot.png",\r\n  "offset": [2,9], "staticsheet":3,\r\n  "rarity": "3"\r\n},\r\n{\r\n  "name":  "NecklaceOne",\r\n  "sprite": "itemloot.png",\r\n  "offset": [3,0], "staticsheet":3,\r\n  "rarity": "4"\r\n},\r\n{\r\n  "name":  "Squid",\r\n  "sprite": "itemloot.png",\r\n  "offset": [3,1], "staticsheet":3,\r\n  "rarity": "4"\r\n},\r\n{\r\n  "name":  "ClubOne",\r\n  "sprite": "itemloot.png",\r\n  "offset": [3,2], "staticsheet":3,\r\n  "rarity": "4"\r\n},\r\n{\r\n  "name":  "Crystals",\r\n  "sprite": "itemloot.png",\r\n  "offset": [3,3], "staticsheet":3,\r\n  "rarity": "4"\r\n},\r\n{\r\n  "name":  "Mace",\r\n  "sprite": "itemloot.png",\r\n  "offset": [3,4], "staticsheet":3,\r\n  "rarity": "4"\r\n},\r\n{\r\n  "name":  "CoinPouch",\r\n  "sprite": "itemloot.png",\r\n  "offset": [3,5], "staticsheet":3,\r\n  "rarity": "4"\r\n},\r\n{\r\n  "name": "NecklaceTwo",\r\n  "sprite": "itemloot.png",\r\n  "offset": [3,6], "staticsheet":3,\r\n  "rarity": "4"\r\n},\r\n{\r\n  "name": "Bones",\r\n  "sprite": "itemloot.png",\r\n  "offset": [3,7], "staticsheet":3,\r\n  "rarity": "4"\r\n},\r\n{\r\n  "name": "RingTwo",\r\n  "sprite": "itemloot.png",\r\n  "offset": [3,8], "staticsheet":3,\r\n  "rarity": "4"\r\n},\r\n{\r\n  "name": "AnimalSkull",\r\n  "sprite": "itemloot.png",\r\n  "offset": [3,9], "staticsheet":3,\r\n  "rarity": "4"\r\n},\r\n{\r\n  "name": "Leaf",\r\n  "sprite": "itemloot.png",\r\n  "offset": [4,0], "staticsheet":3,\r\n  "rarity": "5"\r\n},\r\n{\r\n  "name": "Cheese",\r\n  "sprite": "itemloot.png",\r\n  "offset": [4,1], "staticsheet":3,\r\n  "rarity": "5"\r\n},\r\n{\r\n  "name":  "Mushrooms",\r\n  "sprite": "itemloot.png",\r\n  "offset": [4,2], "staticsheet":3,\r\n  "rarity": "5"\r\n},\r\n{\r\n  "name":  "FeatherQuill",\r\n  "sprite": "itemloot.png",\r\n  "offset": [4,3], "staticsheet":3,\r\n  "rarity": "5"\r\n},\r\n{\r\n  "name":  "BoneEaring",\r\n  "sprite": "itemloot.png",\r\n  "offset": [4,4], "staticsheet":3,\r\n  "rarity": "5"\r\n},\r\n{\r\n  "name": "Crate",\r\n  "sprite": "itemloot.png",\r\n  "offset": [4,5], "staticsheet":3,\r\n  "rarity": "5"\r\n},\r\n{\r\n  "name":  "Bat",\r\n  "sprite": "itemloot.png",\r\n  "offset": [4,6], "staticsheet":3,\r\n  "rarity": "5"\r\n},\r\n{\r\n  "name":  "PoisonVial",\r\n  "sprite": "itemloot.png",\r\n  "offset": [4,7], "staticsheet":3,\r\n  "rarity": "5"\r\n},\r\n{\r\n  "name":  "ScrollsThree",\r\n  "sprite": "itemloot.png",\r\n  "offset": [4,8], "staticsheet":3,\r\n  "rarity": "5"\r\n},\r\n{\r\n  "name":  "Bug",\r\n  "sprite": "itemloot.png",\r\n  "offset": [4,9], "staticsheet":3,\r\n  "rarity": "5"\r\n},\r\n{\r\n  "name":  "Anvil",\r\n  "sprite": "itemloot.png",\r\n  "offset": [5,0], "staticsheet":3,\r\n  "rarity": "6"\r\n},\r\n{\r\n  "name":  "BrokenGlass",\r\n  "sprite": "itemloot.png",\r\n  "offset": [5,1], "staticsheet":3,\r\n  "rarity": "6"\r\n},\r\n{\r\n  "name":  "Goblet",\r\n  "sprite": "itemloot.png",\r\n  "offset": [5,2], "staticsheet":3,\r\n  "rarity": "6"\r\n},\r\n{\r\n  "name":  "SkullRingTwo",\r\n  "sprite": "itemloot.png",\r\n  "offset": [5,3], "staticsheet":3,\r\n  "rarity": "6"\r\n},\r\n{\r\n  "name":  "MonsterClaw",\r\n  "sprite": "itemloot.png",\r\n  "offset": [5,4], "staticsheet":3,\r\n  "rarity": "6"\r\n},\r\n{\r\n  "name":  "PoisonVialTwo",\r\n  "sprite": "itemloot.png",\r\n  "offset": [5,5], "staticsheet":3,\r\n  "rarity": "6"\r\n},\r\n{\r\n  "name": "BronzeHelmet",\r\n  "sprite": "itemloot.png",\r\n  "offset": [5,6], "staticsheet":3,\r\n  "rarity": "6"\r\n},\r\n{\r\n  "name":  "BasicKnife",\r\n  "sprite": "itemloot.png",\r\n  "offset": [5,7], "staticsheet":3,\r\n  "rarity": "6"\r\n},\r\n{\r\n  "name":  "Worms",\r\n  "sprite": "itemloot.png",\r\n  "offset": [5,8], "staticsheet":3,\r\n  "rarity": "6"\r\n},\r\n{\r\n  "name":  "AutumnLeaf",\r\n  "sprite": "itemloot.png",\r\n  "offset": [5,9], "staticsheet":3,\r\n  "rarity": "6"\r\n},\r\n{\r\n  "name":  "Drum",\r\n  "sprite": "itemloot.png",\r\n  "offset": [6,0], "staticsheet":3,\r\n  "rarity": "7"\r\n},\r\n{\r\n  "name":  "Acorns",\r\n  "sprite": "itemloot.png",\r\n  "offset": [6,1], "staticsheet":3,\r\n  "rarity": "7"\r\n},\r\n{\r\n  "name":  "Pendant",\r\n  "sprite": "itemloot.png",\r\n  "offset": [6,2], "staticsheet":3,\r\n  "rarity": "7"\r\n},\r\n{\r\n  "name":  "Lute",\r\n  "sprite": "itemloot.png",\r\n  "offset": [6,3], "staticsheet":3,\r\n  "rarity": "7"\r\n},\r\n{\r\n  "name":  "RingThree",\r\n  "sprite": "itemloot.png",\r\n  "offset": [6,4], "staticsheet":3,\r\n  "rarity": "7"\r\n},\r\n{\r\n  "name":  "BattleAxe",\r\n  "sprite": "itemloot.png",\r\n  "offset": [6,5], "staticsheet":3,\r\n  "rarity": "7"\r\n},\r\n{\r\n  "name":  "AncientShield",\r\n  "sprite": "itemloot.png",\r\n  "offset": [6,6], "staticsheet":3,\r\n  "rarity": "7"\r\n},\r\n{\r\n  "name":  "Broach",\r\n  "sprite": "itemloot.png",\r\n  "offset": [6,7], "staticsheet":3,\r\n  "rarity": "7"\r\n},\r\n{\r\n  "name":  "Maul",\r\n  "sprite": "itemloot.png",\r\n  "offset": [6,8], "staticsheet":3,\r\n  "rarity": "7"\r\n},\r\n{\r\n  "name":  "SmokePipe",\r\n  "sprite": "itemloot.png",\r\n  "offset": [6,9], "staticsheet":3,\r\n  "rarity": "7"\r\n},\r\n{\r\n  "name":  "Lizard",\r\n  "sprite": "itemloot.png",\r\n  "offset": [7,0], "staticsheet":3,\r\n  "rarity": "8"\r\n},\r\n{\r\n  "name":  "DragonEgg",\r\n  "sprite": "itemloot.png",\r\n  "offset": [7,1], "staticsheet":3,\r\n  "rarity": "8"\r\n},\r\n{\r\n  "name":  "MarbleJar",\r\n  "sprite": "itemloot.png",\r\n  "offset": [7,2], "staticsheet":3,\r\n  "rarity": "8"\r\n},\r\n{\r\n  "name":  "OldBottle",\r\n  "sprite": "itemloot.png",\r\n  "offset": [7,3], "staticsheet":3,\r\n  "rarity": "8"\r\n},\r\n{\r\n  "name":  "ShortSword",\r\n  "sprite": "itemloot.png",\r\n  "offset": [7,4], "staticsheet":3,\r\n  "rarity": "8"\r\n},\r\n{\r\n  "name":  "BookTwo",\r\n  "sprite": "itemloot.png",\r\n  "offset": [7,5], "staticsheet":3,\r\n  "rarity": "8"\r\n},\r\n{\r\n  "name":  "Bread",\r\n  "sprite": "itemloot.png",\r\n  "offset": [7,6], "staticsheet":3,\r\n  "rarity": "8"\r\n},\r\n{\r\n  "name":  "Mirror",\r\n  "sprite": "itemloot.png",\r\n  "offset": [7,7], "staticsheet":3,\r\n  "rarity": "8"\r\n},\r\n{\r\n  "name":  "Cards",\r\n  "sprite": "itemloot.png",\r\n  "offset": [7,8], "staticsheet":3,\r\n  "rarity": "8"\r\n},\r\n{\r\n  "name":  "PotOfGold",\r\n  "sprite": "itemloot.png",\r\n  "offset": [7,9], "staticsheet":3,\r\n  "rarity": "8"\r\n},\r\n{\r\n  "name":  "FaceMask",\r\n  "sprite": "itemloot.png",\r\n  "offset": [8,0], "staticsheet":3,\r\n  "rarity": "9"\r\n},\r\n{\r\n  "name":  "Bomb",\r\n  "sprite": "itemloot.png",\r\n  "offset": [8,1], "staticsheet":3,\r\n  "rarity": "9"\r\n},\r\n{\r\n  "name":  "HandBag",\r\n  "sprite": "itemloot.png",\r\n  "offset": [8,2], "staticsheet":3,\r\n  "rarity": "9"\r\n},\r\n{\r\n  "name":  "ToothNecklace",\r\n  "sprite": "itemloot.png",\r\n  "offset": [8,3], "staticsheet":3,\r\n  "rarity": "9"\r\n},\r\n{\r\n  "name":  "NecklaceThree",\r\n  "sprite": "itemloot.png",\r\n  "offset": [8,4], "staticsheet":3,\r\n  "rarity": "9"\r\n},\r\n{\r\n  "name":  "LeafWreath",\r\n  "sprite": "itemloot.png",\r\n  "offset": [8,5], "staticsheet":3,\r\n  "rarity": "9"\r\n},\r\n{\r\n  "name":  "Eyeball",\r\n  "sprite": "itemloot.png",\r\n  "offset": [8,6], "staticsheet":3,\r\n  "rarity": "9"\r\n},\r\n{\r\n  "name":  "CrudeDagger",\r\n  "sprite": "itemloot.png",\r\n  "offset": [8,7], "staticsheet":3,\r\n  "rarity": "9"\r\n},\r\n{\r\n  "name":  "SapJewel",\r\n  "sprite": "itemloot.png",\r\n  "offset": [8,8], "staticsheet":3,\r\n  "rarity": "9"\r\n},\r\n{\r\n  "name":  "Clever",\r\n  "sprite": "itemloot.png",\r\n  "offset": [8,9], "staticsheet":3,\r\n  "rarity": "9"\r\n},\r\n{\r\n  "name":  "MortAndPestle",\r\n  "sprite": "itemloot.png",\r\n  "offset": [9,0], "staticsheet":3,\r\n  "rarity": "10"\r\n},\r\n{\r\n  "name":  "WoodHorn",\r\n  "sprite": "itemloot.png",\r\n  "offset": [9,1], "staticsheet":3,\r\n  "rarity": "10"\r\n},\r\n{\r\n  "name":  "Pumpkin",\r\n  "sprite": "itemloot.png",\r\n  "offset": [9,2], "staticsheet":3,\r\n  "rarity": "10"\r\n},\r\n{\r\n  "name":  "HumanSkull",\r\n  "sprite": "itemloot.png",\r\n  "offset": [9,3], "staticsheet":3,\r\n  "rarity": "10"\r\n},\r\n{\r\n  "name":  "Thorns",\r\n  "sprite": "itemloot.png",\r\n  "offset": [9,4], "staticsheet":3,\r\n  "rarity": "10"\r\n},\r\n{\r\n  "name":  "FineComb",\r\n  "sprite": "itemloot.png",\r\n  "offset": [9,5], "staticsheet":3,\r\n  "rarity": "10"\r\n},\r\n{\r\n  "name":  "Cauldron",\r\n  "sprite": "itemloot.png",\r\n  "offset": [9,6], "staticsheet":3,\r\n  "rarity": "10"\r\n},\r\n{\r\n  "name":  "MagicBall",\r\n  "sprite": "itemloot.png",\r\n  "offset": [9,7], "staticsheet":3,\r\n  "rarity": "10"\r\n},\r\n{\r\n  "name":  "Mushroom",\r\n  "sprite": "itemloot.png",\r\n  "offset": [9,8], "staticsheet":3,\r\n  "rarity": "10"\r\n},\r\n{\r\n  "name":  "Hook",\r\n  "sprite": "itemloot.png",\r\n  "offset": [9,9], "staticsheet":3,\r\n  "rarity": "10"\r\n},\r\n{\r\n  "name":  "NordicCup",\r\n  "sprite": "itemloot.png",\r\n  "offset": [10,0], "staticsheet":3,\r\n  "rarity": "10"\r\n}\r\n]\r\n';});


define('data/itemlootdata',['text!../../shared/data/itemloot.json'], function(ItemLootJson) {
  	var ItemLoot = [];
  	var lootParse = JSON.parse(ItemLootJson);
  	$.each( lootParse, function( key, val ) {
  		ItemLoot[key] = {
  			name: val.name,
  			rarity: val.rarity,
  			sprite: val.sprite,
        offset: val.offset,
        staticsheet: (val.staticsheet > 0) ? val.staticsheet : 0,
        include: (val.include) ? val.include : null
  		};
  	});
    console.info(JSON.stringify(ItemLoot));
    var i = 0;
    for (var il of ItemLoot)
    {
      if (il)
        console.info(i+": "+JSON.stringify(il));
      i++
    }
    return ItemLoot;
});

/* global Types, Class, _, questSerial */

define('questhandler',['data/npcdata', 'data/questdata', 'data/mobdata', 'data/itemlootdata'],
  function(NpcData, QuestData, MobData, ItemLoot)
{

  //var mobdata = JSON.parse(QuestsJson);

  var QuestHandler = Class.extend({
    init: function(game) {
      this.game = game;
      this.hideDelay = 5000; //How long the notification shows for.
      this.progressHideDelay = 1000;
      //this.quests = this.game.player.quests;
      this.showlog = false;

      //var i=0;
      //_.each(this.game.player.quests, function(quest){
      //quest.found = false;
      //quest.completed = false;
      //quest.id = i++;
      //quest.progCount = 0;
      //});

      var self = this;
      this.closeButton = $('#questCloseButton');
      this.closeButton.click(function(event) {
        self.toggleShowLog();
      });
    },

    show: function() {
      this.quests = this.game.player.quests;
    },

    /*npcHasQuest: function(npcId) {
	    for(var questSerial in this.quests){
		  var quest = this.quests[questSerial];
		  if(quest.npcId === npcId && (!quest.found || !quest.completed))
			return true;
	    }
	    return false;
    },*/

    getNPCQuest: function(questId) {
      return _.find(this.quests, function(q) {
        return q.id === questId;
      });
    },

    /*questAlarmHide: function () {
      $('#questalarm').hide();
    },

    questAlarmShow: function(str, delay) {
      this.quests = this.game.player.quests;
      var imgNames = str.match(/\[img\](.*?)\[\/img\]/g);
      var desc = str.replace(/\[img\](.*?)\[\/img\]/g, "<div class=\"alarmimg\" id=\"alarmimg$1\" style=\"background-image: url('img/1/$1.png')\"></div>");

      $('#questalarm').html(desc);
      $('#questalarm').fadeIn();

      _.each(imgNames, function(name) {
        name = name.replace("[img]", "").replace("[/img]", "");
        var sprite = this.game.spritesets[0][name];
        var x = ((sprite.animationData['idle_down'].length - 1) * sprite.width);
        var y = ((sprite.animationData['idle_down'].row) * sprite.height);

        $('#alarmimg' + name).css("width", sprite.width);
        $('#alarmimg' + name).css("height", sprite.height);

        var offset = '-' + x + 'px -' + y + 'px';
        $('#alarmimg' + name).css("background-position", offset);
      });

      setTimeout(function() {
        $('#questalarm').fadeOut();
      }, delay);

    },*/

    toggleShowLog: function() {
      this.showlog = !this.showlog;
      if (this.showlog) {
        this.questReloadLog();
        this.questShowLog();
      } else {
        this.questHideLog();
      }
    },

    questReloadLog: function() {
      this.quests = game.player.quests;
      var self = this;
      $("#questLogInfo tbody").find("tr:gt(0)").remove();

      var questIds = Object.keys(this.quests);
      for (var i = 0; i < questIds.length; ++i) {
        var quest = this.quests[questIds[i]];
        if (quest.status == 2) {
          $('#questLogInfo .qd'+quest.id).remove();
          continue;
        }

        var progress = (quest.count + " / " + quest.object.count);
        if (quest.type==QuestType.GETITEMKIND)
        {
          progress = (quest.count + " / " + quest.object2.count);
        }

        var spriteName;
        var itemData;
        var idName;
        if (quest.type==QuestType.GETITEMKIND)
        {
          var kind = quest.object2.kind;
          itemData = ItemLoot[kind];
          var spriteName = itemData.sprite;
    			spriteName = game.sprites["itemloot"].file;
          idName = itemData.name.toLowerCase();
        }
        if (quest.type==QuestType.KILLMOBKIND)
        {
          var mobData = MobData.Kinds[quest.object.kind];
          spriteName = mobData.spriteName;
          idName = spriteName.toLowerCase();
        }
        if (quest.type==QuestType.USENODE)
        {
          spriteName = "nodeset"+quest.object.kind;
          idName = spriteName.toLowerCase()+"_node"+quest.data1;
        }

        var sprite = this.game.spritesets[0][spriteName];
        var sprite_content = "<div class=\"img quest-img-%idName%\"></div>"
        if (quest.type==QuestType.USENODE)
        {
          sprite_content = "<div class=\"img quest-img-%idName%\" style=\"background-image: url('"+sprite.filepath+"')\"></div>"
        }
        else if (quest.type==QuestType.GETITEMKIND)
        {
          sprite_content = "<div class=\"img quest-img-%idName%\" style=\"background-image: url('img/2/sprites/%sprite%')\"></div>"
        }
        else if (quest.type==QuestType.KILLMOBKIND)
        {
          sprite_content = "<div class=\"img quest-img-%idName%\" style=\"background-image: url('"+sprite.filepath+"')\"></div>"
          //sprite_content = "<div class=\"img quest-img-%idName%\" style=\"background-image: url('img/2/sprites/%sprite%.png')\"></div>"
        }

        sprite_content = sprite_content.replace(/%idName%/g, idName);
        sprite_content = sprite_content.replace(/%sprite%/g, spriteName);

        $('#questLogInfo tbody').append(
          "<tr id='qd"+quest.id+"'>" +
            "<td class='frame-stroke1'>" + sprite_content + "</td>" +
            "<td class='frame-stroke1'>" + quest.summary + "</td>" +
            "<td class='frame-stroke1'>" + progress + "</td>" +
          "</tr>");

        if (quest.type==QuestType.GETITEMKIND) {
          $('.quest-img-' + idName).css({
            'background-position': '-' + (itemData.offset[0] * 32) + 'px -' + (itemData.offset[1] * 32) + 'px',
            'width': "32px",
            'height': "32px"});
        }
        if (quest.type==QuestType.KILLMOBKIND) {
          var x = ((sprite.animationData['idle_down'].length - 1) * sprite.width)*2+sprite.width/2;
          var y = ((sprite.animationData['idle_down'].row) * sprite.height)*2+sprite.height/2;

          var offset = '-' + x + 'px -' + y + 'px';
          $('.quest-img-' + idName).css({
            "background-position": offset,
            "width": (sprite.width)+"px",
            "height": (sprite.height)+"px"});
        }
        if (quest.type==QuestType.USENODE) {
          var animName = "node"+quest.data1;
          var x = ((sprite.animationData[animName].length - 1) * sprite.width)*2+sprite.width/2;
          var y = ((sprite.animationData[animName].row) * sprite.height)*2+sprite.height/2;

          var offset = '-' + x + 'px -' + y + 'px';
          $('.quest-img-' + idName).css({
            "background-position": offset,
            "width": (sprite.width)+"px",
            "height": (sprite.height)+"px"});
        }
      }
    },

    questShowLog: function() {
      //alert("called");
      $('#questlog').css('display', 'block');
      $('#questCloseButton').css('display', 'block');

      //SendNative(["QuestLogOpen"].concat(this.quests));
    },

    questHideLog: function() {
      $('#questlog').css('display', 'none');
      $('#questCloseButton').css('display', 'none');
      //SendNative(["QuestLogClose"]);
    },

    handleQuest: function(quest) {
      this.quests = this.game.player.quests;
      var type = quest.status;
      var htmlStr = '';

      if (type === 0) {
        htmlStr = '<p><h2>Quest Found</h2></p><p>' + quest.summary + '</p>';
        game.userAlarm.alarm(htmlStr, this.hideDelay);
        this.questReloadLog();
      }
      else if (type === 2)
      {
        htmlStr = '<p><h2>Quest Completed</h2></p><p>' + quest.summary + '</p>';
        game.userAlarm.alarm(htmlStr, this.hideDelay);
        delete quest;
        this.questReloadLog();
      }

      if (this.showlog) {
        this.questReloadLog();
        this.questShowLog();
      }
    },

    talkToNPC: function(npc) {
      this.game.client.sendTalkToNPC(npc.type, npc.id);
    }
  });
  return QuestHandler;
});

/* global Types */

define('entity/npcstatic',['./character', '../questhandler', 'data/npcdata'], function(Character, QH, NpcData) {
  var NpcStatic = Character.extend({
    init: function(id, type, map, kind, name) {
      this._super(id, type, map, kind, 1);
      //this.itemKind = ItemTypes.getKindAsString(this.kind);
      this.talkIndex = 0;

      log.info("Npc.title: "+NpcData.Kinds[this.kind].title);
      log.info("Npc.name: "+NpcData.Kinds[this.kind].name);

      this.name = name || NpcData.Kinds[this.kind].title;
    },

    /*talk: function(msgs) {
        if(!this.talkIndex)
    	   this.talkIndex = 0;
        if (!Array.isArray(msgs))
          return "Well, hello there!";

        var msg = null;
        var talkCount = msgs.length;

        if(this.talkIndex < talkCount) {
          return msgs[this.talkIndex++];
        } else {
          return null;
        }
    },*/

      getSpriteName: function() {
          return NpcData.Kinds[this.kind].uid;
      },

      getAnimationByName: function () {
        return this._super("idle_down");
      }
    });
  return NpcStatic;
});

define('sprites',[],
  //'text!../sprites/sprites.json',
  //'text!../sprites/items.json',
  //'text!../sprites/blocks.json'],
  function() {
    var Sprites = Class.extend({
      init: function (data) {
        var self = this;

        var $file = "sprites/sprites.zip";
        JSZipUtils.getBinaryContent($file, function(err, data) {
            if(err) {
                throw err; // or handle err
            }

            JSZip.loadAsync(data).then(function(zip) {
              try {
                zip.file("sprites.json").async("string").then(function(data) {
                    self.makeSprites(data);
                    game.setSpriteJSON();
                });
              }
              catch (err) {
                console.error(JSON.stringify(err));
              }
            });
        });

      },

      makeSprites: function (data) {
        var sprites = {};

    	  var spriteJson = JSON.parse(data);
        for (var id in spriteJson) {
          var sprite = spriteJson[id];
        	sprites[sprite.id] = sprite;
        }

        this.sprites = sprites;
        return sprites;

      }

    });

    return Sprites;
});

/* global Types */

define('entity/npcmove',['./character','data/appearancedata','../sprites'], function(Character, AppearanceData, Sprites) {
  var NpcMove = Character.extend({
    init: function(id, type, map, kind, name) {
      this._super(id, type, map, kind);
      this.mapIndex = map;
      this.talkIndex = 0;
      this.name = name;
    },

    /*talk: function(msgs) {
        if(!this.talkIndex)
         this.talkIndex = 0;
        if (!Array.isArray(msgs))
          return "Well, hello there!";

        var msg = null;
        var talkCount = msgs.length;

        if(this.talkIndex < talkCount) {
          return msgs[this.talkIndex++];
        } else {
          return null;
        }
    },*/

    getSprite: function () {
  	    if (this.sprite[0] > 0)
  	    {
  	    	    return Sprites[this.sprite[0]].sprite;
  	    }
  	},

    getSpriteName: function() {
        return game.spriteNames[this.sprite[0]];
    },

    /*setClass: function(pClass) {
      this.pClass = pClass;
      ts = game.tilesize;
      this.setAttackRange(1);
    },*/

    });

    return NpcMove;
});


define('entity/chest',['./entity'], function(Entity) {

    var Chest = Entity.extend({
        init: function(id, kind) {
            this._super(id, 37);
        },

        getSpriteName: function() {
            return "chest";
        },

        isMoving: function() {
            return false;
        },

        open: function() {
            if(this.open_callback) {
                this.open_callback();
            }
        },

        onOpen: function(callback) {
            this.open_callback = callback;
        }
    });

    return Chest;
});


define('entity/block',['./entitymoving', '../timer'], function(EntityMoving, Timer) {

    var Block = EntityMoving.extend({
      init: function(id, type, kind, map, name, x, y) {
        var self = this;

        this._super(id, type, map, kind, x, y);

        this.name = name;
        /*this.ready(function () {
          self.animate("idle", self.idleSpeed);
        })*/
      },

      pickup: function (entity) {
          entity.holdingBlock = this;
          game.client.sendBlock(0, this.id, this.x, this.y);
      },

      place: function (entity) {
        var ts = G_TILESIZE;
        var pos = entity.nextTile();
        pos[0] = pos[0].roundTo(ts);
        pos[1] = pos[1].roundTo(ts);
        if (game.mapContainer.isColliding(pos[0], pos[1]))
          return;

        this.setPosition(pos[0], pos[1]);
        entity.holdingBlock = null;
        game.client.sendBlock(1, this.id, this.x, this.y);
      },

      /*isColliding: function (entity) {
        var x = this.x;
        var y = this.y;
        var pos = {
          "1": [x, y+G_TILESIZE],
          "2": [x, y-G_TILESIZE],
          "3": [x+G_TILESIZE, y],
          "4": [x-G_TILESIZE, y]
        }
        var dir;

        bss = G_TILESIZE >> 1;
        for (var i=1; i < 5; ++i)
        {
          var p = pos[i];
          if (entity.orientation == i && (
              (p[0] == entity.x && Math.abs(p[1]-entity.y) <= bss) ||
              (p[1] == entity.y && Math.abs(p[0]-entity.x) <= bss)))
          {
              return true;
          }
        }
        return false;
      },

      isActivated: function (callback) {
        return callback(this);
      },

      onActivated: function (callback) {
        callback(this);
      },

      move: function (entity) {
          var x = this.x;
          var y = this.y;
          var posMove = {
            "1": [x, y-G_TILESIZE],
            "2": [x, y+G_TILESIZE],
            "3": [x-G_TILESIZE, y],
            "4": [x+G_TILESIZE, y]
          }

          bss = G_TILESIZE >> 1;
          if (this.isColliding(entity))
          {
            var p = posMove[i];
            this.setMoveRate(entity.moveSpeed);
            this.go(p[0], p[1]);
          }
      },*/

    });

    return Block;
});

/* global Types */

define('entity/node',['./entity'], function(Entity) {
  var Node = Entity.extend({
      init: function(id, map, kind) {
        this._super(id, Types.EntityTypes.NODE, map, kind);
        this.level = 0;
        this.stats = {};
        this.idleSpeed = 150+random(150);
      },

      resetHP: function () {
        this.stats.hp = this.stats.hpMax;
      },

      setHP: function (val) {
        val = val || this.stats.hpMax;
        this.stats.hp = val;
      },

      setMaxHP: function(hp) {
          this.stats.hpMax = hp;
          this.stats.hp = hp;
      },

      die: function () {
          //this.isDead = true;
          if (this.death_callback)
            this.death_callback();
      },

      onDeath: function(callback) {
          this.death_callback = callback;
      },

      getAnimationByName: function () {
        if (this.isDying)
          return this._super("death");

        return this._super(this.name);
      },
    });

  return Node;
});

/* global Types, log, _ */
define('entityfactory',['entity/entity', 'entity/item', 'entity/mob', 'entity/npcstatic', 'entity/npcmove', 'entity/player', 'entity/chest', 'entity/block', 'entity/node'],
	function(Entity, Item, Mob, NpcStatic, NpcMove, Player, Chest, Block, Node) {

    var EntityFactory = {};

    EntityFactory.createEntity = function(type, kind, id, mapIndex, name, level=0) {
        if(!id) {
            log.info("ERROR - kind is undefined: "+kind+" "+id+" "+name, true);
            return null;
        }

        //if (isChest(id))
        //return new Chest(id, kind);

        // If Items.

        if (type == Types.EntityTypes.PLAYER)
        	return new Player(id, type, mapIndex, kind, name);
        else if (type == Types.EntityTypes.MOB)
        	return new Mob(id, type, mapIndex, kind, name, level);
        else if (type == Types.EntityTypes.NPCSTATIC)
        	return new NpcStatic(id, type, mapIndex, kind);
				else if (type == Types.EntityTypes.ITEM || type == Types.EntityTypes.ITEMLOOT)
        	return new Item(id, type, mapIndex, kind, "item");
				else if (type == Types.EntityTypes.BLOCK)
          return new Block(id, type, mapIndex, kind, name);
				else if (type == Types.EntityTypes.TRAP)
          return new Entity(id, type, mapIndex, kind, name);
        else if (type == Types.EntityTypes.NPCMOVE)
          return new NpcMove(id, type, mapIndex, kind, name);
				else if (type == Types.EntityTypes.NODE)
          return new Node(id, mapIndex, kind);

        return null;
    };
    return EntityFactory;
});

/*
   Copyright (c) 2010-2011 Ivo Wetzel.

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
*/

(function(undefined) {
    var chr = String.fromCharCode;
    var tok = new Array(65536);
    for (var i = 0; i < 65536; i++) {
        tok[i] = chr(i);
    }

    var enc = '';
    function _encode(data, top) {
        if (typeof data === 'number') {

            // Floats
            var m = data | 0;
            if (m !== data) {
                var add = 0, r = (data - m) * 100;
                if (r < 0) {
                    add = (r + 1 | 0) - r;
                    r = (add >= 1.0 && add <= 1.5) ? r | 0 : r - 1 | 0;

                } else {
                    add = r | 0;
                    r = r - add >= 0.5 ? r + 1 | 0 : add;
                }

                add = 0;
                if (data < 0) {
                    m = 0 - m;
                    r = 0 - r;
                    add = 1;
                }

                if (m < 65536) {
                    if (m === 0) {
                        enc += tok[13 + add] + tok[r + 128];

                    } else {
                        enc += tok[13 + add] + tok[r] + tok[m];
                    }

                } else {
                    enc += tok[15 + add] + tok[m >> 16 & 0xffff]
                                         + tok[m & 0xffff] + tok[r];
                }

            // Fixed
            } else {
                var add = 0;
                if (data <= 0) {
                    data = 0 - data;
                    add = 1;

                } else {
                    data--;
                }

                if (data < 116) {
                    enc += tok[17 + data + add * 116];

                } else if (data < 65536) {
                    enc += tok[1 + add] + tok[data];

                } else {
                    enc += tok[3 + add] + tok[data >> 16 & 0xffff]
                                        + tok[data & 0xffff];
                }
            }

        // Strings
        } else if (typeof data === 'string') {
            var l = data.length;
            enc += tok[7];
            while (l >= 65535) {
                l -= 65535;
                enc += tok[65535];
            }
            enc += tok[l] + data;

        // Booleans
        } else if (data === true) {
            enc += tok[5];

        } else if (data === false) {
            enc += tok[6];

        // Null
        } else if (data === null) {
            enc += tok[0];

        // Arrays
        } else if (data instanceof Array) {
            enc += tok[8];
            for (var i = 0, l = data.length; i < l; i++) {
                _encode(data[i], false);
            }
            if (!top) {
                enc += tok[9];
            }

        // Objects
        } else if (data instanceof Object) {
            enc += tok[10];
            for (var e in data) {
                enc += tok[17 + e.length] + e;
                _encode(data[e], false);
            }
            if (!top) {
                enc += tok[11];
            }
        }
    }

    function encode(data) {
        enc = '';
        _encode(data, true);
        return enc;
    }

    function decode(data) {
        var p = 0, l = data.length;
        var stack = [], dec = undefined, f = null, t = 0, i = -1;
        var dict = false, set = false;
        var key = '', e = null, r = 0;
        while (p < l) {
            t = data.charCodeAt(p++);
            f = stack[i];

            // Keys
            if (dict && set && t > 16) {
                key = data.substring(p, p + t - 17);
                p += t - 17;
                set = false;

            // Array / Objects
            } else if (t === 8 || t === 10) {
                e = t === 8 ? new Array() : new Object();
                set = dict = t === 10;
                dec !== undefined ? f instanceof Array ? f.push(e)
                                                       : f[key] = e : dec = e;

                stack.push(e);
                i++;

            } else if (t === 11 || t === 9) {
                stack.pop();
                set = dict = !(stack[--i] instanceof Array);

            // Fixed
            } else if (t > 16) {
                t = t - 17;
                t = t > 115 ? (0 - t + 116) : t + 1;
                f instanceof Array ? f.push(t) : f[key] = t;
                set = true;

            } else if (t > 0 && t < 5) {
                if (((t - 1) / 2 | 0) === 0) {
                    e = data.charCodeAt(p);
                    p++;

                } else {
                    e = (data.charCodeAt(p) << 16) + data.charCodeAt(p + 1);
                    p += 2;
                }
                e = t % 2 ? e + 1 : 0 - e;
                f instanceof Array ? f.push(e) : f[key] = e;
                set = true;

            // Floats
            } else if (t > 12 && t < 17) {
                if (((t - 13) / 2 | 0) === 0) {
                    r = data.charCodeAt(p);
                    if (r > 127) {
                        e = 0;
                        r -= 128;
                        p++;

                    } else {
                        e = data.charCodeAt(p + 1);
                        p += 2;
                    }

                } else {
                    e = (data.charCodeAt(p) << 16) + data.charCodeAt(p + 1);
                    r = data.charCodeAt(p + 2);
                    p += 3;
                }

                e = t % 2 ? e + r * 0.01 : 0 - (e + r * 0.01);
                f instanceof Array ? f.push(e) : f[key] = e;
                set = true;

            // Booleans
            } else if (t > 4 && t < 7) {
                f instanceof Array ? f.push(t === 5) : f[key] = t === 5;
                set = true;

            // Null
            } else if (t === 0) {
                f instanceof Array ? f.push(null) : f[key] = null;
                set = true;

            // Strings
            } else if (t === 7) {
                e = 0;
                while (data.charCodeAt(p) === 65535) {
                    e += 65535;
                    p++;
                }
                e += data.charCodeAt(p++);
                f instanceof Array ? f.push(data.substr(p, e))
                                   : f[key] = data.substr(p, e);

                p += e;
                set = true;
            }
        }
        return dec;
    }

    if (typeof window === 'undefined') {
        exports.encode = encode;
        exports.decode = decode;

    } else {
        window.BISON = {
            encode: encode,
            decode: decode
        };
    }
})();


define("lib/bison", function(){});


define('config',[],
function(build) {
    var config = {};
    fetch('./config/config_build.json')
    .then((response) => response.json())
    .then((json) => config.build = json);

    config.waitForConfig = function (callback) {
        if (config.hasOwnProperty("build")) {
          callback();
          return true;
        }
        setTimeout(function () {
          config.waitForConfig(callback);
        }, 100);        
        return false;
    };

    return config;
});


define('chathandler',[], function() {
    var ChatHandler = Class.extend({
        init: function(game) {
            var self = this;
            this.game = game;
            //this.client = game.client;
            //this.kkhandler = kkhandler;
            this.chatLog = $('#chatLog');
            //handle global announcements server sided so
            //they're always synced.
            this.bumpOffDelay = 30000;
        },
        show: function(){
          $('#chatLog').css('display', 'flex');
        },
        processSendMessage: function(message) {
          return this.processSenders(null, message);
        },
        processReceiveMessage: function(entityId, message) {
          return this.processRecievers(entityId, message);
        },

        handleAddSpawn: function (data) {
		log.info("sendAddSpawn");
		var m = this.game.getMouseGridPosition();
		if (data.length == 2)
			this.game.client.sendAddSpawn(parseInt(data[1]), m.x, m.y);
        },

        handleSaveSpawns: function (data) {
        	this.game.client.sendSaveSpawns();
        },

        handleIdEntity: function (data) {
		var m = this.game.getMouseGridPosition();
		var entity = this.game.getEntityAt(m.x, m.y);
		if (entity)
		{
			this.addToChatLog("entity name: " + entity.name + ", id: " + entity.id +
			    ", kind: " + entity.kind + ", pos: (" + m.x + "," + m.y + ")");
		}
        },

        handleWarp: function (data) {
      		var p = this.game.player;
      		if (p.warpX && p.warpY)
      		{
      			this.teleportTo(p.warpX, p.warpY);
      		}
        },

        handlePartyInvite: function(data) {
        	/*var m = this.game.getMouseGridPosition();
        	var entity;
        	if (data.length == 2)
        	{
        		log.info("name_search="+data[1]);
        		entity = this.game.getEntityByName(data[1]);
        	}
        	else
        	{
        		entity = this.game.getEntityAt(m.x, m.y);
                }
        	if (entity == this.game.player)
        		return;
        	if (entity && entity.id)*/
        	this.game.client.sendPartyInvite(data[0], 0);

        },

        handlePartyLeader: function(data) {
        	//var m = this.game.getMouseGridPosition();
        	//var entity = this.game.getEntityAt(m.x, m.y);
        	//if (entity)
        	this.game.client.sendPartyLeader(data[0]);
        },

        handlePartyLeave: function(data) {
        	this.game.client.sendPartyLeave();
        },

        handlePartyKick: function(data) {
        	//var m = this.game.getMouseGridPosition();
        	//var entity = this.game.getEntityAt(m.x, m.y);
        	//if (entity)
        	this.game.client.sendPartyKick(data[0]);
        },

        handleAutoPotion: function (data) {
    			//if (data.length == 2)
    			//{
    				this.game.useAutoPotion = parseInt(data[0]);
    			//}
        },

        processSenders: function(entityId, message) {
                var data = message.split(" ",5);
                if (!data) data[0] = message;

                switch (data.shift())
                {
                    case "/as":
                        this.handleAddSpawn(data);
                    	return true;
                    case "/savespawns":
                    	this.handleSaveSpawns(data);
                    	return true;
                    case "/id":
                    	this.handleIdEntity(data);
                        return true;
                    case "/warp":
                    	this.handleWarp(data);
                    	return true;
                    case "/party":
                    case "/invite":
                    	this.handlePartyInvite(data);
                    	return true;
                    case "/leader":
                    	this.handlePartyLeader(data);
                    	return true;
                    case "/leave":
                    	this.handlePartyLeave(data);
                    	return true;
                    case "/kick":
                    	this.handlePartyKick(data);
                    	return true;
                    case "/autopotion":
                    	this.handleAutoPotion(data);
                    	return true;
                }
                			//#cli guilds
			var regexp = /^\/guild\ (invite|create|accept)\s+([^\s]*)|(guild:)\s*(.*)$|^\/guild\ (leave)$/i;
			var args = message.match(regexp);
			if(args != undefined){
				switch(args[1]){
					case "invite":
						if(this.game.player.hasGuild()){
							this.game.client.sendGuildInvite(args[2]);
						}
						else{
							this.addNotification("You are not in a guild.");
						}
						break;
					case "create":
						this.game.client.sendNewGuild(args[2]);
						break;
					case undefined:
						if(args[5]==="leave"){
							this.game.client.sendLeaveGuild();
						}
						else if(this.game.player.hasGuild()){
							this.game.client.talkToGuild(args[4]);
						}
						else{
							this.addNotification("You got no-one to talk to…");
						}
						break;
					case "accept":
						var status;
						if(args[2] === "yes") {
							status = this.game.player.checkInvite();
							if(status === false){
								this.addNotification("You were not invited anyway…");
							}
							else if (status < 0) {
								this.addNotification("Sorry to say it's too late…");
								setTimeout(function(){self.addNotification("Find someone and ask for another invite.")},2500);
							}
							else{
								this.game.client.sendGuildInviteReply(this.game.player.invite.guildId, true);
							}
						}
						else if(args[2] === "no"){
							status = this.game.player.checkInvite();
							if(status!==false){
								this.game.client.sendGuildInviteReply(this.game.player.invite.guildId, false);
								this.game.player.deleteInvite();
							}
							else{
								this.addNotification("Whatever…");
							}
						}
						else{
							this.addNotification("“guild accept” is a YES or NO question!!");
						}
						break;
				}
				return true;
			}
        	var pattern = message.substring(0, 3),
                self = this,
                commandPatterns = {
                      	"/g ": function(message) {
                      		if(self.game.player.hasGuild()){
                      			self.game.client.talkToGuild(message);
                      		}
                      		else{
                      			self.addNotification("You got no-one to talk to…");
                      		}
                      		return true;
						},
                		"/w ": function(message) {
                            var name = self.game.player.name,
                                rights = self.game.player.rights;

                            //'hacking' this will cause no issues
                            //as they grant no advantages
                            switch (rights) {
                                case 2:
                                    name = "[Admin]" + name;
                                break;

                                case 1:
                                    name = "[Moderator]" + name;
                                break;
                                //no default needed.
                            }

                            self.game.client.sendChat("/s " + name + ": " + message);
                            return true;
                      },
                      "// ": function(message) {
                          self.game.client.sendChat("// " + self.game.player.name + ": " + message);
                          return true;
                      },
                      /*"/re": function(message) {
                      	  self.teleportToTown();
                          return true;
                      },
                      "/to": function(message) {
                      	  self.teleportToTown();
                          return true;
                      },*/
                      "///": function(message) {
                          self.game.client.sendChat("/// " + self.game.player.name + ": " + message);
                          return true;
                      },
                      /*"/te": function(message) {
                      	  self.teleportTo(parseInt(data[1]), parseInt(data[2]));
                          return true;
                      },*/
                };
                if (pattern in commandPatterns) {
                      if (typeof commandPatterns[pattern] == "function") {
                          return commandPatterns[pattern](message.substring(3));
                      }
                }
            return false;
        },
        processRecievers: function(entityId, message) {
        		if (message.indexOf("/") !== 0)
        			return false;

        		//var regexp = /^\/guild\ (invite|create|accept)\s+([^\s]*)|(guild:)\s*(.*)$|^\/guild\ (leave)$/i;
        		//var args = message.match(regexp);
        		//if (args) return false;

        		var data = message.split(" ",5);
                if (!data) data[0] = message;

                switch (data[0])
                {
                    case "/rn":
                        this.addRatingNotification(message.substr(4));
                    	return true;
                }

        	var pattern = message.substring(0, 3),
                self = this,
                commandPatterns = {
                        // World chat
                        "/1 ": function(entityId, message) {
                            self.addToChatLog(message);
                            return true;
                        },
                        "// ": function(entityId, message){
                            self.addToChatLog('<font color="#00BFFF">' + message + '</font>');
                            return true;
                        },
                        "///": function(entityId, message){
                            var i=0;
                            var splitMsg = message.split(' ');
                            var msg = "";
                            for(i=0; i<splitMsg.length; i++){
                                  if(i !== 3){
                                      msg += splitMsg[i] + " ";
                                  }
                                  // OPTIMIZED VERSION !!! NON TESTED
                                  //if(i !== 3)
                                  //    msg += splitMsg[i] + " ";
                            }
                            self.addToChatLog('<font color="#FFA500">' + msg + '</font>');
                            return true;
                        },
                };
                if (pattern in commandPatterns) {
                      if (typeof commandPatterns[pattern] == "function") {
                          return commandPatterns[pattern](entityId, message.substring(3));
                      }
                }
            return false;
        },
        bumpOffLog: function (delay) {
          var delay = delay || this.bumpOffDelay;
          var self = this;
          $(this.chatLog).scrollTop(999999);
          setTimeout(function () {
            $(this.chatLog).find("p:first").remove();
          }, delay);
        },

        addToChatLog: function(message){
            var self = this;
            var el = $('<p style="color: white">' + message + '</p>');
            $(el).appendTo(this.chatLog);
            this.bumpOffLog();
        },
        addNotification: function(message){
            var self = this;
            var el = $('<p style="color: rgba(128, 255, 128, 1)">' + message + '</p>');
            $(el).appendTo(this.chatLog);
            this.bumpOffLog();
        },
        addNormalChat: function(entity, message) {
            var self = this;
            if (!entity) return;
            var el = $('<p style="color: rgba(255, 255, 0, 1)">' + entity.name + ': ' + message + '</p>');
            $(el).appendTo(this.chatLog);
            this.bumpOffLog();
        },

        addGameNotification: function(notificationType, message) {
            var self = this;
        	  var el = $('<p style="color: rgba(255, 255, 0, 1)">' + notificationType + ': ' + message + '</p>');
            $(el).appendTo(this.chatLog);
            this.bumpOffLog();
        },

        addRatingNotification: function(message) {
            var self = this;
            var el = $('<p style="color: rgba(255, 255, 0, 1)">' + message + '</p>');
            $(el).appendTo(this.chatLog);
            this.bumpOffLog();
        }

    });
    return ChatHandler;
});


/* global Types, log, Class */

define('gameclient',['lib/pako', 'entity/player', 'entityfactory', 'entity/mob', 'entity/item', 'data/mobdata', 'lib/bison', 'config', 'chathandler', 'timer', 'util'],
	function(pako, Player, EntityFactory, Mob, Item, MobData, BISON, config, ChatHandler, Timer) {

    var GameClient = Class.extend({
        init: function(game, userclient) {
						var self = this;
						this.game = game;
            //this.game = game;
            this.connection = userclient.connection;

						this.connection.removeListener('message', userclient.onMessage);
						this.connection.on('message', function(e) {
	              //console.warn("recv="+e);
								self.processMessage(e);
								return false;
	          });

						this.useBison = false;

            this.enable();

            this.tablet = Detect.isTablet(window.innerWidth);
            this.mobile = Detect.isMobile();


						//this.harvest_callback	= null;
            this.handlers = {};

						//this.rawpackets = [];
						//this.packets = [];

		        var burst = 4;

		        this.processMessage = function(data) {
		          //if (!self.rawpackets || self.rawpackets.length == 0)
		            //return;

		          //var data = self.rawpackets.shift();
		          if (data.charAt(0) == '2')
		          {
		            var buffer = _base64ToArrayBuffer(data.substr(1));
		            try {
		            var message = pako.inflate(buffer, {gzip: true, to: 'string'});
		            if(self.isListening) {
		              if(self.useBison) {
		                data = BISON.decode(message);
		              } else {
		                data = JSON.parse(message);
		              }
		              if(data instanceof Array) {
		                if(data[0] instanceof Array) {
		                  // Multiple actions received
		                  self.receiveActionBatch(data);
		                } else {
		                  // Only one action received
		                  //self.packets.push(data);
											self.receiveAction(data);
		                }
		              }
		            }
		          } catch (err) {
		            console.log(err);
		          }
		        }
		        else
		        {
		          var message = data.substr(1);
		          if(self.isListening) {
		            if(self.useBison) {
		              data = BISON.decode(message);
		            } else {
		              data = JSON.parse(message);
		            }
		            if(data instanceof Array) {
		              if(data[0] instanceof Array) {
		                // Multiple actions received
		                self.receiveActionBatch(data);
		              } else {
		                // Only one action received
		                //self.packets.push(data);
										self.receiveAction(data);
		              }
		            }
		          }
		        }
		      };

		      /*this.packetProcFunc = function() {
		        if (!self.packets || self.packets.length == 0)
		          return;
		        for (var i=0; i < burst; ++i)
		        {
		            if (self.packets.length == 0)
		              return;
		            var data = self.packets.shift();
		            log.info("recv: "+data);
		            self.receiveAction(data);
		        }
		      };*/

					//setInterval(function () { self.packetProcFunc(); }, 16);

					log.info("Starting client/server handshake");
        },

				setHandlers: function () {
					this.handlers[Types.Messages.SC_AUCTIONOPEN] = this.auction_callback;
					this.handlers[Types.Messages.SC_CHANGEPOINTS] = this.change_points_callback;
					this.handlers[Types.Messages.SC_CHAT] = this.chat_callback;
					this.handlers[Types.Messages.SC_DAMAGE] = this.dmg_callback;
					this.handlers[Types.Messages.SC_DESTROY] = this.destroy_callback;
					this.handlers[Types.Messages.SC_GOLD] = this.gold_callback;
					this.handlers[Types.Messages.SC_ITEMSLOT] = this.itemslot_callback;
					this.handlers[Types.Messages.SC_ITEMLEVELUP] = this.itemlevelup_callback;
					this.handlers[Types.Messages.SC_STAT] = this.stat_callback;
					this.handlers[Types.Messages.SC_LEVELUP] = this.levelup_callback;
					this.handlers[Types.Messages.SC_DESPAWN] = this.despawn_callback;
					this.handlers[Types.Messages.SC_SWAPSPRITE] = this.swapsprite_callback;
					this.handlers[Types.Messages.SC_APPEARANCE] = this.appearance_callback;
					//this.handlers[Types.Messages.SC_LOOKUPDATE] = this.updatelook_calllback;
					this.handlers[Types.Messages.SC_MOVE] = this.move_callback;
					this.handlers[Types.Messages.SC_MOVEPATH] = this.movepath_callback;
					this.handlers[Types.Messages.SC_NOTIFY] = this.notify_callback;
					this.handlers[Types.Messages.SC_QUEST] = this.quest_callback;
					this.handlers[Types.Messages.SC_ACHIEVEMENT] = this.achievement_callback;
					this.handlers[Types.Messages.SC_SKILLEFFECTS] = this.skilleffects_callback;
					this.handlers[Types.Messages.SC_SKILLLOAD] = this.skillLoad_callback;
					this.handlers[Types.Messages.SC_SKILLXP] = this.skillxp_callback;
					this.handlers[Types.Messages.SC_SPAWN] = this.receiveSpawn;
					this.handlers[Types.Messages.SC_SPEECH] = this.speech_callback;
					this.handlers[Types.Messages.SC_DIALOGUE] = this.dialogue_callback;
					this.handlers[Types.Messages.SC_STATINFO] = this.statInfo_callback;
					this.handlers[Types.Messages.SC_TELEPORT_MAP] = this.teleportmap_callback;
					this.handlers[Types.Messages.SC_BLOCK_MODIFY] = this.block_callback;
					this.handlers[Types.Messages.SC_PARTY] = this.party_callback;
					this.handlers[Types.Messages.SC_LOOKS] = this.looks_callback;
					this.handlers[Types.Messages.SC_PLAYERINFO] = this.playerinfo_callback;
					this.handlers[Types.Messages.SC_HARVEST] = this.harvest_callback;

					this.handlers[Types.Messages.SC_SET_SPRITE] = this.set_sprite_callback;
					this.handlers[Types.Messages.SC_SET_ANIMATION] = this.set_animation_callback;


				},

        enable: function() {
            this.isListening = true;
        },

        disable: function() {
            this.isListening = false;
        },

        //connect: function() {
        //},

        sendMessage: function(json) {
          var data;
          if(this.connection.connected === true) {
            //console.warn("sent=" + JSON.stringify(json));
          	if(this.useBison) {
                data = BISON.encode(json);
            } else {
                data = JSON.stringify(json);
          	}

						try {
							this.connection.send("1"+data);
						} catch (err) {
							console.log(err);
						}
          }
        },

        /*receiveMessage: function(incomingData) {
            var self = this;
            self.rawpackets.push(incomingData);
        },*/

        receiveAction: function(data) {
            //log.info("recieved=" + JSON.stringify(data));
            var action = data.shift();
            if(this.handlers[action] && _.isFunction(this.handlers[action])) {
                this.handlers[action].call(this, data);
            }
            else {
                log.error("Unknown action : " + action);
            }
        },

        receiveActionBatch: function(actions) {
            var self = this;
            _.each(actions, function(action) {
                self.receiveAction(action);
                //self.packets.push(action);
                //log.info(JSON.stringify(action));
            });
        },

        receiveSpawn: function(data) {
            var id = parseInt(data[0]),
								type = parseInt(data[1]),
                kind = parseInt(data[2]),
								name = data[3].length > 0 ? data[3] : null,
                mapIndex = parseInt(data[4]),
								x = parseInt(data[5]),
								y = parseInt(data[6]);

            //log.info("this.game.mapIndex:"+this.game.mapIndex);
            //log.info("map:"+parseInt(map));

            if (!game.mapContainer.ready || game.mapContainer.mapIndex != parseInt(mapIndex) ||
            	id == game.player.id)
            	return;

            //log.info("data="+JSON.stringify(data));
						// If Entity exists just re-create it.
            if (this.game.entityIdExists(id)) {
            	var entity = this.game.getEntityById(id);
							game.removeEntity(entity);
            }

            if(type == Types.EntityTypes.ITEM || type == Types.EntityTypes.ITEMLOOT) {
                var item = EntityFactory.createEntity(type, kind, id, mapIndex, name);
								item.orientation = parseInt(data[7]);
                item.count = parseInt(data[8]);
								item.setPosition(x, y);
                if(this.spawn_item_callback) {
                    this.spawn_item_callback(data, item); // from 8
                }
						}
            else if(type == Types.EntityTypes.CHEST) {
                var item = EntityFactory.createEntity(type, kind, id, mapIndex, name);
								item.setPosition(x, y);
                if(this.spawn_chest_callback) {
                    this.spawn_chest_callback(data, item); // from 8
                }
								return;
            } else {
								var level = parseInt(data[8]);
								var entity = EntityFactory.createEntity(type, kind, id, mapIndex, name, level);
								entity.setPosition(x, y);
                if(this.spawn_character_callback) {
                    this.spawn_character_callback(data, entity); // from 6
                }
            }
        },

				onParty: function (callback) {
            this.party_callback = callback;
        },

				onLooks: function (callback) {
            this.looks_callback = callback;
        },

				onPlayerInfo: function (callback) {
            this.playerinfo_callback = callback;
        },

        onDispatched: function(callback) {
            this.dispatched_callback = callback;
        },

        onDisconnected: function(callback) {
            this.disconnected_callback = callback;
        },

        /*onClientError: function(callback) {
            this.clienterror_callback = callback;
        },*/

        onLogin: function(callback) {
        	this.login_callback = callback;
        },

        onSpawnCharacter: function(callback) {
            this.spawn_character_callback = callback;
        },

        onSpawnItem: function(callback) {
            this.spawn_item_callback = callback;
        },

        onSpawnChest: function(callback) {
            this.spawn_chest_callback = callback;
        },

        onDespawnEntity: function(callback) {
            this.despawn_callback = callback;
        },

        onEntityMove: function(callback) {
            this.move_callback = callback;
        },

        onEntityMovePath: function(callback) {
            this.movepath_callback = callback;
        },

        /*onEntityAttack: function(callback) {
            this.attack_callback = callback;
        },*/

        /*onPlayerChangeHealth: function(callback) {
            this.health_callback = callback;
        },*/

        /*onPlayerEquipItem: function(callback) {
            this.equip_callback = callback;
        },*/

        /*onPlayerMoveToItem: function(callback) {
            this.lootmove_callback = callback;
        },*/

        onPlayerTeleportMap: function(callback) {
            this.teleportmap_callback = callback;
        },

        onChatMessage: function(callback) {
            this.chat_callback = callback;
        },

        /*onDropItem: function(callback) {
            this.drop_callback = callback;
        },*/

        onCharacterDamage: function(callback) {
            this.dmg_callback = callback;
        },

        /*onPlayerKillMob: function(callback) {
            this.kill_callback = callback;
        },*/

				onPlayerStat: function(callback) {
            this.stat_callback = callback;
        },

        onPlayerLevelUp: function(callback) {
            this.levelup_callback = callback;
        },

        onPlayerItemLevelUp: function(callback) {
            this.itemlevelup_callback = callback;
        },

        /*onPopulationChange: function(callback) {
            this.population_callback = callback;
        },*/

        /*onEntityList: function(callback) {
            this.list_callback = callback;
        },*/

				/*onKnownEntityList: function(callback) {
            this.known_callback = callback;
        },*/

        onEntityDestroy: function(callback) {
            this.destroy_callback = callback;
        },

        onCharacterChangePoints: function(callback) {
            this.change_points_callback = callback;
        },

        onNotify: function(callback){
            this.notify_callback = callback;
        },

				onDialogue: function(callback){
            this.dialogue_callback = callback;
        },

        /*onBarStats: function(callback) {
            this.barstats_callback = callback;
        },*/

        onQuest: function(callback) {
            this.quest_callback = callback;
        },

				onAchievement: function(callback) {
            this.achievement_callback = callback;
        },

        /*onTalkToNPC: function(callback) {
            this.talkToNPC_callback = callback;
        },*/

        onItemSlot: function(callback) {
            this.itemslot_callback = callback;
        },

        onSkillInstall: function(callback) {
            this.skillInstall_callback = callback;
        },
        onSkillLoad: function(callback) {
            this.skillLoad_callback = callback;
        },
				onSkillXP: function(callback) {
            this.skillxp_callback = callback;
        },
				onSkillEffects: function (callback) {
            this.skilleffects_callback = callback;
        },

        onStatInfo: function(callback) {
            this.statInfo_callback = callback;
        },

        onAuction: function (callback) {
            this.auction_callback = callback;
        },

        onWanted: function (callback) {
            this.wanted_callback = callback;
        },

        onAggro: function (callback) {
             this.aggro_callback = callback;
        },

        onSpeech: function (callback) {
             this.speech_callback = callback;
        },

        onMapStatus: function (callback) {
        	this.mapstatus_callback = callback;
        },

        /*onUpdateLook: function (callback) {
        	this.updatelook_calllback = callback;
        },*/

				onSetSprite: function (callback) {
					this.set_sprite_callback = callback;
				},

				onSetAnimation: function (callback) {
					this.set_animation_callback = callback;
				},

				onGold: function(callback) {
					this.gold_callback = callback;
				},

				onProducts: function (callback) {
					this.products_callback = callback;
				},

				onSwapSprite: function (callback) {
					this.swapsprite_callback = callback;
				},

				onAppearance: function (callback) {
					this.appearance_callback = callback;
				},

				onBlockModify: function (callback) {
					this.block_callback = callback;
				},

				onHarvest: function (callback) {
					this.harvest_callback = callback;
				},

// SEND FUNCTIONS.

        /*sendCreate: function(player) {
            this.sendMessage([Types.Messages.CS_CREATE_PLAYER,
															Date.now(),
                              player.name,
            		      				player.pClass
														  ]);
        },

        sendLogin: function(player) {
            this.sendMessage([Types.Messages.CS_LOGIN_PLAYER,
															Date.now(),
                              player.name]);
        },*/

        sendMoveEntity: function(entity, action) {
						//try { throw new Error(); } catch(err) { console.error(err.stack); }
            this.sendMessage([Types.Messages.CS_MOVE,
											getWorldTime(),
            		      entity.id,
											action,
											entity.orientation,
											entity.x,
											entity.y]);
        },

        sendMovePath: function(entity, length, path) {
						var simpath = path;
						if (entity.followingMode)
						{
							simpath.pop();
							length--;
						}

            var array = [Types.Messages.CS_MOVEPATH,
											getWorldTime(),
            		      entity.id,
											entity.getOrientation(path[0], path[1]),
                      (entity.interrupted ? 1 : 0)];

            array = array.concat(simpath);
        		this.sendMessage(array);
        },

				sendDropItem: function(item, x, y) {
					this.sendMessage([Types.Messages.CS_DROP,
														x,
														y,
														item.id]);
				},

        sendAttack: function(player, mob, spellId) {
            this.sendMessage([Types.Messages.CS_ATTACK, getWorldTime(),
                              mob.id, player.orientation, spellId]);
        },

        sendChat: function(text) {
            this.sendMessage([Types.Messages.CS_CHAT,
                              text]);
        },

        sendLoot: function(item) {
            this.sendMessage([Types.Messages.CS_LOOT].concat(_.pluck(item,'id')));
        },

				// map, status, x, y
        sendTeleportMap: function(data) {
						//if (data[1] == 0)
							//game.renderer.blankFrame = true;
            this.sendMessage([Types.Messages.CS_TELEPORT_MAP,
            		      	  		data[0], data[1], data[2], data[3]]);
        },

        sendWho: function(ids) {
						ids = ids || [];
						ids.unshift((ids.length > 0) ? 2 : 1);
						ids.unshift(Types.Messages.CS_WHO);
            this.sendMessage(ids);
        },

				/*sendKnowWho: function(ids) {
            ids.unshift(Types.Messages.CS_KNOWWHO);
            this.sendMessage(ids);
        },*/

        sendDelist: function(ids) {
            ids.unshift(Types.Messages.CS_DELIST);
            this.sendMessage(ids);
        },

        sendTalkToNPC: function (type, npcId) {
            this.sendMessage([Types.Messages.CS_TALKTONPC, type, npcId]);
        },

        sendQuest: function(entityId, questId, status){
            this.sendMessage([Types.Messages.CS_QUEST, entityId, questId, status]);
        },

				// category, type, inventoryNumber, count, x, y
        sendItemSlot: function(data){
            this.sendMessage([Types.Messages.CS_ITEMSLOT].concat(data));
        },

        sendSkill: function(type, targetId){
            this.sendMessage([Types.Messages.CS_SKILL, type, targetId]);
        },

        sendShortcut: function(index, type, shortcutId) {
            this.sendMessage([Types.Messages.CS_SHORTCUT, index, type, shortcutId]);
        },

        sendSkillLoad: function() {
            this.sendMessage([Types.Messages.CS_SKILLLOAD]);
        },

        /*sendCharacterInfo: function() {
            this.sendMessage([Types.Messages.CS_CHARACTERINFO]);
        },*/

        sendStoreSell: function(type, inventoryNumber) {
            this.sendMessage([Types.Messages.CS_STORESELL, type, inventoryNumber]);
        },
        sendStoreBuy: function(itemType, itemKind, itemCount) {
            this.sendMessage([Types.Messages.CS_STOREBUY, itemType, itemKind, itemCount]);
        },
				sendStoreCraft: function(itemKind, itemCount) {
            this.sendMessage([Types.Messages.CS_CRAFT, itemKind, itemCount]);
        },

				sendPlayerInfo: function () {
					this.sendMessage([Types.Messages.CS_REQUEST, 2]);
				},

        sendAuctionOpen: function(type) {
            this.sendMessage([Types.Messages.CS_AUCTIONOPEN, type]);
        },
        sendAuctionSell: function(inventoryNumber, sellValue) {
            this.sendMessage([Types.Messages.CS_AUCTIONSELL, inventoryNumber, sellValue]);
        },
        sendAuctionBuy: function(index, type) {
            this.sendMessage([Types.Messages.CS_AUCTIONBUY, index, type]);
        },
        sendAuctionDelete: function(index, type) {
            this.sendMessage([Types.Messages.CS_AUCTIONDELETE, index, type]);
        },

        sendStoreEnchant: function(type, index) { // type 1 = Inventory, 2 = Equipment.
            this.sendMessage([Types.Messages.CS_STORE_MODITEM, 1, type, index]);
        },
        sendStoreRepair: function(type, index) { // type 1 = Inventory, 2 = Equipment.
            this.sendMessage([Types.Messages.CS_STORE_MODITEM, 0, type, index]);
        },

        /*sendBankStore: function(itemSlot) {
            this.sendMessage([Types.Messages.CS_ITEMSLOT, 2, itemSlot]);
        },
        sendBankRetrieve: function(itemSlot) {
            this.sendMessage([Types.Messages.CS_BANKRETRIEVE, itemSlot]);
        },*/
        sendGold: function(type, amount, type2) {
            this.sendMessage([Types.Messages.CS_GOLD, parseInt(type), parseInt(amount), parseInt(type2)]);
        },

        sendMapStatus: function (mapId, status) {
        	this.sendMessage([Types.Messages.CS_MAP_STATUS, mapId, status]);
        },
        sendPlayerRevive: function () {
        	this.sendMessage([Types.Messages.CS_REQUEST, 1]);
        },
        sendColorTint: function(type, value) {
        	this.sendMessage([Types.Messages.CS_COLOR_TINT, type, value]);
        },

				sendAppearanceList: function() {
					this.sendMessage([Types.Messages.CS_REQUEST, 0]);
				},

				sendAppearanceUnlock: function(index, buy) {
					buy = buy || 0;
					this.sendMessage([Types.Messages.CS_APPEARANCEUNLOCK, index, buy]);
				},

				sendLook: function (type, id) {
					this.sendMessage([Types.Messages.CS_LOOKUPDATE, type, id]);
				},

				sendAddStat: function(statType, points) {
					this.sendMessage([Types.Messages.CS_STATADD, statType, points]);
				},

				sendLootMove: function (item) {
					this.sendMessage([Types.Messages.CS_LOOT, item.id, item.x, item.y]);
				},

				sendBlock: function (type, id, x, y) {
					this.sendMessage([Types.Messages.CS_BLOCK_MODIFY, type, id, x, y]);
				},

				sendPartyInvite: function(name, status) { // 0 for request, 1, for yes, 2 for no.
            this.sendMessage([Types.Messages.CS_PARTY, 1,
                              name, status]);
        },

				sendPartyKick: function(name) {
            this.sendMessage([Types.Messages.CS_PARTY, 2,
                              name, 0]);
        },

				sendPartyLeader: function(name) {
            this.sendMessage([Types.Messages.CS_PARTY, 3,
                              name, 0]);
        },

        sendPartyLeave: function() {
            this.sendMessage([Types.Messages.CS_PARTY, 4, '', 0]);
        },

				sendHarvest: function(x, y) {
            this.sendMessage([Types.Messages.CS_HARVEST, x, y]);
        },

				sendHarvestEntity: function(entity) {
            this.sendMessage([Types.Messages.CS_USE_NODE, entity.id]);
        },


  });
  return GameClient;
});


define('text!data/../../shared/data/skills2.json', function () { return '[\r\n{\r\n    "name":"Beserker",\r\n    "skillType":0,\r\n    "recharge": 30,\r\n    "iconOffset": [1,7],\r\n    "detail": "Beserker [l] - Boosts your attack by 3xlevel for 10 seconds,",\r\n    "targetType": 0,\r\n    "duration": 10,\r\n    "effects": [[0, 0, 2, 3],[0, 1, 2, -3]]\r\n},\r\n{\r\n    "name":"Explosive Attack",\r\n    "skillType":2,\r\n    "recharge":10,\r\n    "iconOffset": [3,12],\r\n    "detail": "Explosive Attack [l] - AOE NOT IMPLEMENTED",\r\n    "targetType": 1,\r\n    "countTotal": 1,\r\n    "aoe": 3,\r\n    "effects": [[1, 0, 4, 50]]\r\n},\r\n{\r\n    "name":"Deadly Attack",\r\n    "skillType":2,\r\n    "recharge":10,\r\n    "iconOffset": [4,7],\r\n    "detail": "Deadly Attack [l] - Does an attack of 150 damage per level.",\r\n    "targetType": 1,\r\n    "countTotal": 1,\r\n    "effects": [[1, 0, 4, 150]]\r\n},\r\n{\r\n    "name":"Daze",\r\n    "skillType":1,\r\n    "recharge":30,\r\n    "iconOffset": [0,12],\r\n    "detail": "Daze [l] - Dazes the target for [dpl]% seconds.",\r\n    "targetType": 1,\r\n    "durationPL": 1,\r\n    "effects": [[1, 0, 5, 1],[1, 1, 5, 0]]\r\n},\r\n{\r\n    "name":"Slow",\r\n    "skillType":1,\r\n    "recharge":20,\r\n    "iconOffset": [3,5],\r\n    "detail": "Slow [l] - Slows target for [dpl]% seconds.",\r\n    "targetType": 1,\r\n    "durationPL": 1,\r\n    "effects": [[1, 0, 6, 100],[1, 1, 6, -100]]\r\n}\r\n\r\n]\r\n';});

/* global Types */
EffectType = Class.extend({
  init: function (isTarget, phase, stat, modValue) {
    this.entity = null;
    this.isTarget = isTarget;
    this.phase = phase;
    this.stat = stat;
    this.modValue = modValue || 0;
    this.active = false;
  }
});

var getSkillEffects = function (data) {
	var effects = [];
	for (rec in data) {
		effects.push(new EffectType((rec[0] == 1), rec[1], rec[2], rec[3]));
	}
};

define('data/skilldata',['text!../../shared/data/skills2.json'], function(SkillsJSON) {
	Skill = {};
	Skill.Data = [];
	//Skill.Names = {};
	//Skill.Ordered = [];
	var skillsParse = JSON.parse(SkillsJSON);
	//var i = 0;
	for (var i in skillsParse)
	{
		var value = skillsParse[i];

		//if (value === "undefined") continue;
		console.info(JSON.stringify(value));
		Skill.Data.push({
			name:value.name,
			iconOffset: value.iconOffset,
			detail: value.detail,
	    skillType:value.skillType,
	    targetType: value.targetType ? value.targetType : 0,
	    duration:value.duration ? value.duration : 0,
			durationPL:value.durationPL ? value.durationPL : 0,
	    recharge: value.recharge ? value.recharge*1000 : 0,
	    aoe: value.aoe ? value.aoe : 0,
			countTotal: value.countTotal ? value.countTotal : 0,
			effectTypes: getSkillEffects(value.effects)
		});
		//Skill.Names[value.name] = Skill.Data[i];
		//Skill.Ordered[j++] = Skill.Data[i];
	}

  Skill.jqShowSkill = function (jq, skillId, jqn) {
    var scale = 3;
    var position = Skill.Data[skillId].iconOffset;
    jq.css({
      'background-size': 'auto',
      'background-image': 'url("img/' + scale + '/misc/skillicons.png")',
      'background-position': (-position[0] * 24 * scale) + "px " + (-position[1] * 24 * scale) + "px",
      'background-repeat': 'no-repeat'
    });
    if (jqn) {
      jqn.html("");
		}
  };

	log.info(JSON.stringify(Skill));
  return Skill;
});

define('skillhandler',['entity/mob', 'data/skilldata', 'entity/character'], function(Mob, SkillData, Character) {

  var Skill = Class.extend({
    init: function(skillId) {
      this.level = 0;
      this.slots = [];
      this.skillId = skillId;
      this.data = SkillData.Data[skillId];
    },

    getName: function() {
      return this.skillData.name;
    },
    getLevel: function() {
      return this.level;
    },
    setLevel: function(value) {
      this.level = value;

      /*for(var index = 0; index < this.slots.length; index++) {
          this.slots[index].setLevel(value);
      }*/
    },

    clear: function() {},
    add: function(slot) {
      this.slots.push(slot);
    },
    remove: function(slot) {
      var index = this.slots.indexOf(slot);
      if (index >= 0) {
        this.slots.splice(index, 1);
      }
    }
  });
  var SkillPassive = Skill.extend({});
  var SkillActive = Skill.extend({
    init: function(skillId) {
      this._super(skillId);

      this.cooltime = this.data.recharge / 1000;
      this.cooltimeCounter = 0;
      this.cooltimeTickHandle = null;
      this.cooltimeDoneHandle = null;

      this.executingHandler = null;
    },

    clear: function() {
      if (this.cooltimeTickHandle) {
        clearInterval(this.cooltimeTickHandle);
        this.cooltimeTickHandle = null;
      }
      if (this.cooltimeDoneHandle) {
        clearTimeout(this.cooltimeDoneHandle);
        this.cooltimeDoneHandle = null;
      }
    },
    execute: function() {
      var self = this;

      if (this.cooltimeDoneHandle) {
        game.chathandler.addNotification('Wait for cooldown.');
        return;
      }
      if (this.data.skillType == 2) {
        if (!this.cooltimeDoneHandle &&
          game.player.hasTarget() &&
          game.player.target instanceof Character) {
          if (this.execute_callback)
            this.execute_callback(self, game);
          else
            game.makePlayerAttack(game.player.target, this.skillId);
        } else {
          game.chathandler.addNotification('No target chosen.');
          return false;
        }
      } else if (this.data.skillType == 1) {
        if (!this.cooltimeDoneHandle &&
          game.player.hasTarget() &&
          game.player.target instanceof Character) {
          if (this.execute_callback)
            this.execute_callback(self, game);
          else {
            game.client.sendSkill(this.skillId, game.player.target.id);
          }
        } else {
          game.chathandler.addNotification('No target chosen.');
          return false;
        }
      } else if (this.data.skillType == 0) {
        if (!this.cooltimeDoneHandle)
          if (this.execute_callback) {
            log.info("execute_callback");
            this.execute_callback(self, game);
          }
        else {
          game.client.sendSkill(this.skillId, 0);
        }
      }

      this.cooldown(this.cooltime);

      //game.player.skillHandler.cooldownSlots(this);


      //log.info("this.name="+this.name);
      game.player.skillHandler.pushActiveSkill(this);
      return true;
    },

    cooldown: function (time) {
      var self = this;

      this.cooltimeCounter = time;

      var funcCooldown = function () {
        if (self.cooltimeCounter >= 0) {
          self.cooltimeCounter -= 1;

          for (var slot of self.slots) {
            slot.tick(self);
            if (self.cooltimeCounter == 0)
              slot.done();
          }
        } else {
          clearInterval(self.cooltimeTickHandle);
          self.cooltimeTickHandle = null;
        }
      };

      clearTimeout(this.cooltimeTickHandle);
      this.cooltimeTickHandle = setInterval(funcCooldown, 1000);

      funcCooldown();
    },

    tick: function(game) {},

    done: function(game) { self.cooltimeCounter = 0; },

    onExecuting: function(handler) {
      this.executingHandler = handler;
    }
  });


  var SkillFactory = {
    make: function(index) {
      if (index in SkillFactory.Skills) {
        return new SkillFactory.Skills[index](index);
      } else {
        return null;
      }
    }
  };

  SkillFactory.Skills = {};
  for (var i = 0; i < SkillData.Data.length; ++i) {
    var skillName = SkillData.Data[i].name;
    //log.info("skillName=" + skillName);
    SkillFactory.Skills[i] = SkillActive;
  };
  log.info("SKillFactory.Skills:" + JSON.stringify(SkillFactory.Skills));

  var SkillSlot = Class.extend({
    init: function(parent, index, skillId) {
      //this.game = game;
      this.parent = parent;
      this.index = parseInt(index);
      this.skillId = parseInt(skillId);
      this.background = $('#skill'+ index);
      this.body = $('#skill'+ index + 'Body');
      this.cooltime = $('#skill' + index + 'Cooltime');
      this.levels = [];
      this.data = SkillData.Data[skillId];

      if (game.renderer.tablet || game.renderer.mobile) {
        this.body.html("");
      }

      var self = this;
      this.body.data('slot', this.index);

      this.background.bind('click tap'), function (event) {
        self.body.trigger("click");
      }

      this.assign(skillId);

      var onShortcut = function (slot) {
        if (ShortcutData)
        {
          var index = ShortcutData.index;
          slot = parseInt(slot);
          index = parseInt(index);
          //game.client.sendSkillInstall(slot, index);
          game.shortcuts.install(2, slot, index);
          //game.player.skillHandler.install(slot, index);
          game.skillDialog.page.clearHighlight();
          ShortcutData = null;
        }
      };

      this.body.on('click tap', function(event) {
        log.info("click");
        if (!ShortcutData)
          self.execute();
        else
          onShortcut($(this).data('slot'));
        event.stopPropagation();
      });

      this.body.unbind('dragover').bind('dragover', function(event) {
          event.preventDefault();
      });
      this.body.unbind('drop').bind('drop', function(event) {
        onShortcut($(this).data('slot'));
      });
    },

    clear: function() {
      if (this.skill) {
        this.skill.clear();
        this.cooltime.css('display', 'none');
      }
    },
    hideShortcut: function() {
      this.body.css({
        'background-image': '',
        'background-position': ''
      });
      this.body.attr('title', '');
    },

    displayShortcut: function() {
      if (this.skill) {
        var scale = game.renderer.mobile ? 1 : game.renderer.getUiScaleFactor();
        var position = this.data.iconOffset;
        log.info("this.name=" + this.data.name);
        this.body.css({
          'background-image': 'url("img/' + scale + '/misc/skillicons.png")',
          'background-position': (-position[0] * 24 * scale) + "px " + (-position[1] * 24 * scale) + "px",
          'background-repeat': 'no-repeat'
        });
      }
    },

    assign: function(skillId) {
      if (this.skill) {
        this.skill.remove(this);
      }

      this.skill = this.parent.getSkill(skillId);
      if (this.skill) {
        this.skill.add(this);

        //var self = this;
        var scale = game.renderer.getScaleFactor();
        this.displayShortcut();
        this.body.attr('title', name);

        this.setLevel(this.skill.level);

        /*if ((this.skill instanceof SkillActive) && this.skill.cooltimeDoneHandle) {
          this.execute_(this.skill);
        }*/

        //var counter = this.skill.cooltimeCounter;
        //if (counter > 0)
          //this.cooldown(counter);

      } else {
        this.body.css({
          'background-image': '',
          'background-position': ''
        });
        this.body.attr('title', '');
      }
    },
    execute: function() {
      var executed;

      if (!this.skill)
        return false;
      /*for (var slotSkill of this.parent.skillSlots) {
        if (slotSkill.skillId != this.skillId) continue;
          slotSkill.cooltime.css('display', 'none');
      }*/

      if (this.skill && (this.skill instanceof SkillActive)) {
        return this.skill.execute(this.parent.game);

        //if (executed)
        //this.cooldown(this.skill.cooltimeCounter);
      }

      /*for (var slot of this.skill.slots) {
        //if (slot.skillId != this.skillId)
          //continue;
        slot.cooldown(this.skill.cooltimeCounter);
      }*/
    },

    execute_: function(skill) {
      /*if (skill.cooltime > 0) {
        this.cooltime.css('display', 'block');
        this.tick(skill);
      }*/
    },
    /*cooldown: function(time) {
      if (time > 0) {
        //clearInterval(this.skill.cooltimeTickHandle);
        //if (time < 2) time = 2;
        this.skill.cooltimeCounter = time;
        this.cooltime.css('display', 'block');
        this.cooltime.html('' + time.toFixed(0));
        //this.skill.cooldown(time);
        //this.tick(this.skill);
      }
    },*/
    tick: function(skill) {
      //var timeLeft = skill.cooltimeCounter.toFixed(0);
      //this.cooltime.html('' + timeLeft);
    },

    done: function () {
      //this.cooltime.css('display', 'none');
    }
  });

  var SkillHandler = Class.extend({
    init: function(game) {
      this.game = game;
      this.skills = [];
      this.container = $('#skillcontainer');
      this.activeSkills = [];

      //for (var index = 0; index < 6; index++) {
        //this.skillSlots.push(new SkillSlot(this.game, this, index, -1));
        //this.skillSlots[index].assign();
      //}

      var self = this;
      self.isDragging = false;

      this.container.bind("touchstart", function(ev) {
        self.isClicked = true;
      });
      this.container.mousedown(function() {
        self.isClicked = true;
      });

      this.container.mousemove(function() {
        self.isDragging = true;
      });

      this.container.mouseup(function(event) {
        self.isDragging = false;
        self.isClicked = false;
      });
      this.container.bind("touchend", function(ev) {
        self.isDragging = false;
        self.isClicked = false;
      });

    },

    moveShortcuts: function() {
      this.container.css({
        "left": this.game.mouse.x + "px",
        "top": this.game.mouse.y + "px"
      });
    },

    displayShortcuts: function() {
    },

    hideShortcuts: function() {

    },

    getSkill: function(skillId) {
      log.info("skillId="+skillId);
      return this.skills.In(skillId) ? this.skills[skillId] : null;
    },

    clear: function() {
    },

    addAll: function (skillExps) {
      sl = skillExps.length;
      for(var i = 0; i < sl; ++i)
      {
        this.add(i, skillExps[i]);
      }
    },

    add: function(skillId, exp) {
      //log.info("skillId:" + skillId);
      var skill = null;
      if (skillId in this.skills) {
        skill = this.skills[skillId];
      } else {
        skill = SkillFactory.make(skillId);
        //log.info("skill=" + JSON.stringify(skill));
        if (skill) {
          if (skill instanceof SkillActive) {
            var self = this;
            skill.onExecuting(function(sender) {
              self.game.chathandler.addNotification('You have to wait for ' + sender.name + ' to cool down.');
            });
          }
          this.skills[skillId] = skill;
        }
      }
      if (skill) {
        skill.setLevel(Types.getSkillLevel(exp));
      }
      //alert(JSON.stringify(this.skills));
    },

// TODO FIX BROKEN AS FUCK!!


    /*execute: function(index) {
      //var index = [81, 69, 82, 84].indexOf(key); // q, e, r, t
      var executed = this.skillSlots[index].execute();
      if (executed)
      {
        for (var i = 0; i < this.skillSlots.length; i++) {
          if (i != index) continue;
          if (this.skillSlots[i].skill && this.skillSlots[i].skill.cooltimeCounter < 2)
            this.skillSlots[i].cooldown(2);
        }
      }
    },*/

    pushActiveSkill: function(activeSkill) {
      this.activeSkills.push(activeSkill);
    },
    showActiveSkill: function() {
      /*var skill = this.activeSkills.shift();
      if (!skill)
        return;

      var scale = game.renderer.getIconScaleFactor();
      var position = skill.data.iconOffset;

      $("#currentSkill").css({
        'background-image': 'url("img/' + scale + '/misc/skillicons.png")',
        'background-position': (-position[0] * 24 * scale * 0.75) + "px " + (-position[1] * 24 * scale * 0.75) + "px",
        'background-repeat': 'no-repeat',
        'background-size': (360 * 0.75) + "px " + (336 * 0.75) + "px"
      });
      if (!$("#currentSkill").is(":visible"))
        $("#currentSkill").fadeIn(500);

      if ($("#currentSkill").is(":visible"))
        $("#currentSkill").fadeOut(1000);*/
    }

  });

  return SkillHandler;
});


define('quest',['data/npcdata', 'data/questdata', 'data/mobdata', 'data/itemlootdata'],
  function(NpcData, QuestData, MobData, ItemLoot)
{
  var getQuestObject = function(arr) {
    var self = {};
    self.toArray = function (obj) {
      return [obj.type,
        obj.kind,
        obj.count];
    };
    self.toClient = function (obj) {
      return [obj.type,
        obj.kind,
        obj.count];
    }
    self.type = arr[0];
    self.kind = arr[1] || 0;
    self.count = arr[2] || 0;
    return self;
  };

    var Quest = Class.extend({
        init: function(arr) {
           this.update(arr);
        },

        update: function(arr) {
          var arr = arr.parseInt();

          this.id = arr[0];
          this.type = arr[1];
          this.npcQuestId = arr[2];
          this.count = arr[3];
          this.status = arr[4];
          this.data1 = arr[5];
          this.data2 = arr[6];
          if (!isNaN(arr[7]))
            this.object = getQuestObject([arr[7],arr[8],arr[9]]);
          this.object2 = null;
          if (arr.length == 13 && !isNaN(arr[10]))
            this.object2 = getQuestObject([arr[10],arr[11],arr[12]]);
          this.setDesc();
        },

        setDesc: function(desc) {
          var questType;

          var questLang = lang.data["QUESTS"][parseInt(this.id).toString()];
          var summaryIndex;
          if (questLang)
          {
            desc = desc || questLang[this.status];
          }
          else {
            switch (this.type) {
              case QuestType.HIDEANDSEEK:
                questType = "QUESTS_FIND";
                summaryIndex = "HIDEANDSEEK";
                break;
              case QuestType.KILLMOBKIND:
                questType = "QUESTS_MOB";
                summaryIndex = "KILLMOBKIND";
                break;
              case QuestType.GETITEMKIND:
                questType = "QUESTS_ITEM";
                summaryIndex = "GETITEMKIND";
                break;
              case QuestType.USENODE:
                questType = "QUESTS_NODE";
                summaryIndex = "USENODE";
                break;
            }
            var langData = lang.data[questType];
            desc = desc || langData[0][this.status];
          }
          if (!desc) {
            this.desc="";
            return;
          }

          if (!Array.isArray(desc))
            desc = [[0, desc]];

          var i=0;
          for (var d of desc)
          {
            var txt = Array.isArray(d) ? d[1] : d;
            txt = this.setTextTemplate(txt);
            desc[i++] = [Array.isArray(d) ? d[0] : 0, txt];
          }
          this.desc = desc;

          var sum = lang.data['QUEST_SUMMARY'];
          var summary = sum.hasOwnProperty(this.id) ? sum[this.id] : sum[summaryIndex];
          this.summary = this.setTextTemplate(summary);
        },

        setTextTemplate: function (txt) {
          if (this.type==QuestType.GETITEMKIND)
          {
            if (this.object2) {
              var itemLootData = ItemLoot[(this.object2.kind)];
              txt = txt.replace(/%name%/g, itemLootData.name.capitalizeFirstLetter());
              txt = txt.replace(/%count%/g, this.object2.count);
            }
            if (this.object) {
              var mobData = MobData.Kinds[this.object.kind];
              if (mobData)
                txt = txt.replace(/%name2%/g, mobData.key.capitalizeFirstLetter());
            }
          }
          if (this.type==QuestType.KILLMOBKIND)
          {
            if (this.object) {
              var mobData = MobData.Kinds[this.object.kind];
              txt = txt.replace(/%name%/g, mobData.key.capitalizeFirstLetter());
              txt = txt.replace(/%count%/g, this.object.count);
              //d = d.replace('%level%', mobData.minLevel);
            }
          }
          if (this.type==QuestType.HIDEANDSEEK)
          {
            if (this.object) {
              var npcData = NpcData.Kinds[this.object.kind];
              txt = txt.replace('%name%', npcData.name);
            }
          }
          if (this.type==QuestType.USENODE)
          {
            if (this.object) {
              txt = txt.replace(/%count%/g, this.object.count);
            }
          }
          txt = txt.replace('%count2%', this.count);
          return txt;
        }
    });
    return Quest;
});


define('achievement',[], function() {
  var getSummary = function (summary, data) {
    var repl = {};
    if (data.length > 0)
    {
      for (var i=0; i < data.length; ++i)
        repl["%"+(i)] = data[i];
      summary = summary.replace(/%\d+/g, function(all) {
         return repl[all] || all;
      });
    }
    return summary;
  };

    var Achievement = Class.extend({
        init: function(arr) {
           this.update(arr);
        },

        update: function(arr) {
          var arr = arr.parseInt();

          this.index = arr[0];
          this.type = arr[1];
          this.rank = arr[2] || 0;
          this.objectType = arr[3] || 0;
          this.objectKind = arr[4] || 0;
          this.count = arr[5] || 0;
          this.objectCount = arr[6] || 0;
          var objectCount = this.objectCount;
          if (objectCount >= 1000000)
            objectCount = Number(objectCount / 1000000).toFixed(1).replace(/[.,]0$/, "")+"M";
          else if (objectCount >= 1000)
            objectCount = Number(objectCount / 1000).toFixed(1).replace(/[.,]0$/, "")+"K";
          this.summary = lang.data["ACHIEVEMENTS_"+this.index].format(objectCount);
        },

    });
    return Achievement;
});


define('userclient',['gameclient', 'skillhandler', 'quest', 'config', 'achievement'], function(GameClient, SkillHandler, Quest, config, Achievement) {
  var UserClient = Class.extend({
      init: function(config, useServer) {
        var self = this;

        this.connection = null;
        this.config = config;

        this.handlers = {};
        this.handlers[Types.Messages.BI_SYNCTIME] = this.onSyncTime;
        this.handlers[Types.Messages.SC_ERROR] = this.onError;
        this.handlers[Types.Messages.SC_VERSION] = this.onVersion;
        this.handlers[Types.Messages.SC_PLAYER] = this.onPlayer;
        this.handlers[Types.Messages.SC_PLAYER_SUM] = this.onPlayerSummary;
        this.handlers[Types.Messages.SC_WORLDS] = this.onWorlds;

        this.useBison = false;
        this.versionChecked = false;

        this.useServer = useServer;
        this.enable();

        this.connect();
      },

      enable: function() {
          this.isListening = true;
      },

      disable: function() {
          this.isListening = false;
      },

      connect: function() {
          var self = this;
          var url = this.config.protocol + "://"+ this.config.host +":"+ this.config.port +"/";

          log.info("Trying to connect to server : "+url);
          app.$loginInfo.text("Connecting to RRO2 server...");

          var self = this;
          /*$.get('./rro2.pem', function(data) {
              //alert(data);
              certLoaded(self, data);
          });*/

          //var certLoaded = function(self, data) {
            self.connection = io(url, {
              forceNew: true,
              reconnection: false,
              timeout: 10000,
              //secure: true,
              //transports: ['websocket','polling'],
              transports: ['websocket'],
              //rejectUnauthorized: false,
              //ca: data
            });

            self.connection.on('connect', function() {
              log.info("Connected to server "+self.config.host+":"+self.config.port);
              self.onConnected();
            });

            self.connection.on('connect_error', function(e) {
              self._onError(["There has been an error connecting to RSO server try again soon."]);
              log.error(e, true);
            });

            self.onMessage = function(e) {
              console.warn("recv: "+e);
              var data = e.split(",");
              self.receiveAction(data);
            }
            self.connection.on('message', this.onMessage);

            self.connection.on('error', function(e) {
              self._onError(["There has been an error connecting to RSO server try again soon."]);
              log.error(e, true);
            });

            self.connection.on('disconnect', function() {
                log.debug("Connection closed");
                if(self.disconnected_callback) {
                    if(self.isTimeout) {
                        self._onError(["You have been disconnected for being inactive for too long"]);
                    } else {
                        self._onError(["The connection to RRO2 has been lost."]);
                    }
                }
            });
          //};
      },

      receiveAction: function(data) {
          var action = data.shift();
          if(this.handlers[action] && _.isFunction(this.handlers[action])) {
              this.handlers[action].call(this, data);
          }
          else {
              log.error("Unknown action : " + action);
          }
      },

      sendMessage: function(json) {
          var data;
          if(this.connection.connected === true) {
            console.warn("sent=" + JSON.stringify(json));
            if(this.useBison) {
              data = BISON.encode(json);
            } else {
              data = JSON.stringify(json);
            }
          try {
              this.connection.send("1"+data);
          } catch (err) {
            console.log(err);
          }
        }
      },

      onConnected: function() {
        log.info("Starting client/server handshake");

        this.sendSyncTime();

        /*switch (this.initialAction)
        {
        case 1: // login user.
          log.info("sendLogin");
          client.sendLoginUser();
          break;
        case 2: // create user.
          client.sendCreateUser();
          break;
        }*/
      },

      onPlayerSummary: function (data) {
        user.setPlayerSummary(data);

        var count = user.playerSum.length;
        for (var i=0; i < count; ++i)
        {
          var ps = user.playerSum[i];
          var option = ps.name + " Lv" + Types.getLevel(ps.exp);

          var o = new Option(option, i);
          $('#player_select').append(o);
        }

        app.loadWindow('user_window', 'player_window');
        $('#player_select').focus();

        if (count > 0) {
          $('#player_select option[value="'+(count-1)+'"]').attr("selected",true);
          app.showPlayerLoad();
          //$('#player_create').show();
          //$('#player_load').show();
          //$('#player_select').show();
          //$('#lbl_player_select').show();
        }


        if (count == 0)
        {
          app.showPlayerCreate();
          //$('#player_create_form').show();
          //$('#player_select').hide();
          //$('#lbl_player_select').hide();
        }
        else
        {
          $('#player_create_form').hide();
        }
      },

      onWorlds: function (data) {
        for (var i = 0; i < data.length; i += 4)
        {
          $("#player_server").append("<option value="+data[i]+">"+
            data[i+1]+" "+data[i+2]+"/"+data[i+3]+"</option");
        }
        $('#user_create').removeClass('loading');
        $('#user_load').removeClass('loading');
        app.$loginInfo.text("Connected.");
      },

      _onError: function (data) {
          var message = data[0];
          /*if (message == 'playerexists') {
            app.addValidationError(null, 'The playername you entered is not available.');
            return;
          }*/

          $('#container').addClass('error');
          $('#errorwindow .errordetails').html("<p>"+message+"</p>");
          app.loadWindow('loginwindow','errorwindow');
      },

      onVersion: function(data) {
        //var self;
        this.versionChecked = true;
        var version = data[0];
        var hash = data[1];
        this.hashChallenge = hash;
        log.info("onVersion: hash="+hash);

        log.info("config.build.version="+config.build.version);
        if (version != config.build.version)
        {
          $('#container').addClass('error');
          var errmsg = "Please download the new version of RRO2.<br/>";

          if (game.renderer.isMobile) {
            errmsg += "<br/>For mobile see: " + config.build.updatepage;
          } else {
            errmsg += "<br/>For most browsers press Ctrl+F5 to reload the game cache files.";
          }
          game.clienterror_callback(errmsg);
          if (this.tablet || this.mobile)
            window.location.replace(config.build.updatepage);
        }
      },

      onSyncTime: function (data) {
        setWorldTime(parseInt(data[0]), parseInt(data[1]))
      },

      onError: function (data) {
        var error = data[0];

        switch(error) {
          case 'full':
          case 'invalidlogin':
          case 'userexists':
          case 'playerexists':
          case 'loggedin':
          case 'invalidusername':
          case 'ban':
          case 'passwordChanged':
          case 'timeout':
            app.info_callback(data);
            return;
          case 'timeout':
            app.info_callback(data);
            self.isTimeout = true;
            return;
        }
        this._onError(data);
      },

      onPlayer: function(data) {
          //setWorldTime(data[0], data[1]);
          data.shift();
          data.shift();

          var p = game.player;

          p.id = parseInt(data.shift());
          p.name = data.shift();
          p.mapIndex = parseInt(data.shift());
          p.orientation = Types.Orientations.DOWN;
          p.x = parseInt(data.shift()), p.y = parseInt(data.shift());
          p.setPositionSpawn(p.x, p.y);

          p.setMaxHP(parseInt(data.shift()));
          p.setMaxEP(parseInt(data.shift()));
          //p.setClass(parseInt(data.shift()));

          p.exp = {
            base: parseInt(data.shift()),
            attack: parseInt(data.shift()),
            defense: parseInt(data.shift()),
            move: parseInt(data.shift()),
            sword: parseInt(data.shift()),
            bow: parseInt(data.shift()),
            hammer: parseInt(data.shift()),
            axe: parseInt(data.shift()),
            logging: parseInt(data.shift()),
            mining: parseInt(data.shift())
          };

          p.level = {
            base: Types.getLevel(p.exp.base),
            attack: Types.getAttackLevel(p.exp.attack),
            defense: Types.getDefenseLevel(p.exp.defense),
            move: Types.getMoveLevel(p.exp.move),
            sword: Types.getWeaponLevel(p.exp.sword),
            bow: Types.getWeaponLevel(p.exp.bow),
            hammer: Types.getWeaponLevel(p.exp.hammer),
            axe: Types.getWeaponLevel(p.exp.axe),
          }
          p.colors = [];
          p.colors[0] = parseInt(data.shift());
          p.colors[1] = parseInt(data.shift());

          p.gold = [];
          p.gold[0] = parseInt(data.shift()); // inventory gold.
          p.gold[1] = parseInt(data.shift()); // bank gold.
          p.gems = parseInt(data.shift());

          game.inventoryHandler.setCurrency(p.gold[0], p.gems);
          game.bankHandler.setGold(p.gold[1]);

          p.setMoveRate(500-p.level.move)

          p.stats.attack = parseInt(data.shift());
          p.stats.defense = parseInt(data.shift());
          p.stats.health = parseInt(data.shift());
          p.stats.energy = parseInt(data.shift());
          p.stats.luck = parseInt(data.shift());
          p.stats.free = parseInt(data.shift());

          // TODO fix item inits, and skill functions.
          var itemCount = parseInt(data.shift());
          if (itemCount > 0)
          {
            var items = [];
            var itemArray = data.splice(0,(itemCount*6)).parseInt();
            for(var i=0; i < itemCount; ++i)
            {
              var index = i*6;
              var itemRoom = new ItemRoom(
                itemArray[index+0],
                itemArray[index+1],
                itemArray[index+2],
                itemArray[index+3],
                itemArray[index+4],
                itemArray[index+5],
              );
              items.push(itemRoom);
            }
            game.equipmentHandler.setEquipment(items);
          }

          p.sprites = [];
          p.sprites[0] = parseInt(data.shift());
          p.sprites[1] = parseInt(data.shift());

          p.setWeaponSprite();
          p.setArmorSprite();
          p.setRange();

          var itemCount = parseInt(data.shift());
          if (itemCount > 0)
          {
            var items = [];
            var itemArray = data.splice(0,(itemCount*6)).parseInt();
            for(var i=0; i < itemCount; ++i)
            {
              var index = i*6;
              var itemRoom = new ItemRoom(
                itemArray[index+0],
                itemArray[index+1],
                itemArray[index+2],
                itemArray[index+3],
                itemArray[index+4],
                itemArray[index+5],
              );
              items.push(itemRoom);
            }
            game.inventoryHandler.initInventory(items);
          }

          var itemCount = parseInt(data.shift());
          if (itemCount > 0)
          {
            var items = [];
            var itemArray = data.splice(0,(itemCount*6)).parseInt();
            for(var i=0; i < itemCount; ++i)
            {
                var index = i*6;
                var itemRoom = new ItemRoom(
                  itemArray[index+0],
                  itemArray[index+1],
                  itemArray[index+2],
                  itemArray[index+3],
                  itemArray[index+4],
                  itemArray[index+5],
                );
                items.push(itemRoom);
            }
            game.bankHandler.initBank(items);
          }

          p.quests = {};
          var questCount = parseInt(data.shift());
          if (questCount > 0)
          {
            var questArray = data.splice(0,(questCount*13));
            questArray.parseInt();
            for(var i=0; i < questCount; ++i)
            {
              var index = i*13;
              p.quests[questArray[index]] = new Quest(questArray.slice(index,index+13));
            }
          }

          p.achievements = [];
          var achieveCount = parseInt(data.shift());
          if (achieveCount > 0)
          {
            var achieveArray = data.splice(0,(achieveCount*7));
            achieveArray.parseInt();
            var achievement = null;
            for(var i=0; i < achieveCount; ++i)
            {
              var index = i*7;
              achievement = new Achievement(achieveArray.slice(index,index+7));
              p.achievements.push(achievement);
            }
            game.achievementHandler.achievementReloadLog();
          }

          p.skillHandler = new SkillHandler(self);

          var skillCount = parseInt(data.shift());
          var skillExps = data.splice(0,skillCount);
          skillExps.parseInt();
          p.setSkills(skillExps);
          game.skillDialog.page.setSkills(skillExps);


          var shortcutCount = parseInt(data.shift());
          if (shortcutCount > 0)
          {
            var shortcutArray = data.splice(0,(shortcutCount*3));
            shortcutArray.parseInt();
            var shortcuts = [];
            for(var i=0; i < shortcutCount; ++i)
            {
              var index = i*3;
              shortcuts.push(shortcutArray.slice(index,index+3));
            }
            game.shortcuts.installAll(shortcuts);
          }

          game.onPlayerLoad(p);
      },

      sendSyncTime: function() {
          log.info("sendSyncTime");
          this.sendMessage([Types.Messages.BI_SYNCTIME,Date.now()]);
      },

      sendLoginUser: function (user) {
        this.sendMessage([Types.Messages.CS_LOGIN_USER,
                          user.username,
                          user.hash]);
      },

      sendCreateUser: function (user) {
        this.sendMessage([Types.Messages.CS_CREATE_USER,
                          user.username,
                          user.hash]);
      },

      sendRemoveUser: function (user) {
        this.sendMessage([Types.Messages.CS_REMOVE_USER,
                          user.username,
                          user.hash]);
      },

      sendLoginPlayer: function (worldIndex, playerIndex) {
        this.sendMessage([Types.Messages.CS_LOGIN_PLAYER,
                          worldIndex,
                          playerIndex]);
      },

      sendCreatePlayer: function (worldIndex, playerName) {
        this.sendMessage([Types.Messages.CS_CREATE_PLAYER,
          worldIndex,
          playerName]);
      }

  });

  return UserClient;

});

(function() {/*
 A JavaScript implementation of the SHA family of hashes, as defined in FIPS
 PUB 180-2 as well as the corresponding HMAC implementation as defined in
 FIPS PUB 198a

 Copyright Brian Turek 2008-2012
 Distributed under the BSD License
 See http://caligatio.github.com/jsSHA/ for more information

 Several functions taken from Paul Johnson
*/
function k(a){throw a;}function s(a,e){var b=[],f=(1<<e)-1,c=a.length*e,d;for(d=0;d<c;d+=e)b[d>>>5]|=(a.charCodeAt(d/e)&f)<<32-e-d%32;return{value:b,binLen:c}}function u(a){var e=[],b=a.length,f,c;0!==b%2&&k("String of HEX type must be in byte increments");for(f=0;f<b;f+=2)c=parseInt(a.substr(f,2),16),isNaN(c)&&k("String of HEX type contains invalid characters"),e[f>>>3]|=c<<24-4*(f%8);return{value:e,binLen:4*b}}
function v(a){var e=[],b=0,f,c,d,g,h;-1===a.search(/^[a-zA-Z0-9=+\/]+$/)&&k("Invalid character in base-64 string");f=a.indexOf("=");a=a.replace(/\=/g,"");-1!==f&&f<a.length&&k("Invalid '=' found in base-64 string");for(c=0;c<a.length;c+=4){h=a.substr(c,4);for(d=g=0;d<h.length;d+=1)f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(h[d]),g|=f<<18-6*d;for(d=0;d<h.length-1;d+=1)e[b>>2]|=(g>>>16-8*d&255)<<24-8*(b%4),b+=1}return{value:e,binLen:8*b}}
function w(a,e){var b="",f=4*a.length,c,d;for(c=0;c<f;c+=1)d=a[c>>>2]>>>8*(3-c%4),b+="0123456789abcdef".charAt(d>>>4&15)+"0123456789abcdef".charAt(d&15);return e.outputUpper?b.toUpperCase():b}
function x(a,e){var b="",f=4*a.length,c,d,g;for(c=0;c<f;c+=3){g=(a[c>>>2]>>>8*(3-c%4)&255)<<16|(a[c+1>>>2]>>>8*(3-(c+1)%4)&255)<<8|a[c+2>>>2]>>>8*(3-(c+2)%4)&255;for(d=0;4>d;d+=1)b=8*c+6*d<=32*a.length?b+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(g>>>6*(3-d)&63):b+e.b64Pad}return b}
function y(a){var e={outputUpper:!1,b64Pad:"="};try{a.hasOwnProperty("outputUpper")&&(e.outputUpper=a.outputUpper),a.hasOwnProperty("b64Pad")&&(e.b64Pad=a.b64Pad)}catch(b){}"boolean"!==typeof e.outputUpper&&k("Invalid outputUpper formatting option");"string"!==typeof e.b64Pad&&k("Invalid b64Pad formatting option");return e}function z(a,e){var b=(a&65535)+(e&65535);return((a>>>16)+(e>>>16)+(b>>>16)&65535)<<16|b&65535}
function A(a,e,b,f,c){var d=(a&65535)+(e&65535)+(b&65535)+(f&65535)+(c&65535);return((a>>>16)+(e>>>16)+(b>>>16)+(f>>>16)+(c>>>16)+(d>>>16)&65535)<<16|d&65535}
function B(a,e){var b=[],f,c,d,g,h,C,t,j,D,l=[1732584193,4023233417,2562383102,271733878,3285377520],n=[1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,
1859775393,1859775393,1859775393,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782];a[e>>>5]|=128<<24-e%32;a[(e+
65>>>9<<4)+15]=e;D=a.length;for(t=0;t<D;t+=16){f=l[0];c=l[1];d=l[2];g=l[3];h=l[4];for(j=0;80>j;j+=1)b[j]=16>j?a[j+t]:(b[j-3]^b[j-8]^b[j-14]^b[j-16])<<1|(b[j-3]^b[j-8]^b[j-14]^b[j-16])>>>31,C=20>j?A(f<<5|f>>>27,c&d^~c&g,h,n[j],b[j]):40>j?A(f<<5|f>>>27,c^d^g,h,n[j],b[j]):60>j?A(f<<5|f>>>27,c&d^c&g^d&g,h,n[j],b[j]):A(f<<5|f>>>27,c^d^g,h,n[j],b[j]),h=g,g=d,d=c<<30|c>>>2,c=f,f=C;l[0]=z(f,l[0]);l[1]=z(c,l[1]);l[2]=z(d,l[2]);l[3]=z(g,l[3]);l[4]=z(h,l[4])}return l}
window.jsSHA=function(a,e,b){var f=null,c=0,d=[0],g=0,h=null,g="undefined"!==typeof b?b:8;8===g||16===g||k("charSize must be 8 or 16");"HEX"===e?(0!==a.length%2&&k("srcString of HEX type must be in byte increments"),h=u(a),c=h.binLen,d=h.value):"ASCII"===e||"TEXT"===e?(h=s(a,g),c=h.binLen,d=h.value):"B64"===e?(h=v(a),c=h.binLen,d=h.value):k("inputFormat must be HEX, TEXT, ASCII, or B64");this.getHash=function(b,a,e){var g=null,h=d.slice(),n="";switch(a){case "HEX":g=w;break;case "B64":g=x;break;default:k("format must be HEX or B64")}"SHA-1"===
b?(null===f&&(f=B(h,c)),n=g(f,y(e))):k("Chosen SHA variant is not supported");return n};this.getHMAC=function(b,a,e,f,h){var n,p,m,E,r,F,G=[],H=[],q=null;switch(f){case "HEX":n=w;break;case "B64":n=x;break;default:k("outputFormat must be HEX or B64")}"SHA-1"===e?(m=64,F=160):k("Chosen SHA variant is not supported");"HEX"===a?(q=u(b),r=q.binLen,p=q.value):"ASCII"===a||"TEXT"===a?(q=s(b,g),r=q.binLen,p=q.value):"B64"===a?(q=v(b),r=q.binLen,p=q.value):k("inputFormat must be HEX, TEXT, ASCII, or B64");
b=8*m;a=m/4-1;m<r/8?("SHA-1"===e?p=B(p,r):k("Unexpected error in HMAC implementation"),p[a]&=4294967040):m>r/8&&(p[a]&=4294967040);for(m=0;m<=a;m+=1)G[m]=p[m]^909522486,H[m]=p[m]^1549556828;"SHA-1"===e?E=B(H.concat(B(G.concat(d),b+c)),b+F):k("Unexpected error in HMAC implementation");return n(E,y(h))}};})();

define("lib/sha1", function(){});


function PlayerSummary(index, db_player) {
  this.index = index;
  this.name = db_player.name;
  //this.pClass = db_player.pClass;
  this.exp = db_player.exp || 0;
  this.colors = db_player.colors || [0,0];
  this.sprites = db_player.sprites || [0,0];
  return this;
}

PlayerSummary.prototype.toArray = function () {
  return [this.index,
    this.name,
    //this.pClass,
    this.exp,
    this.colors[0],
    this.colors[1],
    this.sprites[0],
    this.sprites[1]];
}

PlayerSummary.prototype.toString = function () {
    return this.toArray().join(",");
}

define('user',['userclient', 'entity/player', 'data/appearancedata', 'lib/sha1'],

// TODO - Make a thin user client that process User related packets back and forth.
function(UserClient, Player, AppearanceData) {

  var User = Class.extend({
      init: function(userclient, username, password) {
        this.client = userclient;
        this.username = username.toLowerCase();
        this.password = password;

        this.playerSum = [];

        var hashObj = new jsSHA(this.username+this.password, "ASCII").getHash("SHA-1","HEX");
        this.regHash = hashObj;
        //var hashChallenge = new jsSHA(this.client.hashChallenge, "ASCII");
        log.info("User init: hash="+hash);
        log.info("User init: hashChallenge="+this.client.hashChallenge);
        //var hash = new jsSHA(hashObj+this.client.hashChallenge, "ASCII");
        var hash = CryptoJS.AES.encrypt(JSON.stringify(hashObj), this.client.hashChallenge).toString();
        //log.info("hash="+hash.getHash("SHA-1","HEX"));
        //log.info("hashChallenge="+hashChallenge.getHash("SHA-1","HEX"));
        this.hash = this.hash || btoa(hash);

      },

      setPlayerSummary: function (data)
      {
        var count = parseInt(data.shift());
        for (var i=0; i < count; ++i)
        {
          j = (7 * i);

          var ps = new PlayerSummary(parseInt(data[j]), {
            name: data[j+1],
            //pClass: parseInt(data[j+2]),
            exp: parseInt(data[j+2]),
            colors: [data[j+3], data[j+4]],
            sprites: [data[j+5], data[j+6]]
          });
          this.playerSum.push(ps);
        }
      },

      createPlayer: function (ps)
      {
        this.playerSum[ps.index] = ps;
        var player = new Player(0, 1, 0, 0, ps.name);
        player.user = this;
        player.keyMove = false;

        player.setItems();

        player.forceStop = function () {
          if (this.keyMove && this.key_move_callback)
          {
            this.key_move_callback(false);
          }
          this.keyMove = false;
          this.freeze = false;
          //clearTimeout(this.moveTimeout);
          this._forceStop();

          this.idle();
          this.fsm = "IDLE";
        };

        player.canAttack = function(time) {
            if(this.isDead == false && this.attackCooldown.isOver(time)) {
                return true;
            }
            return false;
        };

        player.lookAtEntity = function (entity) {
          if (this.isMoving())
            this.forceStop();

          this._lookAtEntity(entity);
        };

        // Note - freeze might be needed disable for now.
        player.hit = function(orientation) {
          orientation = orientation || this.orientation;
          var self = this;

          if (this.fsm == "MOVEPATH") {
            return;
          }

          this.harvestOff();
          this.setOrientation(orientation || 0);

          this.forceStop();
          this.fsm = "ATTACK";
          this.animate("atk", this.atkSpeed, 1, function () {
            self.idle(self.orientation);
            self.forceStop();
          });
          return true;
        };

        player.canMove = function (orientation) {
          orientation = orientation || this.orientation;
          var pos = this.nextMove(this.x,this.y,orientation);
          if (orientation == 0)
            return true;
          return game.moveCharacter(this, pos[0], pos[1]);
        };

        player.sendMove = function (state) {
          if (state || this.sentMove != state) {
            game.client.sendMoveEntity(this, state);
            this.sentMove = state;
          }
        };

        player.moveTo_ = function(x, y, callback) {
          var self = this;

          if (this.fsm == "MOVEPATH") {
            return;
          }

          if (this.fsm == "ATTACK") {
            return;
          }

          this.forceStop();
          this.harvestOff();

          log.info("background - free delay =" + G_LATENCY);

          this.fsm = "MOVEPATH";
          this.walk();
          return this._moveTo(x, y, callback);
        };


        // TODO - FIX BUG Player sometimes jams and moves across with the wrong orientation.
        player.move = function (orientation, state) {
          var self = this;

          if (this.isDying || this.isDead)
            return;

          if (this.fsm == "ATTACK") {
            return;
          }

          if (this.fsm == "MOVEPATH") {
            return;
          }

          if (state && orientation != Types.Orientations.NONE)
          {
            if (this.keyMove && orientation == this.orientation) {
                return;
            }

            if (!this.canMove(orientation)) {
              //this.forceStop();
              return;
            }

            this.setOrientation(orientation);

            this.harvestOff();
            this.forceStop();

            this.fsm = "MOVING";

            this.walk();

            this.keyMove = true;
          }
          if (!state)
          {
            if (orientation != this.orientation && this.isMoving()) {
              return;
            }
            this.forceStop();
          }
          if (this.key_move_callback)
          {
            this.key_move_callback(state);
          }
        };

        player.setArmorSprite = function (sprite) {
          if (!sprite)
          {
            var id = this.sprites[0];
            sprite = game.sprites[AppearanceData[id].sprite];
          }
          this._setArmorSprite(sprite);
        };

        player.setWeaponSprite = function (sprite) {
          if (!sprite)
          {
            var id = this.sprites[1];
            sprite = game.sprites[AppearanceData[id].sprite];
          }
          this._setWeaponSprite(sprite);
        };

        game.addPlayerCallbacks(player);

        return player;
      },
  });

  return User;

});


/* global Mob, Types, Item, log, _, TRANSITIONEND, Class */

define('app',['lib/localforage', 'entity/mob', 'entity/item', 'data/mobdata', 'user', 'userclient', 'config'],
  function(localforage, Mob, Item, MobData, User, UserClient, config) {

    var App = Class.extend({
        init: function() {
            app = this;

            this.currentPage = 1;
            this.blinkInterval = null;
            this.ready = false;
            //this.watchNameInputInterval = setInterval(this.toggleButton.bind(this), 100);
            this.initFormFields();
            this.dropDialogPopuped = false;
            this.auctionsellDialogPopuped = false;

            this.inventoryNumber = 0;

            this.classNames = ["user_window",
            	"player_window"];
            this.loadWindow(this.classNames[1],this.classNames[0]);

      		   localforage.getItem('user_hash', function(e, val) {
      		   	   log.info("val="+val);
      			     $('#user_hash').value = val;
      		   });
      		   localforage.getItem('user_name', function(e, val) {
      		   	   log.info("val="+val);
      			     $('#user_name').value = val;
      		   });
      		   $('#user_password').value = "";

		        var self = this;

            this.$loginInfo = $('#loginInfo');

            $('#error_refresh').click(function(event){
            		location.reload();
            });

            $('#cmdQuit').click(function(event){
            		navigator.app.exitApp();
            });

            $('#user_remove').click(function (event) {
              $('#remove_window').show();
            });
            $('#user_close').click(function (event) {
              $('#remove_window').hide();
            });

            $('#user_remove_confirm').click(function (event) {
              var rpawd = $('#remove_confirm').val();
              if (rpawd === "YES")
              {
                if(confirm("DANGER - Remove your account PERMANENTLY?")) {
                  if (confirm("DANGER - Are you really sure to remove your account FOREVER?")) {
                    app.tryUserAction(3);
                    //location.reload();
                  }
                }
                $('#remove_window').hide();
              }
            });

            $('#player_window').ready(function () {
              $('#player_create_form').hide();
              $('#player_load').hide();
              $('#player_create').show();
            });

            $('#player_select').change(function () {
              if ($(this).val() == -1)
              {
                $('#player_load').hide();
                $('#player_create').show();
                $('#player_create_form').show();
              }
              else
              {
                $('#player_load').show();
                //$('#player_create').hide();
                $('#player_create_form').hide();
              }
            });

            $('#player_create').click(function () {
              if ($('#player_create_form').is(":visible"))
                self.tryPlayerAction(4);

              if ($('#player_name').val() == "")
              {
                app.showPlayerCreate();
                $('#player_name').focus();
                //$('#lbl_player_select').hide();
                //$('#player_select').hide();
                //$('#player_create_form').show();
                //$('#player_load').hide();
              }
            });

// TODO - revise below.
            this.info_callback = function(data) {
              switch(data[0]) {
                  case "timeout":
                      self.addValidationError(null, "Timeout whilst attempting to establish connection to RSO servers.");
                  break;

                  case 'invalidlogin':
                      // Login information was not correct (either username or password)
                      self.addValidationError(null, 'The username or password you entered is incorrect.');
                      //self.getUsernameField().focus();
                  break;

                  case 'userexists':
                      // Attempted to create a new user, but the username was taken
                      self.$loginInfo.text("Disconnected.");
                      self.addValidationError(null, 'The username you entered is not available.');
                  break;

                  case 'playerexists':
                      self.addValidationError(null, 'The playername you entered is not available.');
                  break;

                  case 'invalidusername':
                      // The username contains characters that are not allowed (rejected by the sanitizer)
                      self.addValidationError(null, 'The username you entered contains invalid characters.');
                  break;

                  case 'loggedin':
                      // Attempted to log in with the same user multiple times simultaneously
                      self.addValidationError(null, 'A player with the specified username is already logged in.');
                  break;

                  case 'ban':
                      self.addValidationError(null, 'You have been banned.');
                  break;

                  case 'full':
                      self.addValidationError(null, "All RRO2 gameservers are currently full.")
                  break;

                  default:
                      self.addValidationError(null, 'Failed to launch the game: ' + (result.reason ? result.reason : '(reason unknown)'));
                  break;
              }

            };

            this.start();
            this.connect();
        },

      connect: function() {
        //var self = this;
        //var callback = self.userClient;
        config.waitForConfig(this.userClient.bind(this));
      },

      userClient: function () {
        this.userclient = new UserClient(config.build, this.useServer);

        this.userclient.fail_callback = function(reason){
            self.info_callback({
                success: false,
                reason: reason
            });
            self.started = false;


        };
      },

        setGame: function(game) {
            game.client = game.client;

            this.isMobile = game.renderer.mobile;
            this.isTablet = game.renderer.tablet;
            this.isDesktop = !(this.isMobile || this.isTablet);
            this.supportsWorkers = !!window.Worker;
            this.ready = true;

            this.initMenuButton();
            this.initCombatBar();
        },

        initFormFields: function() {
            var self = this;

            this.getLoadUserButton = function() { return $('#user_load'); };
            this.getCreateUserButton = function() { return $('#user_create'); };
            this.getLoadPlayerButton = function() { return $('#player_load'); };
            this.getCreatePlayerButton = function() { return $('#player_create'); };
            this.getBackButton = function() { return $('#player_cancel'); };


            // Login form fields
            this.$usernameinput = $('#user_name');
            this.$userpasswordinput = $('#user_password');
            this.userFormFields = [this.$usernameinput, this.$userpasswordinput];


            // Create new character form fields
            this.$playernameinput = $('#player_name');
            this.playerFormFields = [this.$playernameinput];

        },

        center: function() {
            window.scrollTo(0, 1);
        },

        tryUserAction: function (action)
        {
          if(this.starting) return;        // Already loading
          var self = this;

          if (action > 0)
          {
            var username = this.$usernameinput.val();
            var userpw = (action == 3) ? $('#remove_password').val() : this.$userpasswordinput.val();
    		    var hash = null;
    		    if (userpw == '')
    		    	hash = $('#user_hash').val();
    		    log.info("hash="+hash);

            if(!this.validateUserForm(username, userpw)) return;

            user = this.user = new User(this.userclient, username, userpw);
            this.userclient.user = this.user;
            //user.rpassword = $('#remove_password').val();

            if ($('#user_save').is(':checked'))
            {
              localforage.setItem('user_name', username);
              localforage.setItem('user_hash', this.user.hash);
            }

            if (action == 1)
              this.userclient.sendLoginUser(this.user);
            if (action == 2)
              this.userclient.sendCreateUser(this.user);
            if (action == 3)
              this.userclient.sendRemoveUser(this.user);
          }
        },

        tryPlayerAction: function(action) {
          if(this.starting) return;        // Already loading

          var self = this;

          if (action == 3 || action == 4)
          {
    		    var username = this.$playernameinput.val();
            var playerIndex = parseInt($('#player_select').val());
            if(action == 4 && !this.validatePlayerForm(username)) return;

    		    //var pClass = parseInt($('#player_class').val());
            var server = parseInt($('#player_server').val());

            var ps = null;
            if (action == 3) {
              this.userclient.sendLoginPlayer(server, playerIndex);
              ps = user.playerSum[playerIndex];
            }
            if (action == 4) {
              this.userclient.sendCreatePlayer(server, username);
              ps = new PlayerSummary(user.playerSum.length, {name: username});
            }
            if (ps)
    		      this.startGame(server, ps);
          }
        },

        startGame: function(server, ps) {
            var self = this;

            $('#gameheading').css('display','none');

            if (game.started)
              return;

            log.debug("Starting game with build config.");

            game.useServer = server;

            this.center();

            game.run(server, ps);
            game.start();
        },

        start: function() {
            var self = this;
            this.getLoadUserButton().click(function () {
              if ($("#user_load").hasClass("loading"))
                return;
              self.tryUserAction(1); });
            this.getCreateUserButton().click(function () {
              if ($("#user_create").hasClass("loading"))
                return;
              self.tryUserAction(2);
            });
            this.getLoadPlayerButton().click(function () { self.tryPlayerAction(3); });
            //this.getCreatePlayerButton().click(function () {});
            this.getBackButton().click(function () {
              if ($('#player_load').is(":visible"))
                self.loadWindow('player_window', 'user_window');
              else {
                self.showPlayerLoad();
              }
            })
        },

        showPlayerLoad: function ()
        {
          $('#player_load').show();
          $('#player_select').show();
          $('#lbl_player_select').show();
          $('#player_create_form').hide();
        },

        showPlayerCreate: function ()
        {
          $('#player_load').hide();
          $('#player_select').hide();
          $('#lbl_player_select').hide();
          $('#player_create_form').show();
        },

        userFormActive: function() {
            return $('#user_window').is(":visible");
        },

        playerFormActive: function() {
            return $('#player_window').is(":visible");
        },

        /**
         * Performs some basic validation on the login / create new character forms (required fields are filled
         * out, passwords match, email looks valid). Assumes either the login or the create new character form
         * is currently active.
         */

        validateUserForm: function(username, userpw) {
            this.clearValidationErrors();

            if(!username) {
                this.addValidationError(this.$usernameinput, 'Please enter a username.');
                return false;
            }
            if (username.length < 2 && username.length > 16)
            {
              this.addValidationError(this.$usernameinput, 'Please enter a username between 2 and 16 characters.');
              return false;
            }
            if (username === username.replace(/^[A-Za-z0-9]+$/,''))
            {
              this.addValidationError(this.$usernameinput, 'Please enter username alpha numeric characters only.');
              return false;
            }

            if (userpw.length > 0)
            {
              if (userpw.length < 6 && userpw.length > 16)
              {
                this.addValidationError(this.$userpasswordinput, 'Please enter a username between 6 and 16 characters.');
                return false;
              }
              if (userpw === userpw.replace(/^[A-Za-z0-9@!#\$\^%&*()+=\-\[\]\\\';\.\/\{\}\|\":<>\? ]+$/,''))
              {
                this.addValidationError(this.$userpasswordinput, 'Please enter password alpha numeric, and special characters only.');
                return false;
              }
            }
            return true;
        },

        validatePlayerForm: function(playername) {
            this.clearValidationErrors();

            if(!playername) {
                this.addValidationError(this.$playernameinput, 'Please enter a player name.');
                return false;
            }
            if (playername.length < 2 && playername.length > 16)
            {
              this.addValidationError(this.$playernameinput, 'Please enter a player name between 2 and 16 characters.');
              return false;
            }
            if (playername === playername.replace(/^[A-Za-z0-9]+$/,''))
            {
              this.addValidationError(this.$playernameinput, 'Please enter player name alpha numeric characters only.');
              return false;
            }

            return true;
        },

        addValidationError: function(field, errorText) {
            $('<span/>', {
                'class': 'validation-error blink',
                text: errorText
            }).appendTo('.validation-summary');

            if(field) {
                field.addClass('field-error').select();
                field.keypress(function (event) {
                    field.removeClass('field-error');
                    $('.validation-error').remove();
                    $(this).unbind(event);
                });
            }
        },

        clearValidationErrors: function() {
            //var fields = this.loginFormActive() ? this.loginFormFields : this.createNewCharacterFormFields;
            var fields;
            if (this.userFormActive())
            	    fields = this.userFormFields;
            else if (this.playerFormActive())
            	    fields = this.playerFormFields;

            if (fields)
            {
      		    $.each(fields, function(i, field) {
          			if (field.hasClass('field-error'))
          			    field.removeClass('field-error');
          		    });
      		    $('.validation-error').remove();
            }
        },

        getZoom: function() {
            var zoom = game.renderer.zoom * game.renderer.scaleHUD;
            return zoom;
        },


        setMouseCoordinates: function(x, y) {
            var jqGame = $("#game");

            //var top = jqGame.offset().top;
            //var left = jqGame.offset().left;
// TODO Width and Height not clamping mouse properly.
            var scale = game.renderer.scale,
                width = game.renderer.innerWidth,
                height = game.renderer.innerHeight,
                mouse = game.mouse;

            //var zoom = game.renderer.resolution / game.renderer.renderer.resolution;
            var zoom = 1/game.renderer.resolution; //game.renderer.resolution / game.renderer.renderZoom; //   / game.renderer.resolution;
            //var zoom = game.renderer.resolution;

            width = ~~(width/zoom)-1;
            height = ~~(height/zoom)-1;

            mouse.x = ~~(clamp(x,0,width)*zoom/scale);
            mouse.y = ~~(clamp(y,0,height)*zoom/scale);

            //log.info(mouse.x+","+mouse.y);
        },

        initPlayerBar: function() {
            var self = this;
            var scale = 2,
                ts = game.renderer.tilesize,
                player = game.player;

            if (player && !Detect.isMobile()) {
    		    var weapon = player.getWeaponSprite();
    		    var armor = player.getArmorSprite();
            var zoom = 1.5;

    		    width1 = weapon ? weapon.width * scale * zoom : 0;
    		    height1 = weapon ? weapon.height * scale * zoom : 0;

    		    width2 = armor ? armor.width * scale * zoom : 0;
    		    height2 = armor ? armor.height * scale * zoom : 0;

    		    width3 = Math.max(width1, width2);
    		    height3 = Math.max(height1, height2);

            var jqLook = $('#characterLook2');
            var jqArmor = $('#characterLookArmor2');
            var jqWeapon = $('#characterLookWeapon2');

    		    switch (scale) {
        			case 1:
        			    jqLook.css('left', (- parseInt(width3 / 2)) + 'px');
        			    jqLook.css('top', (- parseInt(height3 / 2)) + 'px');
        			    break;
        			case 2:
        			    jqLook.css('left', (- parseInt(width3 / 2)) + 'px');
        			    jqLook.css('top', (- parseInt(height3 / 2)) + 'px');
        			    break;
        			case 3:
        			    jqLook.css('left', (- parseInt(width3 / 2)) + 'px');
        			    jqLook.css('top', (- parseInt(height3 / 2)) + 'px');
        			    break;
    		    }


    		    jqLook.css('width', '' + width3 + 'px');
    		    jqLook.css('height', '' + height3 + 'px');

    		    jqArmor.css('left', '' + parseInt((width3 - width2) / 2) + 'px');
    		    jqArmor.css('top', '' + parseInt((height3 - height2) / 2) + 'px');
    		    jqArmor.css('width', '' + width2 + 'px');
    		    jqArmor.css('height', '' + height2 + 'px');
    		    jqArmor.css('background-size', '' + (width2 * 5) + 'px');
    		    jqArmor.css('background-position', '0px -' + (height2 * 8) + 'px');

    		    jqWeapon.css('left', '' + parseInt((width3 - width1) / 2) + 'px');
    		    jqWeapon.css('top', '' + parseInt((height3 - height1) / 2) + 'px');
    		    jqWeapon.css('width', '' + width1 + 'px');
    		    jqWeapon.css('height', '' + height1 + 'px');
    		    jqWeapon.css('background-size', '' + (width1 * 5) + 'px');
    		    jqWeapon.css('background-position', '0px -' + (height1 * 8) + 'px');

    		    jqArmor.css('background-image', 'url("'+armor.filepath+'")');
    		    jqWeapon.css('background-image', 'url("'+weapon.filepath+'")');
            }
        },

        npcDialoguePic: function (entity) {
            var jqPic = $("#npcDialoguePic");
            var scale = 2;

    		    var sprite = entity.sprite;

            var anim = entity.sprite.animations["idle_down"];
            var oc = anim.col * anim.width * scale;
            var or = anim.row * anim.height * scale;
    		    width2 = sprite ? sprite.width * scale : 0;
    		    height2 = sprite ? sprite.height * scale : 0;

    		    jqPic.css('width', '' + ~~(width2) + 'px');
    		    jqPic.css('height', '' + ~~(height2*0.75) + 'px');
    		    jqPic.css('background-position', '-'+ ~~(oc) +'px -' + ~~(or) + 'px');
            jqPic.css('transform','scale(1.5)')

    		    jqPic.css('background-image', 'url("'+sprite.filepath+'")');
        },

        //Init the hud that makes it show what creature you are mousing over and attacking
        initTargetHud: function(){
          var self = this;
          var scale = game.renderer.getScaleFactor(),
              guiScale = game.renderer.getUiScaleFactor(),
          	  zoom = game.renderer.zoom,
              timeout,
              ts = game.renderer.tilesize;

          if (game.player) {
		        game.player.onSetTarget(function(target, name, level, mouseover)
            {
  		        var el = '#target';

    		    	//if (target.kind == 70) return; // Exclude Mimics.

        			if (target.title)
        			{
        				$(el+' .name').text(target.title);
        			}
        			else
        			{
        				$(el+' .name').text(name + "Lv"+level);
        			}

        			$(el+' .name').css('text-transform', 'capitalize');
        			if(target.healthPoints) {
        			    $(el+" .health").css('width', Math.round(target.healthPoints/target.maxHp*40*guiScale)+'px');
        			} else{
        			    $(el+" .health").css('width', 40*guiScale+"px");
        			}

        			$(el).fadeIn('fast');
		        });
          }

          game.onUpdateTarget(function(target){
          	log.info("targetHealth: "+target.healthPoints+" "+target.maxHp);
              //$("#target .health").css('width', Math.round(target.healthPoints/target.maxHp*90*scale)+'px');
              $("#target .health").css('width', Math.round(target.healthPoints/target.maxHp*40*guiScale)+'px');
              /*if(game.player.inspecting && game.player.inspecting.id === target.id){
                  $("#inspector .health").css('width', Math.floor(target.healthPoints/target.maxHp*100) + "%");
              }*/
          });

          if (game.player) {
    		    game.player.onRemoveTarget( function(targetId) {
      			$('#target').fadeOut('fast');
      			$("#target .health").css('width', (40*guiScale)+'px');

      			$('#combatContainer').fadeOut('fast');
		        });
          }
        },

        initEnergyBar: function() {
            var maxWidth = $("#statbars").width();

            game.onPlayerEnergyChange(function(ep, epMax) {
                maxWidth = $("#statbars").width();
                var barWidth = Math.round((maxWidth / epMax) * (ep > 0 ? ep : 0));
                $('#energy').css('width', barWidth + "px");
                $('#energytext').html("<p>Energy: " + ep + "/" + epMax + "</p>");
            });
        },

        initExpBar: function(){
            var maxWidth = parseInt($('#expbar').width());
			      var widthRate = 1.0;
            var self = this;

            game.onPlayerExpChange(function(level, exp){
              var prevLvlExp = Types.expForLevel[level-1];
              var expInThisLevel = exp - prevLvlExp;
              var expForLevelUp = Types.expForLevel[level] - prevLvlExp;

            	if (!expInThisLevel && !expForLevelUp)
            	{
            		$('#exp').css('width', "0px");
            		$('#expbar').attr("title", "Exp: 0%");
               		$('#expbar').html("Exp: 0%");
               		return;
                }

              maxWidth = parseInt($('#expbar').width());
            	var rate = expInThisLevel/expForLevelUp;
                    if(rate > 1){
                        rate = 1;
                    } else if(rate < 0){
                        rate = 0;
                    }
                $('#exp').css('width', 100*rate + "%");
               	$('#expbar').attr("title", "Exp: " + (rate*100).toFixed(0) + "%");
               	$('#expbar').html("Exp: " + (rate*100).toFixed(0) + "%");
               	$('#explevel').html(level);
            });
        },

        initHealthBar: function() {
      	    var healthMaxWidth = $("#statbars").width();
	          log.info("healthMaxWidth="+healthMaxWidth);

            game.onPlayerHealthChange(function(hp, maxHp) {
                healthMaxWidth = $("#statbars").width();
                var barWidth = Math.round((healthMaxWidth / maxHp) * (hp > 0 ? hp : 0));
                $("#health").css('width', barWidth + "px");
                $('#healthtext').html("<p>HP: " + hp + "/" + maxHp + "</p>");
            });

            game.onPlayerHurt(this.blinkHealthBar.bind(this));
        },


        blinkHealthBar: function() {
            var $hitpoints = $('#health');

            $hitpoints.addClass('white');
            setTimeout(function() {
                $hitpoints.removeClass('white');
            }, 500);
        },

        initMenuButton: function() {
        	var self = this;
        	log.info("initMenuButton");

			$( document ).ready(function() {
				$("#menucontainer").css("display", "none");
			});

        	$("#charactermenu").click(function(e) {
        		if ($("#menucontainer").is(':visible'))
        		{
        			$("#menucontainer").fadeOut();
              //if (game.gamepad)
                //game.gamepad.resetNavInterval(16);
    				}
    				else
    				{
    					$("#menucontainer").show();
              //if (game.gamepad)
                //game.gamepad.resetNavInterval(192);
    				}
    				//self.menuClicked = !self.menuClicked;
        	});

      $(window).resize(function() { app.resizeUi(); });
			$( document ).ready(function() {

				$("#menucontainer").on('click', 'div', function(e){
					$("#menucontainer").fadeOut();
				});
			});
        	$("#menucontainer").click(function(e){
				$("#menucontainer").fadeOut();
        	});
        },

        initCombatBar: function () {
        	var container = "#combatContainer";
      		$(container).children().click(function(e) {
      			$(container).children().removeClass('lightup');
      			$(this).addClass("lightup");
      		});
      		$(container).children().eq(1).addClass("lightup");
        },

        hideIntro: function() {
            clearInterval(this.watchNameInputInterval);
            $('body').removeClass('intro');
            setTimeout(function() {
                $('body').addClass('game');
            }, 500);
        },

        showChat: function() {
            if(game.started) {
                $('#chatbox').addClass('active');
                $('#chatinput').focus();
                //$('#chatbutton').addClass('active');
                $('#chatbutton').addClass('active');
            }
        },

        hideChat: function() {
            if(game.started) {
                $('#chatbox').removeClass('active');
                $('#chatinput').blur();
                //$('#chatbutton').removeClass('active');
                $('#chatbutton').removeClass('active');
            }
        },

        showChatLog: function() {
            if(game.started) {
                $('#chatbutton').addClass('active');
                $('#chatLog').css('display','none');
            }
        },

        hideChatLog: function() {
            if(game.started) {
                $('#chatbutton').removeClass('active');
                $('#chatLog').css('display','flex');
            }
        },

        showDropDialog: function(inventoryNumber) {
          if(game.started) {
            $('#dropDialog').show();
            $('#dropCount').focus();
            $('#dropCount').select();

            this.inventoryNumber = inventoryNumber;
            this.dropDialogPopuped = true;
          }
        },
        hideDropDialog: function() {
          if(game.started) {
            $('#dropDialog').hide();
            //$('#dropCount').blur();

            this.dropDialogPopuped = false;
          }
        },


        showAuctionSellDialog: function(inventoryNumber) {
          if(game.started) {
            $('#auctionSellDialog').show();
            $('#auctionSellCount').focus();
            $('#auctionSellCount').select();

            this.inventoryNumber = inventoryNumber;
            this.auctionsellDialogPopuped = true;
          }
        },
        hideAuctionSellDialog: function() {
          if(game.started) {
            $('#auctionSellDialog').hide();
            //$('#auctionSellCount').blur();

            this.auctionsellDialogPopuped = false;
          }
        },

        hideWindows: function() {
        },

        loadWindow: function(origin, destination) {
        	$('#'+origin).hide();
        	$('#'+destination).show();
          if (destination == "player_window")
            $('#user_remove').show();
          this.initFormFields();
        },

        resizeUi: function() {
            //log.error("resizeUi");
            if(game) {
                if(game.started) {
                    game.resize();
                    this.initHealthBar();
                    this.initTargetHud();
                    this.initExpBar();
                    this.initPlayerBar();
                    game.updateBars();
                } else {
                    var newScale = game.renderer.getScaleFactor();
                    game.renderer.rescale(newScale);

                }
            }
        },
    });

    return App;
});

define('entrypoint',['lib/sha1', 'util'],function() {

    var EntryPoint = Class.extend({
		init: function(){
			//"hashedID" ← use tools/sha1_encode.html to generate: function(){} ← action
			this.hashes = {
				"Obda3tBpL9VXsXsSsv5xB4QKNo4=": function(aGame){
					aGame.player.switchArmor(aGame.sprites["firefox"]);
					aGame.showNotification("You enter the game as a fox, but not invincible…");
				}
			};
		},
		
		execute: function(game){
			var res = false;
			var ID = getUrlVars()["entrance"];
			if(ID!=undefined){
				var shaObj = new jsSHA(ID, 'TEXT');
				var hash = shaObj.getHash("SHA-1", 'B64');
				if(this.hashes[hash]==undefined){
					game.showNotification("Nice try little scoundrel… bad code, though");
				}
				else{
					this.hashes[hash](game);
					res = true;
				}
			}
			return res;
		}
    });

    return EntryPoint;
});


define('text!data/../../shared/data/lang.json', function () { return '{\r\n  "EN": {\r\n    "BANK_FULL": "Bank is full.",\r\n    "EQUIPMENT_FULL": "Equipment is full.",\r\n    "INVENTORY_FULL": "Inventory is full.",\r\n    "ITEM_ADDED": "{0} added",\r\n    "GOLD_ADDED": "{0} gold added",\r\n    "GOLD_REMOVED": "{0} gold removed",\r\n\r\n    "EQUIPMENT_LEVEL": "You need to be level {0} to equip this.",\r\n    "EQUIPMENT_WRONGCLASS": "Your class cannot use this Item.",\r\n\r\n    "CHAT_MUTED": "You are currently muted.",\r\n\r\n    "MAP_ENTERED": "{0} has entered the {1} map.",\r\n\r\n    "NOTICE_1": "Go to the Google Play Store and rate Retro RPG Online!",\r\n\r\n    "TRADE_REQUESTED": "You requested a trade with {0}.",\r\n    "TRADE_REQUEST": "{0} has requested to trade you.",\r\n\r\n    "TUTORIAL_MOVE": "Click or Tap on land to move.",\r\n    "TUTORIAL_ATTACK": "Now click or tap on a Monster to attack",\r\n    "TUTORIAL_ATTACK2": "Thats it now kill more Monsters.",\r\n    "TUTORIAL_EQUIP": "Now I want to equip my brought gear by going into Menu Backpack and selecting it.",\r\n    "TUTORIAL_SHOPBUY": "I should find the Beginner Store by going to the menu and pressing Town.",\r\n    "TUTORIAL_SHOPBUY2": "I want to buy my first Armor and Weapon that is Level 10.",\r\n    "TUTORIAL_STATS": "You can now assign custom Stats in Menu >> Character >> 3rd Page (Character Stats),",\r\n    "TUTORIAL_PORTAL": "In the Town House move to the blue Portal near the bottom left.",\r\n\r\n    "SHOP_REPAIRED": "{0} item repaired.",\r\n    "SHOP_REMOVED": "{0} item removed.",\r\n    "SHOP_SOLD": "{0} has been sold.",\r\n    "SHOP_BUY": "{0} has been bought.",\r\n    "SHOP_ENCHANTED": "{0} has been enchanted.",\r\n    "SHOP_NOGOLD": "You don\'t have enough Gold.",\r\n    "SHOP_NOGEMS": "You don\'t have enough Gems.",\r\n    "SHOP_NOSPACE": "There is not enough space in your inventory.",\r\n    "SHOP_MISMATCH": "The price has been changed, please try again.",\r\n    "AUCTION_ADDED": "The auction item you listed has been added.",\r\n    "SHOP_NOCRAFTITEMS": "You do not have enough craft Items.",\r\n    "SHOP_MISSINGITEMS": "You are missing {0} {1}\'s",\r\n\r\n    "COMBAT_PLAYERKILLED": "/1 {0} killed {1} in combat.",\r\n    "COMBAT_TARGETINVINCIBLE": "Target is invincible.",\r\n\r\n    "GROUP_PLAYERLEFT": "{0} has left your group.",\r\n    "ATTACK_TOOFAR": "You are too far away to attack.",\r\n\r\n    "TUTORIAL": "TUTORIAL",\r\n    "TUTORIAL_1": "To Move, Mouse click on the Map or an Object, or use the WASD or arrow keys.",\r\n    "TUTORIAL_2": "To Attack, Mouse click on the Object or get in attack range and press Space bar.",\r\n    "TUTORIAL_3": "To Cycle Targets, use keys T to target the closest Object or Y to reverse target.",\r\n    "TUTORIAL_4": "You can use Keys 1-4 for Skill Shortcuts, and Keys 5-8 for consumables like Potions.",\r\n    "TUTORIAL_5": "If you need to buy items you can select Menu >> Town to instantly warp to Town.",\r\n    "TUTORIAL_6": "At level 10 you can equip Items in Menu >> Equipment, and at level 20 you can assign Stat Points.",\r\n\r\n    "ACHIEVEMENTS_0": "Kill {0} Monsters.",\r\n    "ACHIEVEMENTS_1": "Collect {0} Items.",\r\n    "ACHIEVEMENTS_2": "Do {0} Damage to Monsters.",\r\n    "ACHIEVEMENTS_3": "Mine {0} Nodes.",\r\n    "ACHIEVEMENTS_4": "Log {0} Trees.",\r\n    "ACHIEVEMENTS_5": "Interact with {0} Objects.",\r\n    "ACHIEVEMENTS_0_COMPLETE": "Achievement - Kill {0} Monsters Completed. {1}XP Added.",\r\n    "ACHIEVEMENTS_1_COMPLETE": "Achievement - Collect {0} Items Completed. {1}XP Added.",\r\n    "ACHIEVEMENTS_2_COMPLETE": "Achievement - Do {0} Damage to Monsters Completed. {1}XP Added.",\r\n    "ACHIEVEMENTS_3_COMPLETE": "Achievement - Mine {0} Nodes Completed. {1}XP Added.",\r\n    "ACHIEVEMENTS_4_COMPLETE": "Achievement - Log {0} Trees Completed. {1}XP Added.",\r\n    "ACHIEVEMENTS_5_COMPLETE": "Achievement - Interact with {0} Objects Completed. {1}XP Added.",\r\n\r\n    "PARTY_PLAYER_INVITE_SENT": "Party invite sent to player {0}",\r\n    "PARTY_MAX_PLAYERS": "Max players reached in party.",\r\n    "PARTY_PLAYER_JOINED": "{0} joined your party.",\r\n    "PARTY_PLAYER_ADDED": "You are now partied with {0}",\r\n    "PARTY_YOU_REJECTED_INVITE": "You rejected {0}\'s invite.",\r\n    "PARTY_THEY_REJECTED_INVITE": "{0} rejected your invite.",\r\n    "PARTY_CANNOT_KICK": "You cannot kick as you are not in a party or leader.",\r\n    "PARTY_PLAYER_KICKED": "You have been kicked from the party.",\r\n    "PARTY_NOT_LEADER": "You cannot set the leader as you are not in a party.",\r\n    "PARTY_YOU_LEADER": "You are now the leader.",\r\n    "PARTY_PLAYER_LEADER": "{0} is now leader.",\r\n    "PARTY_IS_LEADER": "{0} is already leader.",\r\n    "PARTY_NOT_IN": "You cannot leave as you are not in a party.",\r\n    "PARTY_PLAYER_LEFT": "{0} has left your party.",\r\n    "PARTY_YOU_LEFT": "You have left {0}\'s party.",\r\n    "PARTY_ALL_LEFT": "The party has been disbanded.",\r\n    "NO_PLAYER_EXIST": "Player {0} does not exist.",\r\n\r\n    "HARVEST_INVALID": "You cannot harvest at this point, use the right weapon, try somewhere else or again later.",\r\n    "HARVEST_ADDED": "{0} has been added to your inventory",\r\n    "HARVEST_WRONG_TYPE": "You cannot use this with a {0}.",\r\n    "HARVEST_NO_WEAPON": "You do not have a harvest item equipped.",\r\n\r\n    "DIALOGUE_1": [\r\n      [0, "You look lost young boy..."],\r\n      [1, "Where am I?"],\r\n      [0, "What do you mean where you are? Anyway I need help son."],\r\n      [0, "You see, young one, my house, well, it\'s not quite the welcoming place it used to be."],\r\n      [0, "It\'s overrun by rats, scurrying through every nook and cranny, making themselves right at home."],\r\n      [0, "It\'s a bit of a mess, I\'m afraid. Can you kill 10 rats for me, Sonny?"],\r\n      [0, "That way I can get into my home again.", "QUEST_1"]\r\n    ],\r\n    "DIALOGUE_2": [\r\n      [0, "Rats have stolen my 3 dice I need you to kill some Rats to get them.", "QUEST_2"]\r\n    ],\r\n    "DIALOGUE_3": [\r\n      [0, "Rats have stolen my tasty cheese.", "QUEST_3"]\r\n    ],\r\n    "DIALOGUE_4": [\r\n      [0, "Hello I was writing my memiors earlier.."],\r\n      [0, "When a pesky Crab stole my Feather Quilt."],\r\n      [0, "The problem is I don\'t know which one stole it"],\r\n      [0, "So I need you to kill and search all of them until it\'s found.", "QUEST_4"]\r\n    ],\r\n    "DIALOGUE_5": [\r\n      [0, "Crabs have overrun the place..", "QUEST_5"]\r\n    ],\r\n    "DIALOGUE_6": [\r\n      [0, "Fires were started by Goblins after they left the area"],\r\n      [0, "I need you to put out some fires so they don\'t get out of control.", "QUEST_6"]\r\n    ],\r\n\r\n    "DIALOGUE_7": [\r\n      [0, "The graveyard is overrun with Skeletons."],\r\n      [0, "I need you to remove the tombstones."],\r\n      [0, "This will prevent the evil wizards resurrecting people in graves.", "QUEST_7"]\r\n    ],\r\n\r\n    "QUESTS_NONE": [\r\n      [0, "I have no more quests for you, head {0} and look for {1}."],\r\n      [1, "Thanks {2}."]\r\n    ],\r\n\r\n    "QUESTS": {\r\n      "1": [\r\n          [\r\n            [0, "Thank you when you have completed this return to me."]\r\n          ],\r\n          ["Kill %count% %name%\'s"]\r\n      ],\r\n      "2": [\r\n        [\r\n          [0, "Please get the dice and return to me when complete."]\r\n        ],\r\n        ["Come back when you have my %count% %name%."],\r\n        [\r\n          [0, "Thank-you for returning my dice."],\r\n          [0, "I can now gamble hardcore with my lucky dice."],\r\n          [1, "Err, your welcome I guess..."]\r\n        ]\r\n      ],\r\n      "3": [\r\n          [\r\n            [0, "Can you please kill rats and return my cheese?"],\r\n            [0, "I need %count% pieces back to me."]\r\n          ],\r\n          ["Get %count% pieces of cheese."],\r\n          ["Thank-you for returning my cheese."]\r\n      ],\r\n      "4": [\r\n          [\r\n            [0, "Can you please kill Crabs and return my Feather Quill?"]\r\n          ],\r\n          ["Return my Feather Quill."],\r\n          [\r\n            [0,"Thank-you for returning my Feather Quill."],\r\n            [0,"I can now resume writing my memiors."]\r\n          ]\r\n      ],\r\n      "5": [\r\n          [\r\n            [0, "Kill %count% Crabs for me?"]\r\n          ],\r\n          ["Kill %count% Crabs."]\r\n      ],\r\n      "6": [\r\n          [\r\n            [0, "Can you destroy %count% fires?"]\r\n          ],\r\n          ["Destroy %count% fires."]\r\n      ],\r\n      "7": [\r\n          [\r\n            [0, "Can you destroy %count% tombstones for me?"]\r\n          ],\r\n          ["Destroy %count% tombstones."]\r\n      ]\r\n    },\r\n\r\n    "QUESTS_MOB": [\r\n        ["Kill %count% %name%\'s for me.",\r\n         "Have you killed %count% %name%s for me yet?"]\r\n    ],\r\n    "QUESTS_ITEM": [\r\n      ["%name2%\'s have stolen my %count% %name%s\'. I need you to kill %name2%\'s and get my %name%s\' back.",\r\n       "Have you got my %count% %name%\'s?",\r\n       "Thank you for returning my %name%\'s now I can use them."]\r\n\r\n    ],\r\n    "QUEST_SUMMARY": {\r\n      "HIDEANDSEEK": "Find %name%",\r\n      "KILLMOBKIND": "Kill %count% %name%s",\r\n      "GETITEMKIND": "Get %count% pieces of %name% from %name2%s",\r\n      "USENODE": "Use %count% %name%.",\r\n      "1": "Kill %count% %name%s",\r\n      "2": "Retrieve %count% %name%\'s from %name2%s",\r\n      "3": "Get %count% pieces of %name% from %name2%s",\r\n      "4": "Get the Feather Quill from %name%s",\r\n      "5": "Kill %count% %name%s",\r\n      "6": "Destroy %count% Fires.",\r\n      "7": "Destroy %count% Tombstones."\r\n    }\r\n  }\r\n}\r\n';});


define('data/langdata',['text!../../shared/data/lang.json'], function(LangJson) {
  	var LangData = JSON.parse(LangJson);
    var Lang = Class.extend({
        init: function (lang)
        {
          this.lang = lang;
          this.data = LangData[lang];
        }
    });
    return Lang;
});

define('button2',[],function() {
    function isUndefined(value) {

        return (typeof value) == 'undefined';
    }

    function isObject(value) {

        return (typeof value) == 'object';
    }

    function assign(target, source1, source2, items) {
        var index, item;
        for(index = 0; index < items.length; index++) {
            item = items[index];
            if(isObject(source1) && !isUndefined(source1[item])) {
                target[item] = source1[item];
            } else if(isObject(source2) && !isUndefined(source2[item])) {
                target[item] = source2[item];
            }
        }
    }

    function indexOf(array_, value, default_) {
        var result = array_.indexOf(value);
        return result >= 0 ? result : default_;
    }

    var Button2 = Class.extend({
        // kind - normal: 0, disabled: 1, downed: 2, overed: 3, blinked: 4
        init: function(id, configure) {
          this.id = id+"button";
          this.id2 = id+"text";
          this.background = {}
          assign(this.background, configure.background, Button2.configure.background, ['left', 'top', 'width']);
          this.kinds = isObject(configure.kinds) ? configure.kinds: (isObject(Button2.configure.kinds) ? Button2.configure.kinds : [0]);
          this.visible = isUndefined(configure.visible) ? true : configure.visible;
          this.enabled = isUndefined(configure.enabled) ? true : configure.enabled;
          this.downed = isUndefined(configure.downed) ? false : configure.downed;
          this.overed = false;
          this.blinked = false;
          this.blinkFlag = false;
          this.blinkHandle = null;
          this.body = $(this.id);
          this.bodytext = $(this.id2);
          /*this.body.css('display', this.visible ? 'inline-block' : 'none');*/
          this.kind = -1;
          this.clickHandler = null;

          this.refresh();

          this.body.bind('click', function(event) {
            if(this.enabled && this.clickHandler) {
              this.clickHandler(this, event);
            }
            //event.preventDefault();
            //event.stopPropagation();
            //return false;
          }.bind(this));
          this.bodytext.bind('click', function(event) {
            if(this.enabled && this.clickHandler) {
              this.clickHandler(this, event);
            }
            //event.preventDefault();
            //event.stopPropagation();
            //return false;
          }.bind(this));

          if(this.kinds.indexOf(3) >= 0) {
            this.body.unbind('mouseover').bind('mouseover', function(event) {
              this.overed = true;
              this.refresh();
            }.bind(this));
            this.body.unbind('mouseout').bind('mouseout', function(event) {
              this.overed = false;
              this.refresh();
            }.bind(this));
          }
        },

        /*setImage: function (image) {
        	if (this.body) {
        		this.body.css('background-image', 'url=("'+image+') !important');
        	}
        },*/

        setBackground: function(background) {
        	this.background = background;
        	this.kind = this.kind ? this.kind : 0;
        	this.setBackgroundPosition(this.kind);
        },

        getBackgroundPosition: function(kind) {
          var left = isUndefined(this.background.left) ? 0 : this.background.left,
              top = isUndefined(this.background.top) ? 0 : this.background.top,
              width = isUndefined(this.background.width) ? 25 : this.background.width,
              index = indexOf(this.kinds, kind, 0);
          return '-' + (left + (width * index)) + 'px -' + (top) + 'px';
        },
        setBackgroundPosition: function(kind) {
		this.kind = kind;
		this.body.css('background-position', this.getBackgroundPosition(kind));
        },

        refresh: function() {
          if(this.visible) {
            this.setBackgroundPosition(this.enabled ? (this.overed ? 3 : (this.downed ? 2 : (this.blinked ? (this.blinkFlag ? 4 : 0) : 0))) : 1);
          }
        },
        show: function() {
          this.visible = true;
          this.body.show();
        },
        hide: function() {
          this.visible = false;
          this.body.hide();
        },
        enable: function() {
          this.enabled = true;
          this.refresh();
        },
        disable: function() {
          if(this.blinked) {
            this.blink(false);
          }

          this.enabled = false;
          this.refresh();
        },
        down: function() {
          this.downed = true;
          if(this.enabled) {
            this.refresh();
          }
        },
        up: function() {
          this.downed = false;
          if(this.enabled) {
            this.refresh();
          }
        },
        blink: function(flag) {
          if(this.enabled) {
            if(flag) {
              if((this.kinds.indexOf(4) >= 0) && !this.blinked) {
                this.blinkFlag = false;
                this.blinkHandle = setInterval(function() {
                  this.blinkFlag = !this.blinkFlag;
                  this.refresh();
                }.bind(this), 500);
                this.blinked = true;
              }
            } else {
              if(this.blinked) {
                clearInterval(this.blinkHandle);
                this.blinkHandle = null;
                this.blinked = false;
                this.refresh();
              }
            }
          }
        },
        onClick: function(handler) {

            this.clickHandler = handler;
        }
    });
    Button2.configure = {};

    return Button2;
});

define('dialog/dialog',[],function() {
    var Dialog = Class.extend({
        init: function(game, id) {
            //this.game = game;
            this.id = id;
            this.body = $(id);
            this.visible = false;
        },

        addClose: function (closeEvent) {
          this.closeButton = $(this.id+' .frame-close-button');
          this.closeEvent = closeEvent;
        },

        show: function() {
            var self = this;

            if(this.showHandler){
                this.showHandler(this);
            }

            this.body.show();
            this.visible = true;
            this.showing = true;
            //$(this.id).css('display', 'block');
            if (game.gamepad)
              game.gamepad.dialogOpen();

            if (this.closeButton) {
              this.closeButton.click( function (e) {
                if (game.gamepad)
                  game.gamepad.dialogClose();
                if (self.closeEvent)
                  self.closeEvent(e);
              	self.hide();
              });
            }
        },

        hide: function() {
            this.visible = false;
            this.showing = false;
            //$(this.id).css('display', 'none');
            this.body.hide();

            if(this.hideHandler){
                this.hideHandler(this);
            }
        },

        onShow: function(handler) {
            this.showHandler = handler;
        },

        onHide: function(handler) {
            this.hideHandler = handler;
        }
    });

    return Dialog;
});


define('text!../shared/data/sprites.json', function () { return '[\r\n\t["adhererarcherarmor","armor/adhererarcherarmor.png"],\r\n\t["adhererrobe","armor/adhererrobe.png"],\r\n\t["adminarmor","armor/adminarmor.png"],\r\n\t["archerarmor","armor/archerarmor.png"],\r\n\t["archerschooluniform","armor/archerschooluniform.png"],\r\n\t["armorarcher1","armor/armorarcher1.png"],\r\n\t["bearseonbiarmor","armor/bearseonbiarmor.png"],\r\n\t["beearmor","armor/beearmor.png"],\r\n\t["beetlearmor","armor/beetlearmor.png"],\r\n\t["blackspiderarmor","armor/blackspiderarmor.png"],\r\n\t["bluedamboarmor","armor/bluedamboarmor.png"],\r\n\t["bluepiratearmor","armor/bluepiratearmor.png"],\r\n\t["bluewingarcherarmor","armor/bluewingarcherarmor.png"],\r\n\t["bluewingarmor","armor/bluewingarmor.png"],\r\n\t["burgerarmor","armor/burgerarmor.png"],\r\n\t["catarmor","armor/catarmor.png"],\r\n\t["cheoliarcherarmor","armor/cheoliarcherarmor.png"],\r\n\t["cheoliarmor","armor/cheoliarmor.png"],\r\n\t["christmasarmor","armor/christmasarmor.png"],\r\n\t["clotharmor","armor/clotharmor.png"],\r\n\t["cockroachsuit","armor/cockroachsuit.png"],\r\n\t["cokearmor","armor/cokearmor.png"],\r\n\t["combatuniform","armor/combatuniform.png"],\r\n\t["crystalarcherarmor","armor/crystalarcherarmor.png"],\r\n\t["crystalarmor","armor/crystalarmor.png"],\r\n\t["cursedhahoemask","armor/cursedhahoemask.png"],\r\n\t["damboarmor","armor/damboarmor.png"],\r\n\t["devilkazyaarmor","armor/devilkazyaarmor.png"],\r\n\t["dinosaurarmor","armor/dinosaurarmor.png"],\r\n\t["dovakinarcherarmor","armor/dovakinarcherarmor.png"],\r\n\t["dovakinarmor","armor/dovakinarmor.png"],\r\n\t["dragonarmor","armor/dragonarmor.png"],\r\n\t["enelarmor","armor/enelarmor.png"],\r\n\t["evilarmor","armor/evilarmor.png"],\r\n\t["fallenarcherarmor","armor/fallenarcherarmor.png"],\r\n\t["fallenarmor","armor/fallenarmor.png"],\r\n\t["firefox","armor/firefox.png"],\r\n\t["frankensteinarmor","armor/frankensteinarmor.png"],\r\n\t["friedpotatoarmor","armor/friedpotatoarmor.png"],\r\n\t["frogarmor","armor/frogarmor.png"],\r\n\t["frostarmor","armor/frostarmor.png"],\r\n\t["gayarcherarmor","armor/gayarcherarmor.png"],\r\n\t["gayarmor","armor/gayarmor.png"],\r\n\t["gbwingarcherarmor","armor/gbwingarcherarmor.png"],\r\n\t["gbwingarmor","armor/gbwingarmor.png"],\r\n\t["goldenarcherarmor","armor/goldenarcherarmor.png"],\r\n\t["goldenarmor","armor/goldenarmor.png"],\r\n\t["greenarcherarmor","armor/greenarcherarmor.png"],\r\n\t["greenarmor","armor/greenarmor.png"],\r\n\t["greendamboarmor","armor/greendamboarmor.png"],\r\n\t["greenwingarcherarmor","armor/greenwingarcherarmor.png"],\r\n\t["greenwingarmor","armor/greenwingarmor.png"],\r\n\t["guardarcherarmor","armor/guardarcherarmor.png"],\r\n\t["guardarmor","armor/guardarmor.png"],\r\n\t["halloweenjkarmor","armor/halloweenjkarmor.png"],\r\n\t["hongcheolarmor","armor/hongcheolarmor.png"],\r\n\t["huniarmor","armor/huniarmor.png"],\r\n\t["ironknightarmor","armor/ironknightarmor.png"],\r\n\t["leatherarcherarmor","armor/leatherarcherarmor.png"],\r\n\t["leatherarmor","armor/leatherarmor.png"],\r\n\t["legolasarmor","armor/legolasarmor.png"],\r\n\t["livingarmor","armor/livingarmor.png"],\r\n\t["mailarcherarmor","armor/mailarcherarmor.png"],\r\n\t["mailarmor","armor/mailarmor.png"],\r\n\t["miniseadragonarmor","armor/miniseadragonarmor.png"],\r\n\t["ninjaarmor","armor/ninjaarmor.png"],\r\n\t["paladinarmor","armor/paladinarmor.png"],\r\n\t["pinkcockroacharmor","armor/pinkcockroacharmor.png"],\r\n\t["piratearcherarmor","armor/piratearcherarmor.png"],\r\n\t["platearcherarmor","armor/platearcherarmor.png"],\r\n\t["platearmor","armor/platearmor.png"],\r\n\t["portalarmor","armor/portalarmor.png"],\r\n\t["powerarmour","armor/powerarmour.png"],\r\n\t["rabbitarmor","armor/rabbitarmor.png"],\r\n\t["radisharmor","armor/radisharmor.png"],\r\n\t["ratarcherarmor","armor/ratarcherarmor.png"],\r\n\t["ratarmor","armor/ratarmor.png"],\r\n\t["redarcherarmor","armor/redarcherarmor.png"],\r\n\t["redarmor","armor/redarmor.png"],\r\n\t["reddamboarmor","armor/reddamboarmor.png"],\r\n\t["redguardarcherarmor","armor/redguardarcherarmor.png"],\r\n\t["redguardarmor","armor/redguardarmor.png"],\r\n\t["redwingarcherarmor","armor/redwingarcherarmor.png"],\r\n\t["redwingarmor","armor/redwingarmor.png"],\r\n\t["regionarmor","armor/regionarmor.png"],\r\n\t["robocoparmor","armor/robocoparmor.png"],\r\n\t["rudolfarmor","armor/rudolfarmor.png"],\r\n\t["schooluniform","armor/schooluniform.png"],\r\n\t["seadragonarmor","armor/seadragonarmor.png"],\r\n\t["shadowregionarmor","armor/shadowregionarmor.png"],\r\n\t["snowfoxarcherarmor","armor/snowfoxarcherarmor.png"],\r\n\t["snowfoxarmor","armor/snowfoxarmor.png"],\r\n\t["snowmanarmor","armor/snowmanarmor.png"],\r\n\t["squidarmor","armor/squidarmor.png"],\r\n\t["taekwondo","armor/taekwondo.png"],\r\n\t["thiefarmor","armor/thiefarmor.png"],\r\n\t["tigerarmor","armor/tigerarmor.png"],\r\n\t["whitearcherarmor","armor/whitearcherarmor.png"],\r\n\t["whitearmor","armor/whitearmor.png"],\r\n\t["wizardrobe","armor/wizardrobe.png"],\r\n\t["wolfarcherarmor","armor/wolfarcherarmor.png"],\r\n\t["wolfarmor","armor/wolfarmor.png"],\r\n\t["item-bigflask","item/item-bigflask.png"],\r\n\t["item-blackpotion","item/item-blackpotion.png"],\r\n\t["item-burger","item/item-burger.png"],\r\n\t["item-firepotion","item/item-firepotion.png"],\r\n\t["item-flask","item/item-flask.png"],\r\n\t["chest","misc/chest.png"],\r\n\t["criticaleffect","misc/criticaleffect.png"],\r\n\t["cursors","misc/cursors.png"],\r\n\t["death","misc/death.png"],\r\n\t["firebenef","misc/firebenef.png"],\r\n\t["flaredanceeffect","misc/flaredanceeffect.png"],\r\n\t["goldmedal","misc/goldmedal.png"],\r\n\t["healeffect","misc/healeffect.png"],\r\n\t["provocationeffect","misc/provocationeffect.png"],\r\n\t["shadow16","misc/shadow16.png"],\r\n\t["shieldbenef","misc/shieldbenef.png"],\r\n\t["silvermedal","misc/silvermedal.png"],\r\n\t["sparks","misc/sparks.png"],\r\n\t["stuneffect","misc/stuneffect.png"],\r\n\t["supercateffect","misc/supercateffect.png"],\r\n\t["talk","misc/talk.png"],\r\n\t["target","misc/target.png"],\r\n\t["adherer","mob/adherer.png"],\r\n\t["ant","mob/ant.png"],\r\n\t["babyspider","mob/babyspider.png"],\r\n\t["bat","mob/bat.png"],\r\n\t["beautifullife","mob/beautifullife.png"],\r\n\t["bee","mob/bee.png"],\r\n\t["beetle","mob/beetle.png"],\r\n\t["blackpirateskeleton","mob/blackpirateskeleton.png"],\r\n\t["blackwizard","mob/blackwizard.png"],\r\n\t["blazespider","mob/blazespider.png"],\r\n\t["bluecockroach","mob/bluecockroach.png"],\r\n\t["bluepreta","mob/bluepreta.png"],\r\n\t["boss","mob/boss.png"],\r\n\t["breaker","mob/breaker.png"],\r\n\t["bridalmask","mob/bridalmask.png"],\r\n\t["brownmouse","mob/brownmouse.png"],\r\n\t["cactus","mob/cactus.png"],\r\n\t["cat","mob/cat.png"],\r\n\t["clam","mob/clam.png"],\r\n\t["cobra","mob/cobra.png"],\r\n\t["crab","mob/crab.png"],\r\n\t["crystalscolpion","mob/crystalscolpion.png"],\r\n\t["cursedjangseung","mob/cursedjangseung.png"],\r\n\t["darkogre","mob/darkogre.png"],\r\n\t["darkregionillusion","mob/darkregionillusion.png"],\r\n\t["darkregion","mob/darkregion.png"],\r\n\t["darkscolpion","mob/darkscolpion.png"],\r\n\t["darkskeleton","mob/darkskeleton.png"],\r\n\t["deathknight","mob/deathknight.png"],\r\n\t["desertscolpion","mob/desertscolpion.png"],\r\n\t["devilkazya","mob/devilkazya.png"],\r\n\t["earthworm","mob/earthworm.png"],\r\n\t["eliminator","mob/eliminator.png"],\r\n\t["enel","mob/enel.png"],\r\n\t["eye","mob/eye.png"],\r\n\t["firespider","mob/firespider.png"],\r\n\t["flaredeathknight","mob/flaredeathknight.png"],\r\n\t["fluffy","mob/fluffy.png"],\r\n\t["forestdragon","mob/forestdragon.png"],\r\n\t["frog","mob/frog.png"],\r\n\t["frostqueen","mob/frostqueen.png"],\r\n\t["ghostrider","mob/ghostrider.png"],\r\n\t["goblin","mob/goblin.png"],\r\n\t["goldgolem","mob/goldgolem.png"],\r\n\t["golem","mob/golem.png"],\r\n\t["greenfish","mob/greenfish.png"],\r\n\t["greenpirateskeleton","mob/greenpirateskeleton.png"],\r\n\t["hellspider","mob/hellspider.png"],\r\n\t["hermitcrab","mob/hermitcrab.png"],\r\n\t["hobgoblin","mob/hobgoblin.png"],\r\n\t["hongcheol","mob/hongcheol.png"],\r\n\t["icegolem","mob/icegolem.png"],\r\n\t["iceknight","mob/iceknight.png"],\r\n\t["icevulture","mob/icevulture.png"],\r\n\t["infectedguard","mob/infectedguard.png"],\r\n\t["ironogre","mob/ironogre.png"],\r\n\t["jirisanmoonbear","mob/jirisanmoonbear.png"],\r\n\t["kaonashi","mob/kaonashi.png"],\r\n\t["lightningguardian","mob/lightningguardian.png"],\r\n\t["mantis","mob/mantis.png"],\r\n\t["mermaid","mob/mermaid.png"],\r\n\t["mimic","mob/mimic.png"],\r\n\t["minidragon","mob/minidragon.png"],\r\n\t["miniemperor","mob/miniemperor.png"],\r\n\t["miniiceknight","mob/miniiceknight.png"],\r\n\t["miniknight","mob/miniknight.png"],\r\n\t["miniseadragon","mob/miniseadragon.png"],\r\n\t["moleking","mob/moleking.png"],\r\n\t["nightmareregion","mob/nightmareregion.png"],\r\n\t["ogrelord","mob/ogrelord.png"],\r\n\t["ogre","mob/ogre.png"],\r\n\t["oldogre","mob/oldogre.png"],\r\n\t["orc","mob/orc.png"],\r\n\t["pain","mob/pain.png"],\r\n\t["penguin","mob/penguin.png"],\r\n\t["pierrot","mob/pierrot.png"],\r\n\t["pinkelf","mob/pinkelf.png"],\r\n\t["piratecaptain","mob/piratecaptain.png"],\r\n\t["pirateking","mob/pirateking.png"],\r\n\t["pirateskeleton","mob/pirateskeleton.png"],\r\n\t["poisonspider","mob/poisonspider.png"],\r\n\t["preta","mob/preta.png"],\r\n\t["purplepreta","mob/purplepreta.png"],\r\n\t["queenant","mob/queenant.png"],\r\n\t["queenspider","mob/queenspider.png"],\r\n\t["rat","mob/rat.png"],\r\n\t["redcockroach","mob/redcockroach.png"],\r\n\t["redelf","mob/redelf.png"],\r\n\t["redfish","mob/redfish.png"],\r\n\t["redguard","mob/redguard.png"],\r\n\t["redmouse","mob/redmouse.png"],\r\n\t["redpirateskeleton","mob/redpirateskeleton.png"],\r\n\t["regionhenchman","mob/regionhenchman.png"],\r\n\t["rhaphidophoridae","mob/rhaphidophoridae.png"],\r\n\t["rudolf","mob/rudolf.png"],\r\n\t["santaelf","mob/santaelf.png"],\r\n\t["santa","mob/santa.png"],\r\n\t["seadragon","mob/seadragon.png"],\r\n\t["shadowregion","mob/shadowregion.png"],\r\n\t["skeleton2","mob/skeleton2.png"],\r\n\t["skeletonking","mob/skeletonking.png"],\r\n\t["skeleton","mob/skeleton.png"],\r\n\t["skydinosaur","mob/skydinosaur.png"],\r\n\t["skyelf","mob/skyelf.png"],\r\n\t["slime","mob/slime.png"],\r\n\t["smalldevil","mob/smalldevil.png"],\r\n\t["snek","mob/snek.png"],\r\n\t["snowelf","mob/snowelf.png"],\r\n\t["snowlady","mob/snowlady.png"],\r\n\t["snowman","mob/snowman.png"],\r\n\t["snowrabbit","mob/snowrabbit.png"],\r\n\t["snowwolf","mob/snowwolf.png"],\r\n\t["soldierant","mob/soldierant.png"],\r\n\t["soybeanbug","mob/soybeanbug.png"],\r\n\t["spectre","mob/spectre.png"],\r\n\t["spider","mob/spider.png"],\r\n\t["squid","mob/squid.png"],\r\n\t["suicideghost","mob/suicideghost.png"],\r\n\t["vulture","mob/vulture.png"],\r\n\t["whitebear","mob/whitebear.png"],\r\n\t["whitemouse","mob/whitemouse.png"],\r\n\t["whitetiger","mob/whitetiger.png"],\r\n\t["windguardian","mob/windguardian.png"],\r\n\t["wizard","mob/wizard.png"],\r\n\t["wolf","mob/wolf.png"],\r\n\t["yellowbat","mob/yellowbat.png"],\r\n\t["yellowfish","mob/yellowfish.png"],\r\n\t["yellowmouse","mob/yellowmouse.png"],\r\n\t["yellowpreta","mob/yellowpreta.png"],\r\n\t["zombie","mob/zombie.png"],\r\n\t["axe","weapon/axe.png"],\r\n\t["bamboospear","weapon/bamboospear.png"],\r\n\t["bastardsword","weapon/bastardsword.png"],\r\n\t["bloodbow","weapon/bloodbow.png"],\r\n\t["bluescimitar","weapon/bluescimitar.png"],\r\n\t["bluesword","weapon/bluesword.png"],\r\n\t["butcherknife","weapon/butcherknife.png"],\r\n\t["cactusaxe","weapon/cactusaxe.png"],\r\n\t["candybar","weapon/candybar.png"],\r\n\t["captainbow","weapon/captainbow.png"],\r\n\t["comb","weapon/comb.png"],\r\n\t["conferencecall","weapon/conferencecall.png"],\r\n\t["crystalbow","weapon/crystalbow.png"],\r\n\t["daywalker","weapon/daywalker.png"],\r\n\t["deathbow","weapon/deathbow.png"],\r\n\t["devilkazyasword","weapon/devilkazyasword.png"],\r\n\t["eneltrident","weapon/eneltrident.png"],\r\n\t["fireplay","weapon/fireplay.png"],\r\n\t["fireshot","weapon/fireshot.png"],\r\n\t["firesword","weapon/firesword.png"],\r\n\t["forestbow","weapon/forestbow.png"],\r\n\t["forestguardiansword","weapon/forestguardiansword.png"],\r\n\t["gaybow","weapon/gaybow.png"],\r\n\t["goldenbow","weapon/goldenbow.png"],\r\n\t["goldensword","weapon/goldensword.png"],\r\n\t["greenbow","weapon/greenbow.png"],\r\n\t["greenlightbow","weapon/greenlightbow.png"],\r\n\t["greenlightsaber","weapon/greenlightsaber.png"],\r\n\t["halberd","weapon/halberd.png"],\r\n\t["hammer","weapon/hammer.png"],\r\n\t["hunterbow","weapon/hunterbow.png"],\r\n\t["icerose","weapon/icerose.png"],\r\n\t["ironbow","weapon/ironbow.png"],\r\n\t["justicebow","weapon/justicebow.png"],\r\n\t["justicehammer","weapon/justicehammer.png"],\r\n\t["machete","weapon/machete.png"],\r\n\t["magicspear","weapon/magicspear.png"],\r\n\t["marinebow","weapon/marinebow.png"],\r\n\t["memme","weapon/memme.png"],\r\n\t["mermaidbow","weapon/mermaidbow.png"],\r\n\t["morningstar","weapon/morningstar.png"],\r\n\t["paewoldo","weapon/paewoldo.png"],\r\n\t["pinksword","weapon/pinksword.png"],\r\n\t["plasticbow","weapon/plasticbow.png"],\r\n\t["plunger","weapon/plunger.png"],\r\n\t["powersword","weapon/powersword.png"],\r\n\t["purplecloudkallege","weapon/purplecloudkallege.png"],\r\n\t["rainbowapro","weapon/rainbowapro.png"],\r\n\t["rainbowsword","weapon/rainbowsword.png"],\r\n\t["redbow","weapon/redbow.png"],\r\n\t["redenelbow","weapon/redenelbow.png"],\r\n\t["redlightbow","weapon/redlightbow.png"],\r\n\t["redlightsaber","weapon/redlightsaber.png"],\r\n\t["redmetalbow","weapon/redmetalbow.png"],\r\n\t["redmetalsword","weapon/redmetalsword.png"],\r\n\t["redsicklebow","weapon/redsicklebow.png"],\r\n\t["redsickle","weapon/redsickle.png"],\r\n\t["redsword","weapon/redsword.png"],\r\n\t["rosebow","weapon/rosebow.png"],\r\n\t["rose","weapon/rose.png"],\r\n\t["scimitar","weapon/scimitar.png"],\r\n\t["seahorsebow","weapon/seahorsebow.png"],\r\n\t["searage","weapon/searage.png"],\r\n\t["sicklebow","weapon/sicklebow.png"],\r\n\t["sickle","weapon/sickle.png"],\r\n\t["sidesword","weapon/sidesword.png"],\r\n\t["skylightbow","weapon/skylightbow.png"],\r\n\t["skylightsaber","weapon/skylightsaber.png"],\r\n\t["spear","weapon/spear.png"],\r\n\t["squeakyhammer","weapon/squeakyhammer.png"],\r\n\t["sword1","weapon/sword1.png"],\r\n\t["sword2","weapon/sword2.png"],\r\n\t["trident","weapon/trident.png"],\r\n\t["typhoon","weapon/typhoon.png"],\r\n\t["violetbow","weapon/violetbow.png"],\r\n\t["watermelonbow","weapon/watermelonbow.png"],\r\n\t["weastaff","weapon/weastaff.png"],\r\n\t["whip","weapon/whip.png"],\r\n\t["woodenbow","weapon/woodenbow.png"],\r\n\r\n\t["agent","npc/npc0.png"],\r\n\t["ancientmanumentnpc","npc/npc0.png"],\r\n\t["angelnpc","npc/npc0.png"],\r\n\t["beachnpc","npc/npc0.png"],\r\n\t["bluebikinigirlnpc","npc/npc0.png"],\r\n\t["bluestoremannpc","npc/npc0.png"],\r\n\t["boxingman","npc/npc0.png"],\r\n\t["coder","npc/npc0.png"],\r\n\t["desertnpc","npc/npc0.png"],\r\n\t["doctor","npc/npc0.png"],\r\n\t["elfnpc","npc/npc0.png"],\r\n\t["fairynpc","npc/npc0.png"],\r\n\t["firstsonangelnpc","npc/npc0.png"],\r\n\t["fisherman","npc/npc0.png"],\r\n\t["forestnpc","npc/npc0.png"],\r\n\t["guard","npc/npc0.png"],\r\n\t["iamverycoldnpc","npc/npc0.png"],\r\n\t["iceelfnpc","npc/npc0.png"],\r\n\t["king","npc/npc0.png"],\r\n\t["lavanpc","npc/npc0.png"],\r\n\t["mermaidnpc","npc/npc0.png"],\r\n\t["mojojojonpc","npc/npc0.png"],\r\n\t["momangelnpc","npc/npc0.png"],\r\n\t["nyan","npc/npc0.png"],\r\n\t["octocat","npc/npc0.png"],\r\n\t["octopus","npc/npc0.png"],\r\n\t["oddeyecat","npc/npc0.png"],\r\n\t["pirategirlnpc","npc/npc0.png"],\r\n\t["priest","npc/npc0.png"],\r\n\t["redbikinigirlnpc","npc/npc0.png"],\r\n\t["redstoremannpc","npc/npc0.png"],\r\n\t["rick","npc/npc0.png"],\r\n\t["scientist","npc/npc0.png"],\r\n\t["secondsonangelnpc","npc/npc0.png"],\r\n\t["shepherdboy","npc/npc0.png"],\r\n\t["snowshepherdboy","npc/npc0.png"],\r\n\t["soldier","npc/npc0.png"],\r\n\t["sorcerer","npc/npc0.png"],\r\n\t["sponge","npc/npc0.png"],\r\n\t["superiorangelnpc","npc/npc0.png"],\r\n\t["vampire","npc/npc0.png"],\r\n\t["vendingmachine","npc/npc0.png"],\r\n\t["villagegirl","npc/npc0.png"],\r\n\t["villager","npc/npc0.png"],\r\n\t["zombiegf","npc/npc0.png"],\r\n\t["items","misc/mainweaponarmor.png"],\r\n\t["itemloot","misc/itemloot.png"],\r\n\t["npc1_1",""],\r\n\t["npc1_2",""],\r\n\t["npc1_3",""],\r\n\t["npc1_4",""],\r\n\t["npc1_5",""],\r\n\t["npc1_6",""],\r\n\t["npc1_7",""],\r\n\t["npc1_8",""],\r\n\t["npc2_1",""],\r\n\t["npc2_2",""],\r\n\t["npc2_3",""],\r\n\t["npc2_4",""],\r\n\t["npc2_5",""],\r\n\t["npc2_6",""],\r\n\t["npc2_7",""],\r\n\t["npc2_8",""]\r\n]\r\n';});


define('hoveringinfo',[],function() {
    var HoveringInfo = Class.extend({
        DURATION: 1000,

        init: function(id, value, x, y, duration, type) {
            this.id = id;
            this.value = value;
            this.duration = duration * 2;
            this.x = x;
            this.y = y;
            this.opacity = 1.0;
            this.lastTime = 0;
            this.speed = damageInfoData[type].speed;
            this.interval = damageInfoData[type].interval || 0;
            this.fillColor = damageInfoData[type].fill;
            this.strokeColor = damageInfoData[type].stroke;
            this.fontSize = damageInfoData[type].fontSize;
            //this.showTime = game.currentTime;
            this.angle = randomInt(20,160) / 180 * Math.PI;
            this.infoData = damageInfoData[type];
            this.effect = damageInfoData[type].effect || 0;
        },

        isTimeToAnimate: function(time) {
            return (time - this.lastTime) > this.speed;
        },

        isTimeToShow: function(time) {
            return (time - this.showTime) > this.interval;
        },

        isTimeToDestroy: function (time) {
        	return (time - this.showTime) > (this.interval + this.duration);
        },

        update: function(time) {
				if(this.isTimeToAnimate(time)) {
					this.lastTime = time;
					this.tick(time);
				}
        },

        tick: function(time) {
          if (this.effect == 0)
          {
            this.y -= 1;
          }
          else if (this.effect == 1)
          {
            this.y -= Math.sin(this.angle);
            this.x -= Math.cos(this.angle);
          }

  				this.opacity -= (100/this.duration);

  				if(this.isTimeToDestroy(time)) {
  					this.destroy();
  				}
        },

        onDestroy: function(callback) {
            this.destroy_callback = callback;
        },

        destroy: function() {
            if(this.destroy_callback) {
                this.destroy_callback(this.id);
            }
        }
    });

    var damageInfoData = {
        "levelUp": {
          fill: 0x00FFFF,
          stroke: 0x000000,
          fontSize: 10,
          speed: 100,
          effect: 0
        },
        "minorLevelUp": {
          fill: 0x00FFFF,
          stroke: 0x000000,
          fontSize: 8,
          speed: 100,
          effect: 0
        },
        "received": {
            fill: 0xFF4040,
            stroke: 0x000000,
            fontSize: 6,
            speed: 25,
            effect: 1
        },
        "inflicted": {
            fill: 0xFF4040,
            stroke: 0x000000,
            fontSize: 6,
            speed: 25,
            effect: 1
        },
        "healed": {
            fill: 0x60FF60,
            stroke: 0x000000,
            fontSize: 6,
            speed: 25,
            effect: 1
         },
        "health": {
            fill: 0xFFFFFF,
            stroke: 0x000000,
            fontSize: 6,
            speed: 25,
            effect: 1
        },
       "crit": {
            fill: 0xFFFF00,
            stroke: 0x000000,
            fontSize: 6,
            speed: 25,
            effect: 1
        },
        "experience": {
             fill: 0x00FFFF,
             stroke: 0x000000,
             fontSize: 6,
             speed: 50,
             effect: 0
         }

    };

    return HoveringInfo;
});


define('infomanager',['hoveringinfo'], function(HoveringInfo) {

    var InfoManager = Class.extend({
        init: function(game) {
            this.game = game;
            this.infos = {};
            this.destroyQueue = [];
            this.infoQueue = [];
            this.index = 1;
            var self = this;


            setInterval(function ()
            {
            	if (self.infoQueue.length > 0)
            	{
            		var time = self.game.currentTime;
            		var info = self.infoQueue[0];
            		if (!info.showTime) info.showTime = time;
            		self.infos[info.id] = info;
            		if (info.isTimeToShow(time))
            		{
            			self.infoQueue.shift();
            		}
            	}
        	},50);
        },

        addDamageInfo: function(value, x, y, type, duration) {
            this.index = (this.index >= Number.MAX_SAFE_INTEGER) ? 1 : this.index+1;
            var time = this.game.currentTime,
                id = this.index;
                self = this,
                info = new HoveringInfo(id, value, x, y, (duration)?duration:1000, type);

            		info.onDestroy(function(id) {
                    if (!id || !self.destroyQueue) return;
            		    self.destroyQueue.push(id);
            		});

            			if (info.interval > 0) {
            				self.infoQueue.push(info);
            			}
            			else
            			{
            				info.showTime = time;
            				self.infos[id] = info;
            			}
        },

        addInfo: function(info) {
            var time = this.game.currentTime,
                self = this;

            		info.onDestroy(function(id) {
                    id = id || this.id;
                    if (!id || !self.destroyQueue) return;
            		    self.destroyQueue.push(id);
            		});

            			if (info.interval > 0) {
            				self.infoQueue.push(info);
            			}
            			else
            			{
            				info.showTime = time;
            				self.infos[info.id] = info;
            			}
        },

        forEachInfo: function(callback) {
            var self = this;

            _.each(this.infos, function(info, id) {
                callback(info);
            });
        },

        update: function(time) {
            var self = this;

            this.forEachInfo(function(info) {
            	//if (info.isTimeToShow(time)) {
            		info.update(time);
                //}
            });

            _.each(this.destroyQueue, function(id) {
                game.renderer.removeSprite(Container.HUD, "ci_"+id);
                delete self.infos[id];
            });
            this.destroyQueue = [];
        }
    });

    return InfoManager;
});

define('bubble',['timer'], function(Timer) {
    var Bubble = Class.extend({
        init: function(id, entity, content, time) {
            this.id = id;
            this.entity = entity;
            this.content = content;
            this.timer = new Timer(5000, time);

            game.renderer.drawBubble(this);
        },
        isOver: function(time) {
            if(this.timer.isOver(time)) {
                return true;
            }
            return false;
        },
        destroy: function() {
            game.renderer.removeBubble(this);
        },
        reset: function(time) {
            this.timer.lastTime = time;
        }
    });

    var BubbleManager = Class.extend({
        init: function() {
            this.bubbles = {};
        },

        getBubbleById: function(id) {
            if(id in this.bubbles) {
                return this.bubbles[id];
            }
            return null;
        },

        create: function(entity, content, time) {
            if (content === undefined || content == "") return;

            var id=entity.id;
            var time = time || Date.now();
            var bubble = this.bubbles[id] = new Bubble(id, entity, content, time);
        },

        update: function(time) {
            var self = this,
                bubblesToDelete = [];

            _.each(this.bubbles, function(bubble) {
                if(bubble.isOver(time)) {
                    bubble.destroy();
                    bubblesToDelete.push(bubble.id);
                }
            });

            _.each(bubblesToDelete, function(id) {
                delete self.bubbles[id];
            });
        },

        clean: function() {
            var self = this,
                bubblesToDelete = [];

            _.each(this.bubbles, function(bubble) {
                bubble.destroy();
                bubblesToDelete.push(bubble.id);
            });

            _.each(bubblesToDelete, function(id) {
                delete self.bubbles[id];
            });

            this.bubbles = {};
        },

        destroyBubble: function(id) {
            var bubble = this.getBubbleById(id);

            if(bubble) {
                bubble.destroy();
                delete this.bubbles[id];
            }
        },

        destroyEntityBubbles: function(entity) {
            var self = this;

            _.each(this.bubbles, function(bubble) {
                if (bubble.entity === entity)
                {
                  bubble.destroy();
                  delete self.bubbles[bubble.id];
                }
            });
        },

        forEachBubble: function(callback) {
            _.each(this.bubbles, function(bubble) {
                callback(bubble);
            });
        }
    });

    return BubbleManager;
});


define('camera',['entity/entity'], function(Entity) {

    var Camera = Class.extend({
        init: function(game, renderer) {
            this.game = game;
            this.renderer = renderer;

            this.x = 0;
            this.y = 0;

            this.tilesize = this.renderer.tilesize;

            this.rescale();

            this.entities = {};
            this.outEntities = {};

            this.scrollX = true;
            this.scrollY = true;
        },

        rescale: function(gridW, gridH) {
            var gs = this.renderer.gameScale;
            var w = this.renderer.innerWidth;
            var h = this.renderer.innerHeight;
            log.debug("camera: w="+w+",h="+h);
            var ts = this.tilesize;
            var tsgs = (ts * gs);
            this.gridW = Math.ceil(w / tsgs);
            this.gridH = Math.ceil(h / tsgs);
            this.gridW += this.gridW % 2 ? 1 : 0;
            this.gridH += this.gridH % 2 ? 1 : 0;
            //this.border = 0;
            //this.gridW -= this.border*2;
            //this.gridH -= this.border*2;

            this.gridWE = this.gridW+2;
            this.gridHE = this.gridH+2;

            //var zoom = 1/this.renderer.resolution;
            var zoom = 1; //this.renderer.gameZoom;
            this.screenW = w; //~~(this.gridW*tsgs*zoom);
            this.screenH = h; //~~(this.gridH*tsgs*zoom);
            this.screenWE = ~~(this.gridWE*tsgs*zoom);
            this.screenHE = ~~(this.gridHE*tsgs*zoom);
            //this.screenW2 = w;
            //this.screenH2 = h;

            log.debug("camera: this.screenW="+this.screenW+",this.screenH="+this.screenH);
            //log.debug("camera: this.screenW2="+this.screenW2+",this.screenH2="+this.screenH2);

            //this.screenW = w - (this.border*2*tsgs); //this.gridW * ts;
            //this.screenH = h - (this.border*2*tsgs); //this.gridH * ts;
            this.screenX = ~~(this.screenW/gs);
            this.screenY = ~~(this.screenH/gs);
            this.tScreenW = this.gridWE * tsgs;
            this.tScreenH = this.gridHE * tsgs;


            this.wOffX = ~~((this.tScreenW - this.screenW)/(2*gs));
            this.wOffY = ~~((this.tScreenH - this.screenH)/(2*gs));
            //this.cOffX = (this.screenWE-w)/(gs*2);
            //this.cOffY = (this.screenHE-h)/(gs*2);
            log.debug("camera: this.wOffX="+this.wOffX+",this.wOffY="+this.wOffY);
            //log.debug("camera: this.cOffX="+this.cOffX+",this.cOffY="+this.cOffY);
            this.eOffX = this.wOffX-ts;
            this.eOffY = this.wOffY-ts;

            log.debug("---------");
            log.debug("W:"+this.gridW + " H:" + this.gridH);
            //alert("W:"+this.gridW + " H:" + this.gridH);
            var mc = game.mapContainer;
            if (mc) {
              mc._initGrids();
              mc.moveGrid(true);
            }
        },

        setRealCoords: function() {
          var mc = game.mapContainer;
          var fe = this.focusEntity;

          var hgw = ~~(this.screenX / 2);
          var hgh = ~~(this.screenY / 2);
          //log.info("camera: hgw="+hgw+",hgh="+hgh);

          if (!fe)
            return;

          var x = fe.x - hgw;
          var y = fe.y - hgh;

          this.x = x.clamp(mc.gcsx, mc.gcex);
          this.y = y.clamp(mc.gcsy, mc.gcey);

          this.rx = x;
          this.ry = y;

          var tMinX=this.wOffX,
              tMaxX=mc.gcex+this.wOffX,
              tMinY=this.wOffY,
              tMaxY=mc.gcey+this.wOffY;

          this.scrollX = (x > tMinX && x <= tMaxX);
          this.scrollY = (y > tMinY && y <= tMaxY);

          this.sx = x.clamp(tMinX, tMaxX);
          this.sy = y.clamp(tMinY, tMaxY);

          this.gx = this.x >> 4;
          this.gy = this.y >> 4;
        },

        getGridPos: function (pos)
        {
          var ts = game.tilesize;
          var r = game.renderer;
          var mc = game.mapContainer;
          if (!mc) return;

          var x = pos[0];
              y = pos[1];

          var tw = -r.hOffX;
          var th = -r.hOffY;

          var tx = (x-this.x + tw) / ts;
          var ty = (y-this.y + th) / ts;

          return [tx,ty];
        },

        forEachVisibleValidPosition: function(callback) {
            if (!this.gridWE || !this.gridHE)
              return;
            //var mc = game.mapContainer;

            var h = this.gridHE;
            var w = this.gridWE;
            var j=0, k=0;
            for(var y=0; y < h; ++y) {
                for(var x=0; x < w; ++x) {
                    //if (y < mc.tileGrid[0].length && x < mc.tileGrid.length)
                    callback(x, y);
                }
            }
        },

        isVisible: function(entity, extra) {
            extra = extra || 0;
            //log.info("isVisible: " + entity.mapIndex + "!==" + this.game.map.index);
            if (entity.mapIndex != game.mapIndex) return false;
            if (!entity) return false;
            return this.isVisiblePosition(entity.x, entity.y, extra);
        },

        isVisiblePosition: function(x, y, extra) {
            extra = extra*this.tilesize || 0;
            var minX = Math.max(0,this.x-extra);
      		  var minY = Math.max(0,this.y-extra);
      		  var maxX = Math.min(game.mapContainer.widthX, this.x+this.screenX+extra);
      		  var maxY = Math.min(game.mapContainer.heightY, this.y+this.screenY+extra);

            if(y.between(minY,maxY) && x.between(minX,maxX))
            {
                return true;
            } else {
                return false;
            }
        },

        forEachInScreenArray: function (entity) {
          var self = this;
          var entities = [];
          var entity = entity || this.focusEntity;

          var tsh = G_TILESIZE >> 1;
          var x = (self.gridW-1) * tsh;
          var y = (self.gridH-1) * tsh;

          this.forEachInScreen(function (entity2) {
            if (entity2 == entity)
              return;
            if (Math.abs(entity.x-entity2.x) < x &&
                Math.abs(entity.y-entity2.y) < y)
              entities.push(entity2);
          });
          return entities;
        },

        forEachInScreen: function(callback)
        {
          for(var id in this.entities) {
            var entity = this.entities[id];
            if (entity && entity instanceof Entity) {
              callback(entity,id);
            }
          }
        },

        forEachInOuterScreen: function(callback)
        {
          for(var id in this.entities) {
            var entity = this.outEntities[id];
            if (entity && entity instanceof Entity) {
              callback(entity,id);
            }
          }
        }
    });

    return Camera;
});


define('text!data/../../shared/data/items2.json', function () { return '[\r\n\t{\r\n\t\t"id":1,\r\n\t\t"name": "Crude Club",\r\n\t\t"type":"weapon",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":10,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[3,10]\r\n\t},\r\n\t{\r\n\t\t"id":2,\r\n\t\t"name": "Crude Sword",\r\n\t\t"type":"weapon",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":20,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[5,9]\r\n\t},\r\n\t{\r\n\t\t"id":3,\r\n\t\t"name": "Beginnner Sword",\r\n\t\t"type":"weapon",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":30,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[8,11]\r\n\t},\r\n\t{\r\n\t\t"id":4,\r\n\t\t"name": "Iron Sword",\r\n\t\t"type":"weapon",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":40,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[4,0]\r\n\t},\r\n\t{\r\n\t\t"id":5,\r\n\t\t"name": "Steel Sword",\r\n\t\t"type":"weapon",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":50,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[4,1]\r\n\t},\r\n\t{\r\n\t\t"id":6,\r\n\t\t"name": "Bronze Sword",\r\n\t\t"type":"weapon",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":60,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[4,2]\r\n\t},\r\n\t{\r\n\t\t"id":7,\r\n\t\t"name": "Golden Sword",\r\n\t\t"type":"weapon",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":70,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[4,3]\r\n\t},\r\n\t{\r\n\t\t"id":8,\r\n\t\t"name": "Glass Sword",\r\n\t\t"type":"weapon",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":80,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[4,4]\r\n\t},\r\n\t{\r\n\t\t"id":9,\r\n\t\t"name": "Adamantite Sword",\r\n\t\t"type":"weapon",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":90,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[4,5]\r\n\t},\r\n\t{\r\n\t\t"id":10,\r\n\t\t"name": "Plate Sword",\r\n\t\t"type":"weapon",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":100,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[4,6]\r\n\t},\r\n\t{\r\n\t\t"id":11,\r\n\t\t"name": "Draconian Sword",\r\n\t\t"type":"weapon",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":110,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[4,7]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":12,\r\n\t\t"name": "Slingshot",\r\n\t\t"type":"weaponarcher",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":10,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[1,10]\r\n\t},\r\n\t{\r\n\t\t"id":13,\r\n\t\t"name": "Crude Bow",\r\n\t\t"type":"weaponarcher",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":20,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[7,8]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":14,\r\n\t\t"name": "Beginner Bow",\r\n\t\t"type":"weaponarcher",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":30,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[9,11]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":15,\r\n\t\t"name": "Iron Bow",\r\n\t\t"type":"weaponarcher",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":40,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[7,0]\r\n\t},\r\n\t{\r\n\t\t"id":16,\r\n\t\t"name": "Steel Bow",\r\n\t\t"type":"weaponarcher",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":50,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[7,1]\r\n\t},\r\n\t{\r\n\t\t"id":17,\r\n\t\t"name": "Bronze Bow",\r\n\t\t"type":"weaponarcher",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":60,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[7,2]\r\n\t},\r\n\t{\r\n\t\t"id":18,\r\n\t\t"name": "Gold Bow",\r\n\t\t"type":"weaponarcher",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":70,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[7,3]\r\n\t},\r\n\t{\r\n\t\t"id":19,\r\n\t\t"name": "Glass Bow",\r\n\t\t"type":"weaponarcher",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":80,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[7,4]\r\n\t},\r\n\t{\r\n\t\t"id":20,\r\n\t\t"name": "Adamantite Bow",\r\n\t\t"type":"weaponarcher",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":90,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[7,5]\r\n\t},\r\n\t{\r\n\t\t"id":21,\r\n\t\t"name": "Plate Bow",\r\n\t\t"type":"weaponarcher",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":100,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[7,6]\r\n\t},\r\n\t{\r\n\t\t"id":22,\r\n\t\t"name": "Draconian Bow",\r\n\t\t"type":"weaponarcher",\r\n\t\t"typemod":"attack",\r\n\t\t"modifier":110,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy": 1,\r\n\t\t"offset":[7,7]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":23,\r\n\t\t"name": "Fur Armor",\r\n\t\t"type":"armor",\r\n\t\t"typemod":"defense",\r\n\t\t"modifier":10,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy":1,\r\n\t\t"offset":[11,12]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":24,\r\n\t\t"name": "Padded Armor",\r\n\t\t"type":"armor",\r\n\t\t"typemod":"defense",\r\n\t\t"modifier":20,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy":1,\r\n\t\t"offset":[11,11]\r\n\t},\r\n\t{\r\n\t\t"id":25,\r\n\t\t"name": "Leather Armor",\r\n\t\t"type":"armor",\r\n\t\t"typemod":"defense",\r\n\t\t"modifier":30,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy":1,\r\n\t\t"offset":[11,10]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":26,\r\n\t\t"name": "Iron Armor",\r\n\t\t"type":"armor",\r\n\t\t"typemod":"defense",\r\n\t\t"modifier":40,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy":1,\r\n\t\t"offset":[11,0]\r\n\t},\r\n\t{\r\n\t\t"id":27,\r\n\t\t"name": "Steel Armor",\r\n\t\t"type":"armor",\r\n\t\t"typemod":"defense",\r\n\t\t"modifier":50,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy":1,\r\n\t\t"offset":[11,1]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":28,\r\n\t\t"name": "Bronze Armor",\r\n\t\t"type":"armor",\r\n\t\t"typemod":"defense",\r\n\t\t"modifier":60,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy":1,\r\n\t\t"offset":[11,2]\r\n\t},\r\n\t{\r\n\t\t"id":29,\r\n\t\t"name": "Golden Armor",\r\n\t\t"type":"armor",\r\n\t\t"typemod":"defense",\r\n\t\t"modifier":70,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy":1,\r\n\t\t"offset":[11,3]\r\n\t},\r\n\t{\r\n\t\t"id":30,\r\n\t\t"name": "Glass Armor",\r\n\t\t"type":"armor",\r\n\t\t"typemod":"defense",\r\n\t\t"modifier":80,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy":1,\r\n\t\t"offset":[11,4]\r\n\t},\r\n\t{\r\n\t\t"id":31,\r\n\t\t"name": "Adamantite Armor",\r\n\t\t"type":"armor",\r\n\t\t"typemod":"defense",\r\n\t\t"modifier":90,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy":1,\r\n\t\t"offset":[11,5]\r\n\t},\r\n\t{\r\n\t\t"id":32,\r\n\t\t"name": "Plate Armor",\r\n\t\t"type":"armor",\r\n\t\t"typemod":"defense",\r\n\t\t"modifier":100,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy":1,\r\n\t\t"offset":[11,6]\r\n\t},\r\n\t{\r\n\t\t"id":33,\r\n\t\t"name": "Draconian Armor",\r\n\t\t"type":"armor",\r\n\t\t"typemod":"defense",\r\n\t\t"modifier":110,\r\n\t\t"staticsheet":2,\r\n\t\t"legacy":1,\r\n\t\t"offset":[11,7]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":34,\r\n\t\t"name": "Flask +500 HP",\r\n\t\t"type":"object",\r\n\t\t"typemod":"health",\r\n\t\t"modifier":500,\r\n\t\t"sprite":"item/item-flask.png",\r\n\t\t"spriteName":"item-flask",\r\n\t\t"offset":[0,0],\r\n\t\t"buy": 10,\r\n\t\t"buycount":10\r\n\t},\r\n\t{\r\n\t\t"id":35,\r\n\t\t"name": "Burger +500 Energy",\r\n\t\t"type":"object",\r\n\t\t"typemod":"energy",\r\n\t\t"modifier":500,\r\n\t\t"sprite":"item/item-burger.png",\r\n\t\t"spriteName":"item-burger",\r\n\t\t"offset":[0,0],\r\n\t\t"buy": 30,\r\n\t\t"buycount":10\r\n\t},\r\n\t{\r\n\t\t"id":36,\r\n\t\t"name": "Big Flask +25% HP",\r\n\t\t"type":"object",\r\n\t\t"typemod":"healthpercent",\r\n\t\t"modifier":25,\r\n\t\t"sprite":"item/item-bigflask.png",\r\n\t\t"spriteName":"item-bigflask",\r\n\t\t"offset":[0,0],\r\n\t\t"buy": 50,\r\n\t\t"buycount":10\r\n\t},\r\n\r\n\t{\r\n\t\t"id":100,\r\n\t\t"name": "Leather Chest 1",\r\n\t\t"type":"chest",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 10,\r\n\t\t"modifier":10,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[0,5]\r\n\t},\r\n\t{\r\n\t\t"id":101,\r\n\t\t"name": "Leather Helmet 1",\r\n\t\t"type":"helm",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 12,\r\n\t\t"modifier":5,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[0,4]\r\n\t},\r\n\t{\r\n\t\t"id":102,\r\n\t\t"name": "Leather Gloves 1",\r\n\t\t"type":"gloves",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 14,\r\n\t\t"modifier":5,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[0,6]\r\n\t},\r\n\t{\r\n\t\t"id":103,\r\n\t\t"name": "Leather Boots 1",\r\n\t\t"type":"boots",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 16,\r\n\t\t"modifier":5,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[0,7]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":104,\r\n\t\t"name": "Leather Chest 2",\r\n\t\t"type":"chest",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 20,\r\n\t\t"modifier":20,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[1,5]\r\n\t},\r\n\t{\r\n\t\t"id":105,\r\n\t\t"name": "Leather Helmet 2",\r\n\t\t"type":"helm",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 22,\r\n\t\t"modifier":10,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[1,4]\r\n\t},\r\n\t{\r\n\t\t"id":106,\r\n\t\t"name": "Leather Gloves 2",\r\n\t\t"type":"gloves",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 24,\r\n\t\t"modifier":10,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[1,6]\r\n\t},\r\n\t{\r\n\t\t"id":107,\r\n\t\t"name": "Leather Boots 2",\r\n\t\t"type":"boots",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 26,\r\n\t\t"modifier":10,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[1,7]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":108,\r\n\t\t"name": "Leather Chest 3",\r\n\t\t"type":"chest",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 30,\r\n\t\t"modifier":30,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[2,5]\r\n\t},\r\n\t{\r\n\t\t"id":109,\r\n\t\t"name": "Leather Helmet 3",\r\n\t\t"type":"helm",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 32,\r\n\t\t"modifier":15,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[2,4]\r\n\t},\r\n\t{\r\n\t\t"id":110,\r\n\t\t"name": "Leather Gloves 3",\r\n\t\t"type":"gloves",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 34,\r\n\t\t"modifier":15,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[2,6]\r\n\t},\r\n\t{\r\n\t\t"id":111,\r\n\t\t"name": "Leather Boots 3",\r\n\t\t"type":"boots",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 36,\r\n\t\t"modifier":15,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[2,7]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":112,\r\n\t\t"name": "Leather Chest 4",\r\n\t\t"type":"chest",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 40,\r\n\t\t"modifier":40,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[3,5]\r\n\t},\r\n\t{\r\n\t\t"id":113,\r\n\t\t"name": "Leather Helmet 4",\r\n\t\t"type":"helm",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 42,\r\n\t\t"modifier":20,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[3,4]\r\n\t},\r\n\t{\r\n\t\t"id":114,\r\n\t\t"name": "Leather Gloves 4",\r\n\t\t"type":"gloves",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 44,\r\n\t\t"modifier":20,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[3,6]\r\n\t},\r\n\t{\r\n\t\t"id":115,\r\n\t\t"name": "Leather Boots 4",\r\n\t\t"type":"boots",\r\n\t\t"typemod":"defense",\r\n\t\t"level": 46,\r\n\t\t"modifier":20,\r\n\t\t"staticsheet":1,\r\n\t\t"spriteName":"armors",\r\n\t\t"offset":[3,7]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":200,\r\n\t\t"name": "Sword 1",\r\n\t\t"type":"sword",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 10,\r\n\t\t"modifier":10,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[0,0]\r\n\t},\r\n\t{\r\n\t\t"id":201,\r\n\t\t"name": "Sword 2",\r\n\t\t"type":"sword",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 20,\r\n\t\t"modifier":20,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[1,0]\r\n\t},\r\n\t{\r\n\t\t"id":202,\r\n\t\t"name": "Sword 3",\r\n\t\t"type":"sword",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 30,\r\n\t\t"modifier":30,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[2,0]\r\n\t},\r\n\t{\r\n\t\t"id":203,\r\n\t\t"name": "Sword 4",\r\n\t\t"type":"sword",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 40,\r\n\t\t"modifier":40,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[3,0]\r\n\t},\r\n\t{\r\n\t\t"id":204,\r\n\t\t"name": "Sword 5",\r\n\t\t"type":"sword",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 50,\r\n\t\t"modifier":50,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[4,0]\r\n\t},\r\n\t{\r\n\t\t"id":205,\r\n\t\t"name": "Sword 6",\r\n\t\t"type":"sword",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 60,\r\n\t\t"modifier":60,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[5,0]\r\n\t},\r\n\t{\r\n\t\t"id":206,\r\n\t\t"name": "Sword 7",\r\n\t\t"type":"sword",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 70,\r\n\t\t"modifier":70,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[6,0]\r\n\t},\r\n\t{\r\n\t\t"id":207,\r\n\t\t"name": "Sword 8",\r\n\t\t"type":"sword",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 80,\r\n\t\t"modifier":80,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[7,0]\r\n\t},\r\n\t{\r\n\t\t"id":208,\r\n\t\t"name": "Sword 9",\r\n\t\t"type":"sword",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 90,\r\n\t\t"modifier":90,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[8,0]\r\n\t},\r\n\t{\r\n\t\t"id":209,\r\n\t\t"name": "Sword 10",\r\n\t\t"type":"sword",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 100,\r\n\t\t"modifier":100,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[9,0]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":210,\r\n\t\t"name": "Bow 1",\r\n\t\t"type":"bow",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 10,\r\n\t\t"modifier":10,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[0,3]\r\n\t},\r\n\t{\r\n\t\t"id":211,\r\n\t\t"name": "Bow 2",\r\n\t\t"type":"bow",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 20,\r\n\t\t"modifier":20,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[1,3]\r\n\t},\r\n\t{\r\n\t\t"id":212,\r\n\t\t"name": "Bow 3",\r\n\t\t"type":"bow",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 30,\r\n\t\t"modifier":30,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[2,3]\r\n\t},\r\n\t{\r\n\t\t"id":213,\r\n\t\t"name": "Bow 4",\r\n\t\t"type":"bow",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 40,\r\n\t\t"modifier":40,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[3,3]\r\n\t},\r\n\t{\r\n\t\t"id":214,\r\n\t\t"name": "Bow 5",\r\n\t\t"type":"bow",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 50,\r\n\t\t"modifier":50,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[4,3]\r\n\t},\r\n\t{\r\n\t\t"id":215,\r\n\t\t"name": "Bow 6",\r\n\t\t"type":"bow",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 60,\r\n\t\t"modifier":60,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[5,3]\r\n\t},\r\n\t{\r\n\t\t"id":216,\r\n\t\t"name": "Bow 7",\r\n\t\t"type":"bow",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 70,\r\n\t\t"modifier":70,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[6,3]\r\n\t},\r\n\t{\r\n\t\t"id":217,\r\n\t\t"name": "Bow 8",\r\n\t\t"type":"bow",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 80,\r\n\t\t"modifier":80,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[7,3]\r\n\t},\r\n\t{\r\n\t\t"id":218,\r\n\t\t"name": "Bow 9",\r\n\t\t"type":"bow",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 90,\r\n\t\t"modifier":90,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[8,3]\r\n\t},\r\n\t{\r\n\t\t"id":219,\r\n\t\t"name": "Bow 10",\r\n\t\t"type":"bow",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 100,\r\n\t\t"modifier":100,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[9,3]\r\n\t},\r\n\r\n\t{\r\n\t\t"id":220,\r\n\t\t"name": "Hammer 1",\r\n\t\t"type":"hammer",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 10,\r\n\t\t"modifier":10,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[0,5]\r\n\t},\r\n\t{\r\n\t\t"id":221,\r\n\t\t"name": "Hammer 2",\r\n\t\t"type":"hammer",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 20,\r\n\t\t"modifier":20,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[1,5]\r\n\t},\r\n\t{\r\n\t\t"id":222,\r\n\t\t"name": "Hammer 3",\r\n\t\t"type":"hammer",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 30,\r\n\t\t"modifier":30,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[2,5]\r\n\t},\r\n\t{\r\n\t\t"id":223,\r\n\t\t"name": "Hammer 4",\r\n\t\t"type":"hammer",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 40,\r\n\t\t"modifier":40,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[3,5]\r\n\t},\r\n\t{\r\n\t\t"id":224,\r\n\t\t"name": "Hammer 5",\r\n\t\t"type":"hammer",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 50,\r\n\t\t"modifier":50,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[4,5]\r\n\t},\r\n\t{\r\n\t\t"id":225,\r\n\t\t"name": "Hammer 6",\r\n\t\t"type":"hammer",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 60,\r\n\t\t"modifier":60,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[5,5]\r\n\t},\r\n\t{\r\n\t\t"id":226,\r\n\t\t"name": "Hammer 7",\r\n\t\t"type":"hammer",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 70,\r\n\t\t"modifier":70,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[6,5]\r\n\t},\r\n\t{\r\n\t\t"id":227,\r\n\t\t"name": "Hammer 8",\r\n\t\t"type":"hammer",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 80,\r\n\t\t"modifier":80,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[7,5]\r\n\t},\r\n\t{\r\n\t\t"id":228,\r\n\t\t"name": "Hammer 9",\r\n\t\t"type":"hammer",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 90,\r\n\t\t"modifier":90,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[8,5]\r\n\t},\r\n\t{\r\n\t\t"id":229,\r\n\t\t"name": "Hammer 10",\r\n\t\t"type":"hammer",\r\n\t\t"typemod":"attack",\r\n\t\t"level": 100,\r\n\t\t"modifier":100,\r\n\t\t"staticsheet":4,\r\n\t\t"spriteName":"weapons",\r\n\t\t"offset":[9,5]\r\n\t},\r\n\r\n\r\n\t\t{\r\n\t\t\t"id":230,\r\n\t\t\t"name": "Axe 1",\r\n\t\t\t"type":"axe",\r\n\t\t\t"typemod":"attack",\r\n\t\t\t"level": 10,\r\n\t\t\t"modifier":10,\r\n\t\t\t"staticsheet":4,\r\n\t\t\t"spriteName":"weapons",\r\n\t\t\t"offset":[0,8]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":231,\r\n\t\t\t"name": "Axe 2",\r\n\t\t\t"type":"axe",\r\n\t\t\t"typemod":"attack",\r\n\t\t\t"level": 20,\r\n\t\t\t"modifier":20,\r\n\t\t\t"staticsheet":4,\r\n\t\t\t"spriteName":"weapons",\r\n\t\t\t"offset":[1,8]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":232,\r\n\t\t\t"name": "Axe 3",\r\n\t\t\t"type":"axe",\r\n\t\t\t"typemod":"attack",\r\n\t\t\t"level": 30,\r\n\t\t\t"modifier":30,\r\n\t\t\t"staticsheet":4,\r\n\t\t\t"spriteName":"weapons",\r\n\t\t\t"offset":[2,8]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":233,\r\n\t\t\t"name": "Axe 4",\r\n\t\t\t"type":"axe",\r\n\t\t\t"typemod":"attack",\r\n\t\t\t"level": 40,\r\n\t\t\t"modifier":40,\r\n\t\t\t"staticsheet":4,\r\n\t\t\t"spriteName":"weapons",\r\n\t\t\t"offset":[3,8]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":234,\r\n\t\t\t"name": "Axe 5",\r\n\t\t\t"type":"axe",\r\n\t\t\t"typemod":"attack",\r\n\t\t\t"level": 50,\r\n\t\t\t"modifier":50,\r\n\t\t\t"staticsheet":4,\r\n\t\t\t"spriteName":"weapons",\r\n\t\t\t"offset":[4,8]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":235,\r\n\t\t\t"name": "Axe 6",\r\n\t\t\t"type":"axe",\r\n\t\t\t"typemod":"attack",\r\n\t\t\t"level": 60,\r\n\t\t\t"modifier":60,\r\n\t\t\t"staticsheet":4,\r\n\t\t\t"spriteName":"weapons",\r\n\t\t\t"offset":[5,8]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":236,\r\n\t\t\t"name": "Axe 7",\r\n\t\t\t"type":"axe",\r\n\t\t\t"typemod":"attack",\r\n\t\t\t"level": 70,\r\n\t\t\t"modifier":70,\r\n\t\t\t"staticsheet":4,\r\n\t\t\t"spriteName":"weapons",\r\n\t\t\t"offset":[6,8]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":237,\r\n\t\t\t"name": "Axe 8",\r\n\t\t\t"type":"axe",\r\n\t\t\t"typemod":"attack",\r\n\t\t\t"level": 80,\r\n\t\t\t"modifier":80,\r\n\t\t\t"staticsheet":4,\r\n\t\t\t"spriteName":"weapons",\r\n\t\t\t"offset":[7,8]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":238,\r\n\t\t\t"name": "Axe 9",\r\n\t\t\t"type":"axe",\r\n\t\t\t"typemod":"attack",\r\n\t\t\t"level": 90,\r\n\t\t\t"modifier":90,\r\n\t\t\t"staticsheet":4,\r\n\t\t\t"spriteName":"weapons",\r\n\t\t\t"offset":[8,8]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":239,\r\n\t\t\t"name": "Axe 10",\r\n\t\t\t"type":"axe",\r\n\t\t\t"typemod":"attack",\r\n\t\t\t"level": 100,\r\n\t\t\t"modifier":100,\r\n\t\t\t"staticsheet":4,\r\n\t\t\t"spriteName":"weapons",\r\n\t\t\t"offset":[9,8]\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\t"id":300,\r\n\t\t\t"name": "Stone",\r\n\t\t\t"type":"craft",\r\n\t\t\t"level": 10,\r\n\t\t\t"staticsheet":5,\r\n\t\t\t"spriteName":"gather1",\r\n\t\t\t"offset":[1,0]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":301,\r\n\t\t\t"name": "Coal",\r\n\t\t\t"type":"craft",\r\n\t\t\t"level": 20,\r\n\t\t\t"staticsheet":8,\r\n\t\t\t"spriteName":"nodeset2",\r\n\t\t\t"offset":[1,0]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":302,\r\n\t\t\t"name": "Light Iron",\r\n\t\t\t"type":"craft",\r\n\t\t\t"staticsheet":8,\r\n\t\t\t"spriteName":"nodeset2",\r\n\t\t\t"offset":[1,1]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":303,\r\n\t\t\t"name": "Medium Iron",\r\n\t\t\t"type":"craft",\r\n\t\t\t"staticsheet":8,\r\n\t\t\t"spriteName":"nodeset2",\r\n\t\t\t"offset":[1,2]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":304,\r\n\t\t\t"name": "Hard Iron",\r\n\t\t\t"type":"craft",\r\n\t\t\t"staticsheet":8,\r\n\t\t\t"spriteName":"nodeset2",\r\n\t\t\t"offset":[1,3]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":305,\r\n\t\t\t"name": "Iron Ingot 1",\r\n\t\t\t"type":"craft",\r\n\t\t\t"staticsheet":8,\r\n\t\t\t"spriteName":"nodeset2",\r\n\t\t\t"offset":[2,1]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":306,\r\n\t\t\t"name": "Iron Ingot 2",\r\n\t\t\t"type":"craft",\r\n\t\t\t"staticsheet":8,\r\n\t\t\t"spriteName":"nodeset2",\r\n\t\t\t"offset":[2,2]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":307,\r\n\t\t\t"name": "Iron Ingot 3",\r\n\t\t\t"type":"craft",\r\n\t\t\t"staticsheet":8,\r\n\t\t\t"spriteName":"nodeset2",\r\n\t\t\t"offset":[2,3]\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\t"id":310,\r\n\t\t\t"name": "Leather 1",\r\n\t\t\t"type":"craft",\r\n\t\t\t"staticsheet":6,\r\n\t\t\t"spriteName":"craft1",\r\n\t\t\t"offset":[0,0]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":311,\r\n\t\t\t"name": "Leather 2",\r\n\t\t\t"type":"craft",\r\n\t\t\t"staticsheet":6,\r\n\t\t\t"spriteName":"craft1",\r\n\t\t\t"offset":[1,0]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":312,\r\n\t\t\t"name": "Leather 3",\r\n\t\t\t"type":"craft",\r\n\t\t\t"staticsheet":6,\r\n\t\t\t"spriteName":"craft1",\r\n\t\t\t"offset":[2,0]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":313,\r\n\t\t\t"name": "Leather 4",\r\n\t\t\t"type":"craft",\r\n\t\t\t"staticsheet":6,\r\n\t\t\t"spriteName":"craft1",\r\n\t\t\t"offset":[3,0]\r\n\t\t},\r\n\t\t{\r\n\t\t\t"id":320,\r\n\t\t\t"name": "Wood",\r\n\t\t\t"type":"craft",\r\n\t\t\t"staticsheet":7,\r\n\t\t\t"spriteName":"craft2",\r\n\t\t\t"offset":[0,0]\r\n\t\t}\r\n\r\n]\r\n';});


define('text!data/../../shared/data/craft.json', function () { return '[\r\n  {"i": [[310,16]],"o": 104},\r\n  {"i": [[310,4]],"o": 105},\r\n  {"i": [[310,4]],"o": 106},\r\n  {"i": [[310,4]],"o": 107},\r\n  {"i": [[311,16]],"o": 108},\r\n  {"i": [[311,4]],"o": 109},\r\n  {"i": [[311,4]],"o": 110},\r\n  {"i": [[311,4]],"o": 111},\r\n  {"i": [[312,16]],"o": 112},\r\n  {"i": [[312,4]],"o": 113},\r\n  {"i": [[312,4]],"o": 114},\r\n  {"i": [[312,4]],"o": 115},\r\n\r\n  {"i": [[301,1],[302,3]],"o": 305},\r\n  {"i": [[301,1],[303,3]],"o": 306},\r\n  {"i": [[301,1],[304,3]],"o": 307},\r\n\r\n  {"i": [[301,6],[305,10]],"o": 201},\r\n  {"i": [[301,6],[305,10]],"o": 211},\r\n  {"i": [[301,6],[305,10]],"o": 221},\r\n  {"i": [[301,6],[305,10]],"o": 231},\r\n  {"i": [[301,6],[306,10]],"o": 202},\r\n  {"i": [[301,6],[306,10]],"o": 212},\r\n  {"i": [[301,6],[306,10]],"o": 222},\r\n  {"i": [[301,6],[306,10]],"o": 232},\r\n  {"i": [[301,6],[307,10]],"o": 203},\r\n  {"i": [[301,6],[307,10]],"o": 213},\r\n  {"i": [[301,6],[307,10]],"o": 223},\r\n  {"i": [[301,6],[307,10]],"o": 233}\r\n]\r\n';});


define('text!data/../../shared/data/staticsheet.json', function () { return '[\r\n  {\r\n    "id": 0\r\n  },\r\n  {\r\n    "id": 1,\r\n    "sheet":"misc/armoricons.png",\r\n    "width": 320,\r\n    "height": 320,\r\n    "spritewidth": 32,\r\n    "spriteheight": 32,\r\n    "scale": 1.5\r\n  },\r\n  {\r\n    "id": 2,\r\n    "sheet":"misc/mainweaponarmor.png",\r\n    "width": 768,\r\n    "height": 624,\r\n    "spritewidth": 48,\r\n    "spriteheight": 48,\r\n    "scale": 1\r\n  },\r\n  {\r\n    "id": 3,\r\n    "sheet":"misc/itemloot.png",\r\n    "width": 352,\r\n    "height": 320,\r\n    "spritewidth": 32,\r\n    "spriteheight": 32,\r\n    "scale": 1\r\n  },\r\n  {\r\n    "id": 4,\r\n    "sheet":"misc/weaponicons.png",\r\n    "width": 320,\r\n    "height": 320,\r\n    "spritewidth": 32,\r\n    "spriteheight": 32,\r\n    "scale": 1.5\r\n  },\r\n  {\r\n    "id": 5,\r\n    "sheet":"misc/nodeset1.png",\r\n    "width": 96,\r\n    "height": 736,\r\n    "spritewidth": 32,\r\n    "spriteheight": 32,\r\n    "scale": 1\r\n  },\r\n  {\r\n    "id": 6,\r\n    "sheet":"misc/craft1.png",\r\n    "width": 128,\r\n    "height": 32,\r\n    "spritewidth": 32,\r\n    "spriteheight": 32,\r\n    "scale": 1.5\r\n  },\r\n  {\r\n    "id": 7,\r\n    "sheet":"misc/craft2.png",\r\n    "width": 528,\r\n    "height": 528,\r\n    "spritewidth": 48,\r\n    "spriteheight": 48,\r\n    "scale": 1\r\n  },\r\n  {\r\n    "id": 8,\r\n    "sheet":"misc/nodeset2.png",\r\n    "width": 96,\r\n    "height": 128,\r\n    "spritewidth": 32,\r\n    "spriteheight": 32,\r\n    "scale": 1\r\n  }\r\n\r\n]\r\n';});


define('data/items',['text!../../shared/data/items2.json', 'text!../../shared/data/craft.json', 'text!../../shared/data/staticsheet.json', '../entity/item', 'data/itemlootdata'], function(ItemsJson, CraftJson, staticsheet, Item, ItemLoot) {

	var Items = {};
	var CraftData = JSON.parse(CraftJson);
	var id = 0;
	for (var craft of CraftData) {
		craft.id = id++;
	}

	var getCraftData = function (index) {
		var data = [];
		for (var craft of CraftData)
		{
			if (craft.o == index)
				data.push(craft);
		}
		return data;
	};

	var Staticsheet = JSON.parse(staticsheet);
	var kindData = {};
	kindData[0] = null;
	var itemParse = JSON.parse(ItemsJson);
	//log.info(JSON.stringify(itemParse));
	$.each( itemParse, function( itemKey, itemValue ) {
		var kind = itemValue.id;
		if (itemValue.type == "weapon" || itemValue.type == "weaponarcher") {
			Items[itemKey+1] = Item.extend({
				init: function(id) {
					this._super(id, parseInt(itemKey), itemValue.type);
				}
			});
		}
		else if (ItemTypes.isArmor(kind) ||
			 itemValue.type == "object" || itemValue.type == "craft") {
			Items[itemKey+1] = Item.extend({
				init: function(id) {
					this._super(id, parseInt(itemKey), itemValue.type);
				}
			});
		}
		kindData[kind] = {
			name: itemValue.name,
			type: (itemValue.type) ? itemValue.type : "object",
			damageType: (itemValue.damageType) ? itemValue.damageType : "none",
			typemod: (itemValue.typemod) ? itemValue.typemod : "none",
			modifier: (itemValue.modifier) ? itemValue.modifier : 0,
			hand: (itemValue.hand) ? itemValue.hand : 0,
			sprite: (itemValue.sprite) ? itemValue.sprite : "",
			spriteName: (itemValue.spriteName) ? itemValue.spriteName : "",
			offset: (itemValue.offset) ? itemValue.offset : [0,0],
			buy: (itemValue.buy) ? itemValue.buy : 0,
			buycount: (itemValue.buycount) ? itemValue.buycount : 1,
			staticsheet: (itemValue.staticsheet > 0) ? itemValue.staticsheet : 0,
			level: (itemValue.level) ? itemValue.level : itemValue.modifier,
			legacy: (itemValue.legacy) ? itemValue.legacy : 0,
			//craft: (itemValue.craft) ? itemValue.craft : [],
			craft: getCraftData(kind)
		};
	});

	ItemTypes.setKindData(kindData);

	Items.getStaticSheet = function () {
		return Staticsheet;
	}

	Items.itemLoad = {};

	Items.jqShowItem = function (jq, item, jqn, size) {
		size = size || 1;
		var kind = item.itemKind;
		var itemCount = item.itemNumber;
		var itemData = ItemTypes.KindData[kind];
		if (item.sprite) {
			var spriteName = "item/item-"+item.sprite+".png";
			itemData = {sprite: spriteName, offset: [0,0]};
		}
		if (kind >= 1000 && kind < 2000) {
			itemData = ItemLoot[kind - 1000];
		}

		var scale = 2;
		if (itemData.staticsheet > 0) {
			var data = Staticsheet[itemData.staticsheet];
			if (size > 1)
				data.scale = size;

			var ow = (itemData.offset[0]*data.spritewidth*data.scale);
			var oh = (itemData.offset[1]*data.spriteheight*data.scale);

			var margin = (56 - (data.spritewidth*data.scale)) >> 1;
			jq.css({'background-image': "url('img/" + scale + "/sprites/" + data.sheet + "')",
				'background-size': ~~(data.width*data.scale)+"px "+ ~~(data.height*data.scale)+"px",
				'background-position': '-'+ow+'px -'+oh+'px',
				'margin': margin+'px',
				'line-height': (51-(margin<<1))+'px'
			});
			jq.width(data.spritewidth*data.scale);
			jq.height(data.spriteheight*data.scale);

		}
		else {
			var spriteName = itemData.sprite;
			if (kind >= 1000 && kind < 2000) {
				spriteName = game.sprites["itemloot"].file;
			} else if (ItemTypes.isEquippable(kind)) {
				spriteName = game.sprites["items"].file;
			}

			var scale = 3;

			var margin = (56 - (scale*16)) >> 1;

			var resize = function (img) {
				jq.css({
					'background-size': ~~(img.width*size)+"px "+ ~~(img.height*size)+"px",
					'background-position': '-'+(itemData.offset[0]*scale*16*size)+'px -'+(itemData.offset[1]*scale*16*size)+'px',
				});
				jq.width(scale*16*size);
				jq.height(scale*16*size);
			};

			var filename = "img/"+scale+"/" + spriteName;

			jq.css({'background-image': "url('"+filename+"')",
				'background-size': "auto",
				'background-position': '-'+(itemData.offset[0]*scale*16)+'px -'+(itemData.offset[1]*scale*16)+'px',
				'margin': margin+'px',
				'line-height': (51-(margin<<1))+'px'
			});

			jq.width(scale*16*size);
			jq.height(scale*16*size);

			if (size > 1)
			{
				var img = null;
				if (Items.itemLoad[filename]) {
					img = Items.itemLoad[filename];
					resize(img)
				}
				else {
					img = new Image();
					img.src = "img/"+scale+"/" + spriteName;
					img.onload = function() {
						resize(img);
					}
					Items.itemLoad[filename] = img;
				}
			}
		}

		jq.attr('title', Item.getInfoMsgEx(item));
		jq.html(itemCount);

		if (jqn) {
			if (ItemTypes.isEquippable(kind)) {
				jqn.html(ItemTypes.getLevelByKind(kind) + '+' + itemCount);
			} else {
				if (itemCount > 1)
					jqn.html(itemCount);
			}
		}

	};

    return Items;
});

define('loaddata',['lib/class'], function() {

    var LoadData = Class.extend({
      init: function() {
        var self = this;

        this.loaded = false;
        this.tilesets = [];

        // Manifest Example
        var manifest = {
            bundles: [
                {
                    name: 'tilesets',
                    assets: [
                        {
                            name: 'ts-1-0',
                            srcs: 'img/common/tilesets/ts-1-0.png',
                        },
                        {
                            name: 'ts-1-1',
                            srcs: 'img/common/tilesets/ts-1-1.png',
                        },
                        {
                            name: 'ts-1-2',
                            srcs: 'img/common/tilesets/ts-1-2.png',
                        },
                        {
                            name: 'ts-1-3',
                            srcs: 'img/common/tilesets/ts-1-3.png',
                        },
                        {
                            name: 'ts-1-4',
                            srcs: 'img/common/tilesets/ts-1-4.png',
                        },
                        {
                            name: 'ts-1-5',
                            srcs: 'img/common/tilesets/ts-1-5.png',
                        },
                        {
                            name: 'ts-1-6',
                            srcs: 'img/common/tilesets/ts-1-6.png',
                        },
                        {
                            name: 'ts-1-7',
                            srcs: 'img/common/tilesets/ts-1-7.png',
                        },
                        {
                            name: 'ts-1-8',
                            srcs: 'img/common/tilesets/ts-1-8.png',
                        }
                    ],
                },
            ]
        };

        var loader = new PIXI.Loader();

        //const init = async function () { await Asset.init({ manifest }); };

        // Load a bundle...
        //const fnTilesets = async function() { await Assets.loadBundle('tilesets'); };

        //init();
        //fnTilesets();

        /*loader.add('ts-1-0', 'img/common/tilesets/ts-1-0.png');
        loader.add('ts-1-1', 'img/common/tilesets/ts-1-1.png');
        loader.add('ts-1-2', 'img/common/tilesets/ts-1-2.png');
        loader.add('ts-1-3', 'img/common/tilesets/ts-1-3.png');
        loader.add('ts-1-4', 'img/common/tilesets/ts-1-4.png');
        loader.add('ts-1-5', 'img/common/tilesets/ts-1-5.png');
        loader.add('ts-1-6', 'img/common/tilesets/ts-1-6.png');
        loader.add('ts-1-7', 'img/common/tilesets/ts-1-7.png');
        loader.add('ts-1-8', 'img/common/tilesets/ts-1-8.png');*/

        loader.add('ts-1-1', 'img/common/ts-1-1.png');
        loader.add('ts-1-2', 'img/common/ts-1-2.png');
        //loader.add('ts-1-3', 'img/common/ts-1-3.png');
        //loader.add('ts-1-4', 'img/common/ts-1-4.png');


        //loader.add('KomikaHand', 'fonts/KOMIKAH.TTF');
        loader.load(function (loader, resources) {
            self.tilesets = [
              //resources['ts-1-0'].texture,
              resources['ts-1-1'].texture,
              resources['ts-1-2'].texture,
              //resources['ts-1-3'].texture,
              //resources['ts-1-4'].texture,
              /*resources['ts-1-5'].texture,
              resources['ts-1-6'].texture,
              resources['ts-1-7'].texture,
              resources['ts-1-8'].texture*/
            ];
        });
        loader.onComplete.add(() => { self.loaded = true; })
      }
    });
    return LoadData;
});

/* global Detect, Class, _, log, Types, font */

define('renderer',['camera', 'entity/item', 'data/items', 'data/itemlootdata', 'entity/entity', 'entity/character', 'entity/player', 'timer', 'entity/mob', 'entity/npcmove', 'entity/npcstatic', 'entity/block', 'loaddata'],
    function(Camera, Item, Items, ItemLoot, Entity, Character, Player, Timer, Mob, NpcMove, NpcStatic, Block, LoadData) {
      var checkAnnouncement = function (self) {
          self.announcement = null;
          var sprite = self.pxSprite["announcement_0"];
          if (sprite) {
            Container.HUD2.removeChild(sprite);
            sprite = null;
          }
          if (self.announcements.length > 0)
          {
            self.announcement = self.announcements.shift();
          }
          setTimeout(function () { checkAnnouncement(self); },
            (self.announcement) ? self.announcement[1] : 5000
          );
      };

        var Renderer = Class.extend({
            init: function(game) {
                var self = this;
                this.game = game;

                this.loadData = new LoadData();

                PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.HARD_EDGE;
                PIXI.settings.ROUND_PIXELS = false;
                PIXI.settings.SORTABLE_CHILDREN = true;
                //PIXI.settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT = false;

                PIXI.tilemap.Constant = {
                    maxTextures: 16,
                    bufferSize: 8192,
                    boundSize: 4096,
                    boundCountPerBuffer: 4,
                    use32bitIndex: true,
                    SCALE_MODE: PIXI.SCALE_MODES.LINEAR,
                };

                WebFont.load({
                    custom: {
                        families: ['KomikaHand','GraphicPixel','AdvoCut']
                    },
                    loading: function() { console.log('Font(s) Loading'); },
                    active: function() { console.log('Font(s) Loaded'); },
                    inactive: function() { console.log('Font(s) Failure'); }
                });

                this.scale = this.getScaleFactor();

                this.resolution = 1;
                this.gameZoom = this.getGameZoom();

                this.calcScreenSize();


                var renderer = new PIXI.autoDetectRenderer (this.innerWidth, this.innerHeight, {
                      width: this.innerWidth,
                      height: this.innerHeight,
                      antialias: false,
                      transparent: false,
                      resolution: this.resolution,
                      autoResize: true,
                      class: "clickable"
                  });
                this.renderer = renderer;

                this.canvas = $("#canvas");
                this.canvas.css({
                   'cursor' : 'none'
                });

                this.centerStage();

                console.warn(this.renderer.type);
                if (this.renderer.type == PIXI.WEBGL_RENDERER){
                   console.warn('Using WebGL');
                 } else {
                   console.warn('Using Canvas');
                };

                this.renderer.view.style.position = "absolute";
                this.renderer.view.style.display = "block";
                this.renderer.view.id = "game";
                //this.renderer.resize(window.innerWidth, window.innerHeight);
                //Container.STAGE.width = window.innerWidth;
                //Container.STAGE.height = window.innerHeight;

                this.docCanvas = document.getElementById("canvas");
                this.docCanvas.appendChild(this.renderer.view);
                this.docCanvas.firstElementChild.getContext("2d", { willReadFrequently: true })

                Container.STAGE.addChild(Container.BACKGROUND);
                Container.STAGE.addChild(Container.ENTITIES);
                Container.STAGE.addChild(Container.FOREGROUND);
                Container.STAGE.addChild(Container.COLLISION);
                Container.STAGE.addChild(Container.COLLISION2);
                Container.STAGE.addChild(Container.HUD);
                Container.STAGE.addChild(Container.HUD2);

                //Container.BACKGROUND.sortableChildren = true;
                Container.ENTITIES.sortableChildren = true;

                Container.BACKGROUND.zIndex = 1;
                Container.ENTITIES.zIndex = 2;
                Container.FOREGROUND.zIndex = 3;
                Container.COLLISION.zIndex = 4;
                Container.COLLISION2.zIndex = 5;
                Container.HUD.zIndex = 6;
                Container.HUD2.zIndex = 7;

                //this.scale = 2;
                this.guiScale = 3;
                this.scaleHUD = 1;
                this.gameScale = 3;

                Container.BACKGROUND.scale.x = this.gameScale;
                Container.BACKGROUND.scale.y = this.gameScale;
                Container.ENTITIES.scale.x = this.gameScale;
                Container.ENTITIES.scale.y = this.gameScale;
                Container.FOREGROUND.scale.x = this.gameScale;
                Container.FOREGROUND.scale.y = this.gameScale;
                Container.COLLISION.scale.x = this.gameScale;
                Container.COLLISION.scale.y = this.gameScale;
                Container.COLLISION2.scale.x = 1;
                Container.COLLISION2.scale.y = 1;
                Container.HUD.scale.x = this.scaleHUD;
                Container.HUD.scale.y = this.scaleHUD;
                Container.HUD2.scale.x = 1;
                Container.HUD2.scale.y = 1;

                //Container.BACKGROUND.sortDirty = true;
                //Container.FOREGROUND.sortDirty = true;

                this.resources = {};
                this.tiles = {};

                this.initFPS();
                this.tilesize = 16;


                this.upscaledRendering = true;
				        this.rescaling = true;
                this.supportsSilhouettes = this.upscaledRendering;
                this.isFirefox = Detect.isFirefox();
                this.isCanary = Detect.isCanaryOnWindows();
                this.isEdge = Detect.isEdgeOnWindows();
                this.isSafari = Detect.isSafari();
                this.tablet = Detect.isTablet(window.innerWidth);
                this.mobile = Detect.isMobile();
                this.isTablet = this.tablet;
                this.isMobile = this.mobile;
                this.isDesktop = !(this.isTablet || this.isMobile);

                this.lastTime = 0;
                this.frameCount = 0;
                this.maxFPS = this.FPS;
                this.realFPS = 0;
                this.movingFPS = this.FPS;
                this.fullscreen = true;

                //Turn on or off Debuginfo (FPS Counter)
                this.isDebugInfoVisible = false;
                this.animatedTileCount = 0;
                this.highTileCount = 0;

                this.forceRedraw = true;

                this.delta = 0;
                this.last = Date.now();

                this.announcements = [];

                this.createCamera();

                this.guiScale = this.getUiScaleFactor();

                this.textures = {};
                this.sprite = {};
                this.spriteTextures = {};

                this.blankFrame = false;

                this.pxSprite = {};

                this.colTotal = 0;

                this.hitbarWidth = 0;

                this.tw = window.innerWidth;
                this.th = window.innerHeight;


                //this.scrollX = true;
                //this.scrollY = true;

                //setTimeout(checkAnnouncement, 5000);
                this.pushAnnouncement("this is a test", 5000);

                this.hitbar = document.getElementById("combathitbar-slider");
            },

            calcScreenSize: function () {
              this.gameWidth = Math.min(window.innerWidth,1920);
              this.gameHeight = Math.min(window.innerHeight,1080);
              this.fourKZoom = (window.innerWidth > this.gameWidth) ? window.innerWidth / this.gameWidth : 1;
              this.screenZoom = Math.min(screen.width/this.gameWidth,screen.height/this.gameHeight);
              this.renderZoom = this.gameZoom * this.screenZoom * this.fourKZoom;
              this.innerWidth = ~~(this.gameWidth * this.gameZoom);
              this.innerHeight = ~~(this.gameHeight * this.gameZoom);
              this.resolution = (this.gameZoom) / this.renderZoom;

            },

            getScaleFactor: function() {
                var w = window.innerWidth,
                    h = window.innerHeight,
                    scale = 3;

                /*if (w < 1000) {
                		scale = 2;
                } else if(w <= 1500 || h <= 870) {
                    scale = 2;
                } else {
                    scale = 3;
                }*/
                //scale = 3;
                return scale;
            },

            getUiScaleFactor: function() {
                var w = window.innerWidth,
                    h = window.innerHeight,
                    scale;

              	/*if (w < 1000)
              		scale = 1;
              	else if (w <=1500 || h <= 870)
              		scale = 2;
              	else
              		scale = 3;*/
                scale = 3;
                return scale;
            },

            getGameZoom: function() {
                var w = window.innerWidth,
                    h = window.innerHeight,
                    zoom;

                if (w < 1000)
              		zoom = 1.25;
              	else if (w <=1500 || h <= 870)
              		zoom = 1;
              	else
              		zoom = 0.85;

                return zoom;
            },

            getIconScaleFactor: function() {
                var w = window.innerWidth,
                    h = window.innerHeight,
                    scale;

                /*if (w < 1000)
              		scale = 1;
              	else if (w <=1500 || h <= 870)
              		scale = 2;
              	else
              		scale = 3;*/
                scale = 3;
                return scale;
            },

            getProportionFactor: function () {
                var w = window.innerWidth,
                    h = window.innerHeight;
            	if (w > h)
                    return w/h;
            	else
            	    return h/w;
            },

            rescale: function() {
                this.scale = this.getScaleFactor();

                this.initFPS();

                if(this.game.ready && this.game.renderer) {
                    this.game.setSpriteScale(this.scale);
                    this.game.inventoryHandler.scale = this.getUiScaleFactor();
                }
                this.scale = this.getScaleFactor();

                this.calcScreenSize();

                /*var screenZoom = Math.min(screen.width/this.gameWidth,screen.height/this.gameHeight);
                this.winZoom = (this.renderZoom * screenZoom);

                var innerZoom = (this.gameZoom/this.renderZoom);*/
                //this.innerWidth = ~~(this.gameWidth * this.renderZoom);
                //this.innerHeight = ~~(this.gameHeight * this.renderZoom);

                //zoom = (1 / innerZoom);


                this.renderer.resize(this.innerWidth, this.innerHeight);
                this.renderer.resolution = this.resolution;
                this.forceRedraw = true;
                //this.centerStage();
            },

            centerStage: function () {
              var roundTo = 100;
              var zoom = (~~((1/this.gameZoom * this.fourKZoom)*roundTo)/roundTo);
              var left = Math.max(window.innerWidth - (this.renderer.width*zoom),0);
              var top = Math.max(window.innerHeight - (this.renderer.height*zoom),0);
              var width = ~~(this.renderer.width*zoom);
              var height = ~~(this.renderer.height*zoom);
              //this.canvas.width(width);
              //this.canvas.height(height);
              this.canvas.css({
                left: ~~(left/2) + "px",
                top:  ~~(top/2) + "px",
                width: width + "px !important",
                height: height + "px !important",
                transform: "scale("+zoom+")",
              });
              this.forceRedraw = true;
            },

            createCamera: function() {
                this.camera = new Camera(game, this);
                //if (this.camera.focusEntity === undefined)
                this.camera.focusEntity = game.player;
            },

            resizeCanvases: function() {
              this.zoomExact = 1;
              this.zoom = 1;

              zoom1 = (Math.min(3840, 1920)/window.innerWidth);
              //zoom1 = (Math.min(this.innerWidth, 1920)/window.innerWidth);
              zoom2 = (Math.min(this.innerHeight, 1080)/window.innerHeight);

              this.zoom=Math.min(zoom1, zoom2);

              var uw = window.innerWidth;
              var uh = window.innerHeight;

              //this.renderer.view.width = uw;
              //this.renderer.view.height = uh;

    					this.gui = document.getElementById('gui');
              //this.canvas = document.getElementById('canvas');

              var zoom = 1/this.zoom;
    					//var zoom = (1/this.zoom);

    					//this.guizoom = window.innerWidth / 1536;

              this.guizoom = 1.25;
              if (this.isMobile)
                this.guizoom = 0.75;
              else if (this.isTablet)
                this.guizoom = 1.0;

              //this.renderer.view.style.width = uw+"px";
              //this.renderer.view.style.height = uh+"px";

    					var w = Math.round($(window).width() / this.guizoom);
    					var h = Math.round($(window).height() / this.guizoom);

    					this.gui.width = w;
    					this.gui.height = h;
    					this.gui.style.width = w+"px";
    					this.gui.style.height = h+"px";
    					log.debug("#gui set to " + this.gui.width + " x " + this.gui.height);

              this.gui.style.transform = "scale("+(this.guizoom*this.fourKZoom)+")";
              //this.canvas.width = window.innerWidth+"px";
              //this.canvas.style.transform = "scale("+zoom+")";

              this.camera.rescale();
              this.rescale();
              this.centerStage();

              this.forceRedraw = true;
            },

            initFPS: function() {
                this.FPS = 60;
            },

            initPIXI: function() {
              this.tilesets = this.loadData.tilesets;
              this.tiles.BACKGROUND = new PIXI.tilemap.CompositeRectTileLayer(0, this.tilesets);
              this.tiles.FOREGROUND = new PIXI.tilemap.CompositeRectTileLayer(0, this.tilesets);
              Container.BACKGROUND.addChild(this.tiles.BACKGROUND);
              Container.FOREGROUND.addChild(this.tiles.FOREGROUND);

              this.textStyleName = new PIXI.TextStyle({fontFamily: 'KomikaHand', stroke: 'black', strokeThickness: 1});
            },

            /*setFontSize: function(size) {
                var fontsize;
                switch(this.scale)
                {
            		    case 1:
            			fontsize = ~~(size/4); break;
            		    case 2:
            			fontsize = ~~(size/2); break;
            		    case 3:
            			fontsize = ~~(size); break;
            		}
                this.font = new PIXI.TextStyle();
                this.font.fontFamily = "GraphicPixel";
                this.font.fontSize = fontsize;

                return this.font;
            },*/

            pushAnnouncement: function (text, duration) {
            	this.announcements.push([text, duration]);
              checkAnnouncement(this);
            },

            drawAnnouncement: function () {
              var id = "announcement_0";

              var sprite = this.pxSprite[id];

              var announce = this.announcement;
              if (!announce)
                return;

              if (!sprite)
              {
                var style = new PIXI.TextStyle({
                  fontFamily: "KomikaHand",
                  fill: "#FFFF00",
                  fontSize: 6 * self.scale,
                  align: "center",
                });
                sprite = new PIXI.Text(announce[0], style);
                sprite.anchor.set(0.5,0.5);
                sprite.zIndex = 1000000;
                Container.HUD2.addChild(sprite);
                this.pxSprite[id] = sprite;
              }
              sprite.position.x = (this.renderer.width / 2);
              sprite.position.y = (this.renderer.height / 4);
            },

            drawText: function(ctx, text, x, y, centered, color, strokeColor, camera) {

            	this.strokeSize = 3;
                camera = camera || false;

                switch(this.scale) {
                    case 1:
                        this.strokeSize = 1; break;
                    case 2:
                        this.strokeSize = 2; break;
                }

                if(text && x && y) {
                    var style = this.defaultFont;
                    if(centered) {
                        style.align = "center";
                    }
                    style.stroke = strokeColor || "#373737";
                    style.strokeThickness = this.strokeSize;
                    style.fill = color || "white";

                    var pText = new PIXI.Text(text, style);
                    pText.x = x * this.scale * 3;
                    pText.y = y * this.scale * 3;
                }
            },

            drawCursor: function() {
                var mx = this.game.mouse.x,
                    my = this.game.mouse.y;
                var anim = this.game.currentCursor.currentAnimation;
                var frame = anim.currentFrame;
                if(this.game.currentCursor) {
                    this.drawSpriteHUD(this.game.currentCursor.pjsSprite,
                      frame.x, frame.y,
                      anim.width, anim.height, mx, my, anim.width, anim.height);
                }
            },

            getTexture: function (path)
            {
              if (!this.textures[path])
              {
                this.textures[path] = new PIXI.Texture.from(path);
              }
              return this.textures[path];
            },

            createSprite: function (csprite)
            {
              var tmp = this.getTexture(csprite.filepath).clone();
              var sprite = new PIXI.Sprite(tmp);
              sprite.width = csprite.width * this.gameScale;
              sprite.height = csprite.height * this.gameScale;
              sprite.flipX = false;
              sprite.flipY = false;
              sprite.visible = false;
              csprite.container.addChild(sprite);
              return sprite;
            },

            changeSprite: function (csprite, pjsSprite)
            {
              var texture = this.getTexture(csprite.filepath);
              var sprite = pjsSprite;
              sprite.texture = texture;
              sprite.width = csprite.width * this.gameScale;
              sprite.height = csprite.height * this.gameScale;
              sprite.flipX = false;
              sprite.flipY = false;
              sprite.visible = false;
              return sprite;
            },

            drawSpriteHUD: function(sprite, imgX, imgY, imgW, imgH, scrX, scrY, scrW, scrH, flipX, flipY)
            {
              var s = 2;
              var size = this.gameScale;
              this.drawSprite([sprite, imgX*s, imgY*s, imgW*s, imgH*s, scrX*size, scrY*size, scrW*size, scrH*size, flipX, flipY, 0, 0, 0]);
            },

            // array: sprite, imgX, imgY, imgW, imgH, scrX, scrY, scrW, scrH, flipX, flipY, z, anchorX, anchorY, visible, opacity
            drawSprite: function(data)
            {
              //var s = 2; //this.scale;
              var sprite = data[0];

              if (!sprite.texture.baseTexture.valid) return;
              sprite.texture.frame = new PIXI.Rectangle(data[1], data[2], data[3], data[4]);
              sprite.x = data[5];
              sprite.y = data[6];
              sprite.width = data[7];
              sprite.height = data[8];

              var flipX = data[9] || false;
              var flipY = data[10] || false;

              if (flipX) {
                if (sprite.scale.x > 0)
                  sprite.scale.x *= -1;
              } else {
                if (sprite.scale.x < 0)
                  sprite.scale.x *= -1;
              }
              if (flipY) {
                if (sprite.scale.y > 0)
                  sprite.scale.y *= -1;
              } else {
                if (sprite.scale.y < 0)
                  sprite.scale.y *= -1;
              }

              /*if (flipX != sprite.flipX) {
                sprite.scale.x*=-1;
                sprite.flipX = flipX;
              }
              if (flipY != sprite.flipY) {
                sprite.scale.y*=-1;
                sprite.flipY = flipY;
              }*/

              sprite.zIndex = data[11] || 0;
              sprite.anchor.x = data[12] || 0;
              sprite.anchor.y = data[13] || 0;

              sprite.visible = (data.length > 14) ? data[14] : true;
              sprite.opacity = data[15] || 1;

            },

            // containerName, tileid, tilesets, setW, x, y
            drawTile: function(arr) {
                var ts = G_TILESIZE;
                //var ix =x, iy =y;

                //if(tileid <= 0) return;

                 arr[4] *= ts;
                 arr[5] *= ts;

                 //var x2 = (getX(arr[1], arr[3]) * ts);
                 //var y2 = (~~(arr[1] / arr[3]) * ts);

                 var tileset = arr[2][0];

                 tileset.frame = new PIXI.Rectangle(0, 0, ts, ts);
                 tileset.frame.x = (getX(arr[1], arr[3]) * ts);
                 tileset.frame.y = (~~(arr[1] / arr[3]) * ts);
                 //tilesets[0].width = ts;
                 //tilesets[0].height = ts;
                 var container = this.tiles["BACKGROUND"];
                 if (arr[0] === 1)
                  container = this.tiles["FOREGROUND"];
                 container.addFrame(tileset, arr[4], arr[5], ts, ts);


                 // UNcomment to enable tile numbering.
                 /*var id = "tct_"+ix+"_"+iy;
                 var gs = this.gameScale;
                 var sprite = this.pxSprite[id];
                 if (!sprite)
                 {
                   var style = new PIXI.TextStyle({
                     fontFamily: "Arial",
                     fill: "#000000",
                     fontSize: 14,
                     align: "center",
                     fontWeight: "bold"
                   });
                   sprite = new PIXI.Text(ix+","+iy, style);
                   sprite.anchor.set(0.5,0.5);
                   Container.COLLISION2.addChild(sprite);
                   this.pxSprite[id] = sprite;
                 }
                 sprite.x = x * gs + ts*3/2;
                 sprite.y = y * gs + ts*3/2;
                 */
            },

      	    drawItem: function(entity) {
                entity.spriteChanged = game.player.isMoving();

                var itemData = ItemTypes.KindData[entity.kind];
                if (ItemTypes.isLootItem(entity.kind)) {
      	          itemData = ItemLoot[entity.kind - 1000];
      	        }

                var s = 2,
                    ts = G_TILESIZE,
                    w = entity.sprite.width,
                    h = entity.sprite.height;

                var x = itemData.offset[0] * w * s,
      	            y = itemData.offset[1] * h * s;

                var eo = this.getEntityOffset(),
                    idx = entity.x + eo[0],
                    idy = entity.y + eo[1],
                    dw = w,
                    dh = h,
                    z = (entity.y*(game.camera.gridW*ts)+entity.x) * 2;
                    //z = (y*(game.camera.gridW*ts)+x)*((game.camera.gridW*ts)*(game.camera.gridH*ts))+2;

                if (ItemTypes.isLootItem(entity.kind) || ItemTypes.isCraftItem(entity.kind)) {
                  dw /= 2;
                  dh /= 2;
                }

                try {
                    this.drawSprite([entity.pjsSprite, x, y, w*s, h*s, idx, idy, dw, dh, 0, 0, z, 0.5, 0.5]);
                } catch (err) {
                  log.info(err.message);
                  log.info(err.stack);
                }
      	    },

            drawEntityTargetPos: function (index, x, y) {
              var sprite = this.pxSprite["etp_"+index];
              if (!sprite)
              {
                var gfx = new PIXI.Graphics();
                var l = (this.tilesize >> 1);
                this.drawTarget(gfx, 0, 0, 0xff0000, l, 1);
                var texture = this.renderer.generateTexture(gfx);
                var sprite = new PIXI.Sprite(texture);
                Container.ENTITIES.addChild(sprite);
                this.pxSprite["etp_"+index] = sprite;
                sprite.anchor.set(0.5);
              }
              sprite.x = x;
              sprite.y = y;
            },

            /*drawTopLeft: function () {
              var sprite = this.pxSprite["tltarget_"];
              if (!sprite)
              {
                var gfx = new PIXI.Graphics();
                this.drawTarget(gfx, 0, 0, 0x0000ff, 16, 2);
                var texture = this.renderer.generateTexture(gfx);
                sprite = new PIXI.Sprite(texture);
                Container.COLLISION.addChild(sprite);
                sprite.anchor.set(0.5,0.5);
                sprite.zIndex = 999999999;

                this.pxSprite["tltarget_"] = sprite;
              }
              var c = game.camera,
                p = game.player,
                gs = this.gameScale;

              var w = (-this.cOffX+c.sox);
              var h = (-this.cOffY+c.soy);

              sprite.x = w;
              sprite.y = h;
            },*/

            drawCenter: function () {
              var sprite = this.pxSprite["center_"];
              if (!sprite)
              {
                var gfx = new PIXI.Graphics();
                this.drawTarget(gfx, 0, 0, 0xffff00, 16, 3);
                var texture = this.renderer.generateTexture(gfx);
                sprite = new PIXI.Sprite(texture);
                Container.HUD.addChild(sprite);
                sprite.anchor.set(0.5,0.5);
                sprite.zIndex = 999999999;

                this.pxSprite["center_"] = sprite;
              }
              var h = window.innerHeight / 2,
                  w = window.innerWidth / 2;
              var c = game.camera,
                p = game.player,
                gs = this.gameScale;

              w = (p.x - c.x)*gs;
              h = (p.y - c.y)*gs;

              sprite.x = w;
              sprite.y = h;
            },

            drawEntityTile: function (index, x, y) {
              var ts = this.tilesize;

              var sprite = this.pxSprite["et_"+index];
              if (!sprite)
              {
                var gfx = new PIXI.Graphics();
                var l = (this.tilesize >> 1);
                //this.drawSquare(gfx, 0, 0, 0x00ff00, l, 1);
                gfx.lineStyle(2, 0x00ff00)
                  .drawRoundedRect(x-l, y-l, l << 1, l << 1, 4);
                //this.drawTarget(gfx, 0, 0, 0x0000ff, l, 1);
                var texture = this.renderer.generateTexture(gfx);
                var sprite = new PIXI.Sprite(texture);
                Container.ENTITIES.addChild(sprite);
                this.pxSprite["et_"+index] = sprite;
                sprite.anchor.set(0.5);
                sprite.z = (y*(this.camera.gridW*ts)+x);
                sprite.alpha = 0.6;
              }
              sprite.x = x;
              sprite.y = y;
            },

            drawBubbles: function () {
              var self = this;
              _.each(game.bubbleManager.bubbles, function(bubble) {
                  self.drawBubble(bubble);
              });
            },

            showHarvestBar: function (entity) {
              var ts = G_TILESIZE;
              var harvestTime = entity.harvestDuration;
              if (!harvestTime)
                return;

              var duration = Date.now()-entity.startHarvestTime;
              var mod = Math.min(duration, harvestTime) / harvestTime;
              if (mod === 1)
                return;

              var id = "harvestbar_ol_"+entity.id;
              var sprite = this.pxSprite[id];
              var s = this.gameScale;
              var eo = this.getEntityOffset();
              var x = (entity.x + eo[0]) * s;
              var y = (entity.y + eo[1] - ts - (ts >> 1)) * s;

              var id2 = "harvestbar_il_"+entity.id;
              var sprite2 = this.pxSprite[id2];

              if (!sprite) {
                sprite = this.createBarOutline(x, y);
                this.pxSprite[id] = sprite;
                sprite2 = this.createBarInner(x, y, mod, 0x00FF00);
                this.pxSprite[id2] = sprite2;
              }

              sprite2.zindex = sprite.zIndex = (entity.y*(this.camera.gridW*ts)+entity.x);
              sprite2.mod = mod;

              sprite2.x = sprite.x = x;
              sprite2.y = sprite.y = y;

              var gs = this.gameScale;

              sprite2.x = x - (ts * (gs/2));
              sprite2.y = y;
              sprite2.width = ts*gs*mod;
            },

            showHealthBar: function (entity) {
              if (!(entity.stats && entity.stats.hp))
                return;


              var mod = entity.stats.hp / entity.stats.hpMax;
              if (mod === 1) {
                this.removeHealthBar(entity.id);
                return;
              }

              var ts = G_TILESIZE;
              var id = "healthbar_ol_"+entity.id;
              var sprite = this.pxSprite[id];
              var s = this.gameScale;
              var eo = this.getEntityOffset();
              var x = (entity.x + eo[0]) * s;
              var y = (entity.y + eo[1] - ts - (ts >> 1)) * s;

              var id2 = "healthbar_il_"+entity.id;
              var sprite2 = this.pxSprite[id2];

              if (!sprite) {
                sprite = this.createBarOutline(x, y);
                this.pxSprite[id] = sprite;
                sprite2 = this.createBarInner(x, y, mod, 0xFF0000);
                this.pxSprite[id2] = sprite2;
              }

              sprite2.zindex = sprite.zIndex = (entity.y*(this.camera.gridW*ts)+entity.x);
              sprite2.mod = mod;

              sprite2.x = sprite.x = x;
              sprite2.y = sprite.y = y;

              var gs = this.gameScale;

              sprite2.x = x - (ts * (gs/2));
              sprite2.y = y;
              sprite2.width = ts*gs*mod;
            },

            createBarOutline: function (x, y) {
              var gfx = new PIXI.Graphics();
              this.drawBarOutline(gfx, x, y);
              var tx = this.renderer.generateTexture(gfx);
              var sprite = new PIXI.Sprite(tx);
              sprite.anchor.set(0.5,0.5);
              sprite.alpha = 0.75;
              Container.HUD.addChild(sprite);
              return sprite;
            },

            createBarInner: function (x, y, mod, color) {
              var gfx = new PIXI.Graphics();
              this.drawBarInner(gfx, x, y, color);
              var tx = this.renderer.generateTexture(gfx);
              var sprite = new PIXI.Sprite(tx);
              sprite.anchor.set(0,0.5);
              sprite.alpha = 0.75;
              Container.HUD.addChild(sprite);
              return sprite;
            },

// TODO - Make Bubbles
            drawBubble: function (bubble) {
              var eo = this.getEntityOffset();
              var ts = G_TILESIZE;
              var c = game.camera;
              var s = this.scale;
              var id = "bub_"+bubble.id;
              var sprite = this.pxSprite[id];
              var x = (bubble.entity.x + eo[0]) * s;
              var y = (bubble.entity.y + eo[1]) * s;
              if (!sprite)
              {
                var gfx = new PIXI.Graphics();
                gfx.beginFill(0xffffff);
                gfx.lineStyle(2, 0x000000);

                var tw = Math.min(bubble.content.length*12*s,80*s);
                var style = new PIXI.TextStyle({
                  fontFamily: "KomikaHand",
                  fill: 0x000000,
                  fontSize: 5 * this.scale,
                  align: "center",
                  wordWrap: true,
                  wordWrapWidth: ~~(tw*1.3),
                  fontWeight: 900,
                  strokeThickness: 0,
                  //width: tw
                  //height: th
                });

                var txt = new PIXI.Text(bubble.content, style);

                x = (bubble.entity.x + eo[0] - ts/2) * s;
                y = (bubble.entity.y + eo[1] - tw/2) * s;

                //var th = Math.max(~~(bubble.content.length/32)*28,28);
                var th = ~~(txt.height * 1.25);
                tw = ~~(tw * 0.75);

                gfx.drawEllipse(x, y, tw, th);
                gfx.endFill();

                // Draw speech triangle.
                gfx.beginFill(0xffffff);
                gfx.moveTo(x, y+th*1.5);
                gfx.lineTo(x-ts/3, y+th);
                gfx.lineTo(x+ts/3, y+th);
                gfx.lineTo(x, y+th*1.5);
                gfx.endFill();

                // Hack cover speech triangle and ellipse join.
                gfx.lineStyle(2, 0xffffff);
                gfx.moveTo(x-ts/3, y+th);
                gfx.lineTo(x+ts/3, y+th);

                var texture = this.renderer.generateTexture(gfx);

                var sprite = new PIXI.Sprite(texture);
                sprite.anchor.set(0.5,0.5);
                sprite.alpha = 0.85;


                //var txth = 0.25 - (th/50*0.1);
                txt.anchor.set(0.5,0.35);
                txt.position.y = -(th/2);

                //sprite.alpha = 0.75;

                sprite.addChild(txt);

                //sprite.alpha = 1.0;
                Container.HUD.addChild(sprite);
                this.pxSprite[id] = sprite;

              }
              //var ax = x / (this.renderer.screen.width / 1);
              //var ay = y / (this.renderer.screen.height / 1);
              //sprite.anchor.set(ax, ay);
              sprite.anchor.set(0.5, 0.5);
              var os = (ts/2*s);
              x -= os;
              y -= sprite.height/2 + (os*2);
              sprite.x = x;
              sprite.y = y;
            },

            removeBubble: function (bubble) {
              var sprite = this.pxSprite["bub_"+bubble.id];
              Container.HUD.removeChild(sprite);
              this.pxSprite["bub_"+bubble.id] = null;
            },

            getEntityOffset: function () {
                var cv = this.getCameraView();
                var c = game.camera;
                return [cv[0], cv[1]];
            },

            drawEntity: function(entity) {
                var sprite = entity.sprite,
                    anim = entity.currentAnimation;

                entity.spriteChanged = true;

                if(!(anim && sprite))
                  return;

                var eo = this.getEntityOffset();
                var c = game.camera,
                    frame = anim.currentFrame,
                    s = 2,
                    x = frame.x * s,
                    y = frame.y * s,
                    w = sprite.width,
                    h = sprite.height,
                    offX = (sprite.width >> 1),
                    offY = (sprite.height >> 1),
                    ts = this.tilesize,
                    //tsh = ts >> 1,
                    ox = sprite.offsetX,
                    oy = sprite.offsetY,
                    dx = entity.x,
                    dy = entity.y,
                    dw = w,
                    dh = h,
                    z = (entity.y*(c.gridW*ts)+entity.x) * 2,
                    //tOff = 1.0*ts,
                    ex = (dx + eo[0]),
                    ey = (dy + eo[1]);
                if (entity == game.player) {
                  this.pex = ex;
                  this.pey = ey;
                }
                if (entity == game.player.target) {
                  this.drawEntityTile(entity.id, ex, ey);
                }
                else {
                  this.removeSprite(Container.ENTITIES, "et_"+entity.id);
                }

                //this.drawEntityTargetPos(entity.id, ex, ey);
                entity.fadeRatio = entity.getFadeRatio(this.game.currentTime);

                try {
                    var cx = 0.5, cy = 0.5;
                    if (entity instanceof NpcMove) {
                      ey -= (ts >> 1);
                    }
                    //ey -= ts / 2;
                    this.drawSprite([entity.pjsSprite, x, y, w*s, h*s, ex, ey,
                      dw, dh, entity.flipSpriteX, entity.flipSpriteY, z, cx, cy]);
                }
                catch (err) { log.info(err.message); log.info(err.stack); }

                if(entity instanceof Character && !(entity.isDead || entity.isDying) && entity.hasWeapon()) {
                    if (!entity.pjsWeaponSprite)
                      entity.setWeaponSprite();
                      //Container.ENTITIES.addChild(entity.pjsWeaponSprite);
                    var weapon = entity.getWeaponSprite();
                    if(weapon) {
                        var weaponAnimData = weapon.animationData[anim.name],
                            index = (weaponAnimData) ? frame.index < weaponAnimData.length ? frame.index : frame.index % weaponAnimData.length : 0,
                            wx = weapon.width * index * s,
                            wy = weapon.height * anim.row * s,
                            ww = weapon.width,
                            wh = weapon.height;

                          // Dont need for now.
                          //var wox = weapon.offsetX;
                          //    woy = weapon.offsetY;
                          var visible = !entity.hideWeapon;
                  				this.drawSprite([entity.pjsWeaponSprite, wx, wy, ww*s, wh*s,
                  					ex,
                  					ey,
                  					ww, wh, entity.flipSpriteX, entity.flipSpriteY, z+1, 0.5, 0.5, visible]);
                    }
                }

            },

            removeEntityStuff: function (entity) {
              this.removeHealthBar(entity.id);
              this.removeEntityName(entity.id);
              if (entity instanceof Player) {
                Container.ENTITIES.removeChild(entity.pjsWeaponSprite);
                entity.pjsWeaponSprite = null;
              }
            },

            drawEntities: function(dirtyOnly) {
                var self = this;
                //self.drawEntity(game.player);
                if (game.player && game.player.startHarvestTime > 0)
                  this.showHarvestBar(game.player);
                else {
                  this.removeHarvestBar(game.player.id);
                }

                self.camera.forEachInScreen(function (entity,id) {
                  if (!entity) return;

                  if (entity.isDying || entity.isDead) {
                    self.removeEntityStuff(entity);
                  }
                  else {
                    self.drawEntityName(entity);
                    if ((entity != game.player))
                      self.showHealthBar(entity);
                  }

                  if (entity instanceof Item)
                  {
                      self.drawItem(entity);
                  }
                  if (entity instanceof Entity)
                  {
                    if (!entity.isDead)
                      self.drawEntity(entity);
                  }

                });
            },

            /*drawEntityNames: function() {
                var self = this;
                self.camera.forEachInScreen(function (entity,id) {
                  self.drawEntityName(entity);
                });
            },*/

            drawEntityName: function(entity) {
                var color = '#FFFFFF';
                var name = "";
                //var offsetY = this.scale * -12;

                if(entity instanceof Player && entity.isMoving && !entity.isDead) {
                    color = (entity.id == this.game.playerId ? "#ffff00" : (entity.admin ? "#ff0000" : "#fcda5c"));
                    //color = (entity.influence > 0) ? '#00ff00' : color;
                    //color = (entity.influence < 0) ? '#ff0000' : color;

                    name = entity.name;
                }
                else if(entity instanceof Mob) {
                    var mobLvl = entity.level;
                    var playerLvl;

                    color = "#FFFF00";
                    if (entity.data.isAggressive)
                      color = "#FF3333";

                    name = "Level "+entity.level;
                }
                else if(entity.type === Types.EntityTypes.NPCSTATIC) {
                    color = "#FFFFFF";
                    name = entity.name;
                }
                else if(entity.type === Types.EntityTypes.NPCMOVE) {
                    color = "#00FFFF";
                    name = entity.name;
                }
            		else if(entity instanceof Item) {
            			var item = entity;
                  if (ItemTypes.isLootItem(item.kind)) {
                    if (item.count > 1)
                      name = item.count + "x ";
                    name += ItemLoot[item.kind - 1000].name;

                    offsetY = 0;
                  }
            			else if(ItemTypes.isConsumableItem(item.kind) || ItemTypes.isCraftItem(item.kind)) {
            			    if (item.count > 1)
            				      name = item.count + "x ";
                      name += ItemTypes.KindData[item.kind].name;
                      //offsetY = this.scale * -4;
            			}
            			else {
            			    name = ItemTypes.KindData[item.kind].modifier + '+' + item.count;
                      //offsetY = this.scale * -4;
            			}
            		}
                var s = this.gameScale;
                var eo = this.getEntityOffset();
                //var so = this.getScreenOffset();
                var sprite = this.pxSprite["en_"+entity.id];

                //var ox = c.wOffX * s;
                //var oy = c.wOffY * s;
                var ts = this.tilesize;
                var x = (entity.x + eo[0]) * s;
                var y = (entity.y + eo[1] - ts) * s;

                if (!sprite)
                {
                  var style = new PIXI.TextStyle({
                    fontFamily: "KomikaHand",
                    fill: color,
                    fontSize: 5 * this.scale,
                    align: "center",
                  });
                  sprite = new PIXI.Text(name, style);
                  sprite.anchor.set(0.5, 0.5);

                  Container.HUD.addChild(sprite);
                  this.pxSprite["en_"+entity.id] = sprite;
                }
                sprite.zIndex = (entity.y*(this.camera.gridW*ts)+entity.x);
                sprite.x = x;
                sprite.y = y;
            },

            removeEntityName: function (entityId)
            {
              this.removeSprite(Container.HUD, "en_"+entityId);
            },

            removeHealthBar: function (entityId) {
              this.removeSprite(Container.HUD, "healthbar_ol_"+entityId);
              this.removeSprite(Container.HUD, "healthbar_il_"+entityId);
            },

            removeHarvestBar: function (entityId) {
              this.removeSprite(Container.HUD, "harvestbar_ol_"+entityId);
              this.removeSprite(Container.HUD, "harvestbar_il_"+entityId);
            },

            removeEntity: function (entity)
            {
              Container.ENTITIES.removeChild(entity.pjsSprite);
              if (entity instanceof Player)
                Container.ENTITIES.removeChild(entity.pjsWeaponSprite);
              this.removeEntityName(entity.id);
              Container.ENTITIES.removeChild(this.pxSprite["et_"+entity.id]);
              Container.ENTITIES.removeChild(this.pxSprite["etp_"+entity.id]);
              this.removeHealthBar(entity.id);
            },

            drawTerrain: function(ctx) {
                var self = this,
                    p = this.game.player,
                    mc = this.game.mapContainer,
                    tilesetwidth = this.tilesets[0].baseTexture.width / mc.tilesize;

                var g = this.game,
                    m = this.game.map;

                if(g.started) {
      						g.camera.forEachVisibleValidPosition(function(x, y) {
                    //collide = mc.collisionGrid[y][x];
      							if(_.isArray(mc.tileGrid[y][x])) {
      								_.each(mc.tileGrid[y][x], function(id) {
      									if(!mc.isHighTile(id)) { // Don't draw unnecessary tiles
      										self.drawTile([0, id, self.tilesets, tilesetwidth, x, y]);
      									}
      								});
      							}
      							else {
      								var id = mc.tileGrid[y][x];
      								if(id) {
      									if(!mc.isHighTile(id)) { // Don't draw unnecessary tiles
      										self.drawTile([0, id, self.tilesets, tilesetwidth, x, y]);
      									}
      								}
      							}
      						}, 0, m);
                }
            },

            drawHighTerrain: function() {
                this.drawHighTiles();
            },

            drawAnimatedTiles: function() {
                return; // stub - remove.

                var self = this,
                    mc = this.game.mapContainer,
                    tilesetwidth = this.tilesets[0].baseTexture.width / this.tilesize;

                this.animatedTileCount = 0;
                this.game.forEachAnimatedTile(function (tile) {
                  self.drawTile([0, tile.id, self.tilesets, tilesetwidth, x, y]);
                  self.animatedTileCount += 1;
                });
            },

            drawHighTiles: function() {
                var self = this,
                    mc = this.game.mapContainer,
                    tilesetwidth = this.tilesets[0].baseTexture.width / this.tilesize,
                    g = this.game;

                g.camera.forEachVisibleValidPosition(function(x, y) {
                  if(_.isArray(mc.tileGrid[y][x])) {
                    _.each(mc.tileGrid[y][x], function(id) {
                      if(mc.isHighTile(id)) {
                        self.drawTile([1, id, self.tilesets, tilesetwidth, x, y]);
                      }
                    });
                  }
                  else {
                    var id = mc.tileGrid[y][x];
                    if(id) {
                      if(mc.isHighTile(id)) {
                        self.drawTile([1, id, self.tilesets, tilesetwidth, x, y]);
                      }
                    }
                  }
                }, 0, false);
            },

// TODO - Render in PIXIJS ?
            getFPS: function() {
                var //nowTime = new Date(),
                    diffTime = getTime() - this.lastTime;

                if (diffTime >= 1000) {
                    if (this.game.player.isMoving())
                      this.movingFPS = this.frameCount;
                    this.realFPS = this.frameCount;
                    this.frameCount = 0;
                    this.lastTime = getTime();

                }
                this.frameCount++;
                return "FPS: " + this.realFPS;
            },

            getCoordinates: function () {
              var ts = this.tilesize;
      				var realX = game.player.gx;
      				var realY = game.player.gy;
              var realX2 = game.player.x;
      				var realY2 = game.player.y;

      				if (this.game.player)
      				{
                //return "gx:"+realX+",gy:"+realY;
                return "gx:"+realX+",gy:"+realY; //+",x:"+realX2+",y:"+realY2;
      				}
              return "";
            },

            drawCombatHitBar: function () {
              if (game.player) {
                var attackPower = Math.min(game.currentTime - game.player.attackTime, ATTACK_MAX) / ATTACK_MAX;
                var width = ~~(228 * attackPower);
                if (Math.abs(width - this.hitbarWidth) > 2) {
                  this.hitbar.style.width = width+"px";
                  this.hitbarWidth = width;
                }
              }
            },

            drawDebugInfo: function() {
              var c = game.camera;
              var debugInfo = "";
              debugInfo += this.getFPS() + "\n";
              debugInfo += this.getCoordinates() + "\n";

              var s = this.scale;
              var sprite = this.pxSprite["pc_coords"];
              if (!sprite)
              {
                var style = new PIXI.TextStyle({
                  fontFamily: "GraphicPixel",
                  fill: "white",
                  fontSize: 18,
                  align: "right",
                  stroke: "black",
                  strokeThickness: 4,
                });
                sprite = new PIXI.Text(debugInfo, style);
                sprite.anchor.set(1.0,0);
                sprite.zIndex = 999;
                Container.HUD.addChild(sprite);
                this.pxSprite["pc_coords"] = sprite;
              }
              sprite.text = debugInfo;
              sprite.x = ~~(this.renderer.screen.width / Container.HUD.scale.x);
              sprite.y = ~~(this.renderer.screen.height / Container.HUD.scale.y * 0.06);

            },

// TODO - Draw in PIXIJS
            drawCombatInfo: function() {
              var self = this;

              this.game.infoManager.forEachInfo(function(info) {
                var id = "ci_"+info.id;

                var sprite = self.pxSprite[id];
                if (!sprite)
                {
                  var style = new PIXI.TextStyle({
                    fontFamily: "KomikaHand",
                    fill: info.fillColor,
                    fontSize: info.fontSize * self.scale,
                    align: "center",
                  });
                  sprite = new PIXI.Text(info.value, style);
                  sprite.anchor.set(0.5,0);
                  Container.HUD.addChild(sprite);
                  self.pxSprite[id] = sprite;
                }
                var left = ~~((info.x - self.camera.x)*3);
                var top = ~~((info.y - self.camera.y - self.tilesize)*3);

                sprite.text = info.value;
                sprite.x = left;
                sprite.y = top;
                sprite.alpha = info.opacity;
              });
            },

            removeSprite: function (container, id) {
              var sprite = this.pxSprite[id];
              if (sprite) {
                container.removeChild(sprite);
                this.pxSprite[id] = null;
              }
            },

            getScreenOffset: function () {
              //var wo = this.getWinOffset(this.scale);
              var c = this.camera;
              var gs = this.gameScale;
              var cv = this.getCameraView();

              //return [cv[0]+this.wox, cv[1]+this.woy];
              return [cv[0]+c.wOffX, cv[1]+c.wOffY];
            },

            getCameraView: function() {
              var c = this.camera;

              var x = (-c.x);
              var y = (-c.y);

              return [x,y];
            },

            drawBarOutline: function (gfx, x, y) {
              var gs = this.gameScale;
              var ts = G_TILESIZE;

              var w = ts*gs;
              var h = (ts >> 2)*gs;
              var x = x-(w >> 1);
              var y = y-(h >> 1);
              var border=2;

              gfx.lineStyle(border, "#000000")
                .moveTo(x,y)
                .lineTo(x+w,y)
                .lineTo(x+w,y+h)
                .lineTo(x,y+h)
                .lineTo(x,y);

              return gfx;
            },

            drawBarInner: function (gfx, x, y, color) {
              var gs = this.gameScale;
              var ts = G_TILESIZE;
              var w = ts*gs;
              var h = (ts >> 2)*gs;
              var border=2;

              x+=border >> 1;
              y+=border >> 1;
              w-=(border);
              h-=(border);

              gfx.beginFill(color)
                .drawRect(x, y, w, h)
                .endFill();

              return gfx;
            },

            drawTarget: function (gfx, x, y, color, l, thickness) {
              thickness = thickness || 2;
              l = l || (this.tilesize * this.scale) >> 1;
              gfx.lineStyle(thickness, color)
                 .moveTo(x-l, y)
                 .lineTo(x+l, y)
                 .lineStyle(thickness, color)
                 .moveTo(x, y-l)
                 .lineTo(x, y+l);
            },

            drawSquare: function (gfx, x, y, color, l, thickness) {
              thickness = thickness || 2;
              l = l || (this.tilesize * this.scale) >> 1;
              gfx.lineStyle(thickness, color)
                .drawRect(x-l, y-l, l << 1, l << 1);
              /*gfx.lineStyle(thickness, color)
                     .moveTo(x-l, y-l)
                     .lineTo(x+l, y-l)
                     .lineTo(x+l, y+l)
                     .lineTo(x-l, y+l)
                     .lineTo(x-l, y-l);*/
            },

            drawCollision: function () {
              var self = this,
                  mc = this.game.mapContainer,
                  g = this.game;

              var color = 0xFF0000;
              if(g.started) {
                var index = 0;
                g.camera.forEachVisibleValidPosition(function(x, y) {
                  if (mc.collisionGrid[y][x]) {
                    //console.warn("tile drawn");
                    self.drawCollisionTile(index++, x, y, color);
                  }
                });

                for(var i=index; i < this.colTotal; ++i)
                {
                  Container.COLLISION.removeChild(this.pxSprite["tc_"+i]);
                  this.pxSprite["tc_"+i] = null;
                }
                this.colTotal = index;
              }
            },

            drawCollisionTile: function (index, x, y, color) {
              var ts = this.tilesize;

              x = (x * ts);
              y = (y * ts);

              var sprite = this.pxSprite["tc_"+index];
              if (!sprite)
              {
                var gfx = new PIXI.Graphics();
                var l = (this.tilesize >> 1);
                this.drawSquare(gfx, x, y, color, l, 1);
                var texture = this.renderer.generateTexture(gfx);
                var sprite = new PIXI.Sprite(texture);
                Container.COLLISION.addChild(sprite);
                this.pxSprite["tc_"+index] = sprite;
              }
              sprite.x = x;
              sprite.y = y;
            },

            renderStaticCanvases: function() {
      				var c = this.camera;
              var mc = game.mapContainer;
              var fe = c.focusEntity;

              //log.info("c.sox:"+c.sox+",c.soy:"+c.soy);
              c.setRealCoords();

              if (mc)
                mc.moveGrid();

              var go = this.setGridOffset();
              this.setTilesOffset(go[0],go[1]);

              /*if (this.fegx === fe.gx && this.fegy === fe.gy)
                return;
              this.fegx = fe.gx;
              this.fegy = fe.gy;*/


              if (this.forceRedraw) // || fe.isMoving() || fe.keyMove)
              {
                this.refreshGrid();

                /*if (this.forceRedraw || !(this.fegx === fe.gx && this.fegy === fe.gy)) {
                  this.refreshGrid();
                  this.fegx = fe.gx;
                  this.fegy = fe.gy;
                }*/
              }
            },

            showCutScene: function () {
              var width = ~~($("#container").width()*this.gameZoom);
              var height = ~~($("#container").height()*this.gameZoom);

              var w = width;
              var h = Math.floor(height/8);
              var y2 = height;
              var y2max = y2-h;
              var y = -h;
              var ymax = 0;

              var sprite = this.pxSprite["cutscene_1"];
              var sprite2 = this.pxSprite["cutscene_2"];
              if (!sprite)
              {
                var gfx = new PIXI.Graphics();
                gfx.beginFill(0x000000)
                  .drawRect(0, 0, w, h)
                  .endFill();

                var texture = this.renderer.generateTexture(gfx);
                var sprite = new PIXI.Sprite(texture);
                Container.HUD.addChild(sprite);
                this.pxSprite["cutscene_1"] = sprite;

                var sprite2 = new PIXI.Sprite(texture);
                Container.HUD.addChild(sprite2);
                this.pxSprite["cutscene_2"] = sprite2;

                sprite.y=y;
                sprite2.y=y2;
              }
              if (sprite.y < ymax)
                sprite.y++;
              if (sprite2.y > y2max)
                sprite2.y--;
            },

            setGridOffset: function () {
              var c = this.camera;
              var mc = game.mapContainer;
              var fe = c.focusEntity;
              var ts = this.tilesize;
              if (!fe) return;

              var gx = fe.x >> 4;
              var gy = fe.y >> 4;

              this.sox = (fe.x - (gx * ts));
              this.soy = (fe.y - (gy * ts));

              //log.info("setGridOffset: r.sox:"+c.sox+"r.soy:"+c.soy);

              if (!c.scrollX) this.sox = 0;
              if (!c.scrollY) this.soy = 0;

              return [this.sox, this.soy];

            },

            refreshGrid: function () {
              //log.info("refreshGrid: START");
              this.clearTiles();
              this.drawTerrain();
              this.drawHighTerrain();
              //this.drawCollision();
              //log.info("refreshGrid: END");
            },

            setTilesOffset: function (x,y) {
              var ts = this.tilesize,
                  c = game.camera,
                  p = game.player,
                  gs = this.gameScale,
                  mc = game.mapContainer;

              x = -x;
              y = -y;

              var mx = Math.abs(c.rx-c.sx);
              var my = Math.abs(c.ry-c.sy);

              var offX = -c.wOffX;
              var offY = -c.wOffY;

              if (c.rx < c.sx) {
                offX = Math.min(offX+mx, 0);
              }
              if (c.ry < c.sy) {
                offY = Math.min(offY+my, 0);
              }
              if (c.rx > c.sx) {
                var max = -c.wOffX * 2;
                offX = Math.max(offX-mx, max);
              }
              if (c.ry > c.sy) {
                var max = -c.wOffY * 2;
                offY = Math.max(offY-my, max);
              }

              x += offX;
              y += offY;

              this.hOffX = x;
              this.hOffY = y;

              this.tiles.BACKGROUND.position.set(x,y);
              this.tiles.FOREGROUND.position.set(x,y);

              x *= gs;
              y *= gs;

              Container.COLLISION.x = x;
              Container.COLLISION.y = y;
              Container.COLLISION2.x = x;
              Container.COLLISION2.y = y;

              //log.info("offset x:"+x+",y:"+y);

            },

            clearTiles: function () {
              if (this.tiles.BACKGROUND)
                this.tiles.BACKGROUND.clear();
              if (this.tiles.FOREGROUND)
                this.tiles.FOREGROUND.clear();
            },

            clearFullTiles: function () {
              Container.BACKGROUND.children[0].clear();
              if (this.tiles.BACKGROUND) {
                this.tiles.BACKGROUND.clear();
              }
              //Container.BACKGROUND.removeChildren();
              Container.FOREGROUND.children[0].clear();
              if (this.tiles.FOREGROUND) {
                this.tiles.FOREGROUND.clear();
              }

              //Container.FOREGROUND.removeChildren();
              /*for (var child of Container.FOREGROUND.children) {
                child.clear();
              }
              for (var child of Container.BACKGROUND.children) {
                child.clear();
              }*/
            },

            clearEntities: function() {
                var self = this;
                self.camera.forEachInScreen(function (entity,id) {
                  if (entity) {
                    if (entity == game.player)
                      return;
                    self.removeEntity(entity);
                  }
                });
            },

            renderFrame: function() {
              if (!game.ready || this.blankFrame)
              {
// TODO Make compatible with all sprites.
                Container.HUD.removeChildren();
                Container.HUD2.removeChildren();
                //if (Container.HUD.children.length > 2)
                  //Container.HUD.removeChildren(2,Container.HUD.children.length);
                Container.COLLISION.removeChildren();
                this.pxSprite = {};
                this.clearFullTiles();
                //this.renderer.gl.flush();
                this.renderer.render(Container.STAGE);

                //game.initCursors();
                this.blankFrame = false;
                this.forceRedraw = true;
                this.drawEntity(game.player);
                game.initCursors();
                game.setCursor("hand");
                return;
              }

              //this.forceRedraw = true;

              if (!game.ready || !game.player || game.mapStatus < 2 ||
                  !game.mapContainer.gridReady || this.tilesets.length == 0 ||
                  !this.loadData.loaded) {
                this.forceRedraw = true;
                return;
              }

              this.delta = Date.now() - this.last;

              //this.renderer.clear();
              this.renderStaticCanvases();

              //this.showCutScene();

              this.drawEntities();

              //Container.HUD.clear();
              this.drawAnnouncement();

              //this.drawEntityNames();
              this.drawBubbles();

              this.drawCombatInfo();
              this.drawDebugInfo();
              this.drawCombatHitBar();
              this.drawCursor();

              //this.drawCenter();
              //this.drawEdgeLine();
              //this.drawTopLeft();
              //Container.STAGE.sortChildren();
              this.renderer.render(Container.STAGE);
              //this.renderer.gl.flush();

              this.last = Date.now();

              this.forceRedraw = false;
            }
        });

        return Renderer;
    });


var Detect = {};

Detect.supportsWebSocket = function() {
    return window.WebSocket || window.MozWebSocket;
};

Detect.userAgentContains = function(string) {
    return navigator.userAgent.indexOf(string) != -1;
};

Detect.isTablet = function(screenWidth) {
    if(screenWidth > 720) {
        if(Detect.userAgentContains('Android')
        || Detect.userAgentContains('Mobile') || Detect.userAgentContains('iPad')) {
            return true;
        }
    }
    return false;
}

Detect.isMobile = function() {
	if(Detect.userAgentContains('Mobile') 
	    || Detect.userAgentContains('iPhone')) 
	{
	    return true;
	}
	return false;
}


Detect.isWindows = function() {
    return Detect.userAgentContains('Windows');
}

Detect.isChromeOnWindows = function() {
    return Detect.userAgentContains('Chrome') && Detect.userAgentContains('Windows');
};

Detect.isCanaryOnWindows = function() {
    return Detect.userAgentContains('Chrome/52') && Detect.userAgentContains('Windows');
};

Detect.isEdgeOnWindows = function() {
    return Detect.userAgentContains('Edge') && Detect.userAgentContains('Windows');
};


Detect.isFirefox = function() {
    //alert("useragent="+navigator.userAgent);
    return Detect.userAgentContains('Firefox');
};

Detect.canPlayMP3 = function() {
    return Modernizr.audio.mp3;
};

Detect.isSafari = function() {
    return Detect.userAgentContains('Safari') && !Detect.userAgentContains('Chrome');
};

Detect.isOpera = function() {
    return Detect.userAgentContains('Opera');
};

Detect.isFirefoxAndroid = function() {
    return Detect.userAgentContains('Android') && Detect.userAgentContains('Firefox');
};

define("detect", function(){});


//importScripts('lib/underscore.min.js');

onmessage = function (event) {
    if (typeof mapData === "undefined")
      return;
    //if (!(event.data == "loadMap" || event.data == "loadMapGO"))
      //return;

    //if (event.data == "loadMapGO") {
      generateCollisionGrid();
      generatePlateauGrid();
    //}

    //if (typeof mapData === "undefined")
      postMessage(mapData);
};

function generateCollisionGrid() {
    var tileIndex = 0;

    mapData.grid = [];
    for(var j, i = 0; i < mapData.height; i++) {
        mapData.grid[i] = [];
        for(j = 0; j < mapData.width; j++) {
            mapData.grid[i][j] = false;
        }
    }

    _.each(mapData.collisions, function(tileIndex) {
        var pos = tileIndexToGridPosition(tileIndex+1);
        if (pos.y < mapData.grid.length && pos.x < mapData.grid[0].length)
        	mapData.grid[pos.y][pos.x] = true;
    });

    _.each(mapData.blocking, function(tileIndex) {
        var pos = tileIndexToGridPosition(tileIndex+1);
        if(mapData.grid[pos.y] !== undefined) {
            mapData.grid[pos.y][pos.x] = true;
        }
    });
}

function generatePlateauGrid() {
    var tileIndex = 0;

    mapData.plateauGrid = [];
    for(var j, i = 0; i < mapData.height; i++) {
        mapData.plateauGrid[i] = [];
        for(j = 0; j < mapData.width; j++) {
            if(_.include(mapData.plateau, tileIndex)) {
                mapData.plateauGrid[i][j] = true;
            } else {
                mapData.plateauGrid[i][j] = false;
            }
            tileIndex += 1;
        }
    }
}

function tileIndexToGridPosition(tileNum) {
    var x = 0,
        y = 0;

    var getX = function(num, w) {
        if(num == 0) {
            return 0;
        }
        return (num % w == 0) ? w - 1 : (num % w) - 1;
    };

    tileNum -= 1;
    x = getX(tileNum + 1, mapData.width);
    y = Math.floor(tileNum / mapData.width);

    return { x: x, y: y };
}
;
define("mapworker", function(){});

define('map',['detect', 'mapworker'], function(Detect, worker) {

  var Map = Class.extend({
    init: function(game, mapContainer, mapSubIndex) {
      var self = this;

      this.game = game;
      this.mapContainer = mapContainer;
      this.isLoaded = false;
      this.tilesetsLoaded = false;
      this.mapLoaded = false;
      this.mapSubIndex = mapSubIndex;
      this.mapName = mapContainer.mapName;
      this.focusOffset = {x1: -1, x2: -1, y1: -1, y2: -1};
      this.gridUpdated = false;
      this.dimensions = this.game.mapContainer.getSubMapIndexDimensions(this.mapSubIndex);

      var mc = this.mapContainer;
      try {
        var name = mc.mapName + "_"+this.mapSubIndex+".json";
        mc.zip.file(name).async("string").then(function(data) {
          self.loadMapData(JSON.parse(data));
        });
      }
      catch (err) {
        console.error(JSON.stringify(err));
      }
    },

    loadMapData: function(data) {
      this.isLoaded = false;
      this.data = data;
      this._initMap(this.data);
      this._generate();
      this.mapLoaded = true;
      this._isReady();
      this._initTilesets();
    },

    _isReady: function() {
      var self = this;
      this.isLoaded = true;
      if (this.ready_func) {
        this.ready_func(self);
      }
    },

    _generate: function() {
      var self = this;

      self._generateCollisionGrid();
      self._generateTileGrid();
    },

    /*_loadMap: function(useWorker) {
      var self = this,
        filepath = "./maps/"+this.mapContainer.mapName+ "_"+this.mapSubIndex+".json";

      if (useWorker) {
        log.info("Loading map with web worker.");
        var worker = new Worker('js/mapworker.js');
        worker.postMessage("loadMap");

        worker.onmessage = function(event) {
          var map = event.data;
          self._initMap(map);
          self._generate();
          self.mapLoaded = true;
          self._checkReady();
        };
      } else {
        log.info("Loading map via Ajax.");

        var jqxhr = $.getJSON(filepath, function(data) {
          self.data = data;
          self._initMap(self.data);
          self._generate();
          self.mapLoaded = true;
          self._isReady();
        });
      }
    },*/

    _initTilesets: function() {
      var tileset;

      this.tilesetCount = 1;
      this._loadTilesets();

    },

    _initMap: function(map) {
      this.width = map.width;
      this.height = map.height;
      //this.widthX = (map.width-1)*this.game.tilesize;
      //this.heightY = (map.height-1)*this.game.tilesize;
      this.tileData = map.data;
      this.collisionData = map.collision;

    },

    // TODO
    _loadTilesets: function() {
      this.tilesets = game.renderer.tilesets;
      this.tilesetsLoaded = true;
    },

    ready: function(f) {
      this.ready_func = f;
    },

    tileIndexToGridPosition: function(tileNum) {
      var x = 0,
        y = 0;

      var getX = function(num, w) {
        if (num == 0) {
          return 0;
        }
        return (num % w == 0) ? w - 1 : (num % w) - 1;
      };

      tileNum -= 1;
      x = getX(tileNum+1, this.width);
      y = Math.floor((tileNum) / this.width);

      return {
        x: x * TILESIZE,
        y: y * TILESIZE
      };
    },

    GridPositionToTileIndex: function(x, y) {
      return (y * this.width) + x;
    },

    _generateCollisionGrid: function() {
      this.collision = new Array(this.height);
      for (var j, i = 0; i < this.height; i++) {
        this.collision[i] = this.collisionData.slice(i * this.width, ((i+1) * this.width) );
      }
      delete this.collisionData;
      log.debug("Collision grid generated.");
    },

    _generateTileGrid: function() {
      this.tile = new Array(this.height);
      for (var i = 0; i < this.height; i++) {
        this.tile[i] = this.tileData.slice(i * this.width, ((i+1) * this.width) );
      }
      delete this.tileData;
      log.debug("tile grid generated.");
    },

    isColliding: function(gx, gy) {
      return (this.collision[gy][gx] === 1);
    },

  });

  return Map;
});


define('area',[],function() {

    var Area = Class.extend({
        init: function(x, y, width, height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        },

        contains: function(entity) {
            //var ts = TILESIZE;
            if(entity) {
                return entity.gx >= this.x
                    && entity.gy >= this.y
                    && entity.gx < this.x + this.width
                    && entity.gy < this.y + this.height;
            } else {
                return false;
            }
        }
    });

    return Area;
});

define('mapcontainer',['area', 'detect', 'mapworker', 'map'], function(Area, Detect, worker, Map) {

  var MapContainer = Class.extend({
    init: function(game, mapIndex, mapName) {
      var self = this;

      this.game = game;
      this.mapIndex = mapIndex;
      this.mapName = mapName;
      //this.data = [];
      this.isLoaded = false;
      this.mapLoaded = false;
      this.gridReady = false;
      this.maps = {};
      this.collisionGrid = [];
      this.tileGrid = [];
      this.itemGrid = [];
      this.count = 0;
      this.inc = 0;

      var $file = "./maps/"+this.mapName+".zip";
      JSZipUtils.getBinaryContent($file, function(err, data) {
          if(err) {
              throw err; // or handle err
          }

          JSZip.loadAsync(data).then(function(zip) {
            self.zip = zip;
            try {
              var name = self.mapName + "_GO.json";
              zip.file(name).async("string").then(function(data) {
                self.loadMap(JSON.parse(data));
              });
            }
            catch (err) {
              console.error(JSON.stringify(err));
            }
          });
      });

      //this.mapShifted = false;
      //this.skipGridMove = true;
      //this.loadMap(mapName);

    },

    loadMap: function(data) {
      //var useWorker = false;
      this.isLoaded = false;
      //this._loadMap(useWorker, mapName);
      this.data = data;
      this._initMap(this.data);
      this.mapLoaded = true;
      this._isReady();
    },

    _isReady: function() {
      var self = this;
      if (self.ready_func) {
        self.ready_func();
      }
      //game.renderer.forceRedraw = true;
      /*if (self.isLoaded) {
        clearInterval(checkInterval);
        return;
      }

      log.info("_checkReady");
      var checkInterval = setInterval(function() {

        if (self.isLoaded) {
          clearInterval(checkInterval);
          self.isLoaded = false;
          if (self.ready_func) {
            self.ready_func();
          }
        }
      }, 100);*/
    },

    /*_loadMap: function(useWorker, mapName) {
      var self = this,
        filepath = "./maps/" + mapName + "_GO.json";

      if (useWorker) {
        log.info("Loading map with web worker.");
        var worker = new Worker('js/mapworker.js');
        worker.postMessage("loadMapGO");

        worker.onmessage = function(event) {
          var map = event.data;
          self._initMap(map);
          self.mapLoaded = true;
          self._checkReady();
        };
      } else {
        log.info("Loading map via Ajax.");

        var jqxhr = $.getJSON(filepath, function(data) {
          self.data = data;
          self._initMap(self.data);
          self.mapLoaded = true;
          self._isReady();

        });
      }
    },*/

    _initGrids: function() {
      var c = game.camera;
      for(var i=0; i < c.gridHE; ++i) {
          this.collisionGrid[i] = [];
          this.itemGrid[i] = [];
          this.tileGrid[i] = [];
          for(var j=0; j < c.gridWE; ++j) {
              this.collisionGrid[i][j] = false;
              this.tileGrid[i][j] = 0;
              this.itemGrid[i][j] = {};
          }
      }
    },

    _initMap: function(map) {
      var c = game.camera;
      var gs = game.renderer.gameScale;
      var ts = game.tilesize;

      this.width = map.width;
      this.height = map.height;
      this.chunkWidth = 128;
      this.chunkHeight = 128;

      this.chunksX = Math.ceil(map.width / map.chunkWidth);
      this.chunksY = Math.ceil(map.height / map.chunkHeight);
      this.indexes = map.indexes;

      this.widthX = (map.width-1)*this.game.tilesize;
      this.heightY = (map.height-1)*this.game.tilesize;
      this.tilesize = map.tilesize;

      this.musicAreas = map.musicAreas || [];
      this.high = map.high || [];
      this.high = {};
      for (var h of map.high) {
        this.high[h] = true;
      }

      this.animated = map.animated;
      this.doors = this._getDoors(map);
      this.checkpoints = this._getCheckpoints(map);

      this.gridWidth = 128;
      this.gridHeight = 128;

      this.edgeX = this.gridWidth >> 1;
      this.edgeY = this.gridHeight >> 1;

      this.gcsx = 0;
      this.gcsy = 0;
      this.gcex = ((this.width) * ts) - ~~(c.screenW / gs);
      this.gcey = ((this.height) * ts) - ~~(c.screenH / gs);

      this._initGrids();
    },

    _getDoors: function(map) {
      var self = this;

      var doors = [];
      _.each(map.doors, function(door) {
        door.width = (door.width) ? door.width : 1;
        door.height = (door.height) ? door.height : 1;
        var area = new Area(door.x, door.y, door.width, door.height);
        area.minLevel = door.tminLevel,
          area.maxLevel = door.tmaxLevel,
          area.map = door.tmap,
          area.difficulty = door.tdifficulty,
          area.portal = door.p === 1,
          area.quest = door.tq,
          area.admin = door.a;
        switch (door.to) {
          case 'u':
            area.orientation = Types.Orientations.UP;
            break;
          case 'd':
            area.orientation = Types.Orientations.DOWN;
            break;
          case 'l':
            area.orientation = Types.Orientations.LEFT;
            break;
          case 'r':
            area.orientation = Types.Orientations.RIGHT;
            break;
          default:
            area.orientation = Types.Orientations.DOWN;
        }
        doors.push(area);
      });
      return doors;
    },

    ready: function(f) {
      this.ready_func = f;
    },

    OnAllReady: function () {
      this.all_ready_func();
      this.gridReady = true;
    },

    allReady: function(f) {
      this.all_ready_func = f;
    },

    /**
     * Returns true if the given tile id is "high", i.e. above all entities.
     * Used by the renderer to know which tiles to draw after all the entities
     * have been drawn.
     *
     * @param {Number} id The tile id in the tileset
     * @see Renderer.drawHighTiles
     */
    isHighTile: function(id) {
      return this.high[(id)];
      //return _.indexOf(this.high, id + 1) >= 0;
    },

    /**
     * Returns true if the tile is animated. Used by the renderer.
     * @param {Number} id The tile id in the tileset
     */
    isAnimatedTile: function(id) {
      return id + 1 in this.animated;
    },

    /**
     *
     */
    getTileAnimationLength: function(id) {
      return this.animated[id + 1].l;
    },

    /**
     *
     */
    getTileAnimationDelay: function(id) {
      var animProperties = this.animated[id + 1];
      if (animProperties.d) {
        return animProperties.d;
      } else {
        return 100;
      }
    },

    isDoor: function(x, y) {
      return _.detect(this.doors, function(door) {
        return (door.contains({
          gx: x,
          gy: y
        }) != null);
      });
    },


    getDoor: function(entity) {
      return _.detect(this.doors, function(door) {
        return door.contains(entity);
      });
    },

    _getCheckpoints: function(map) {
      var checkpoints = [];
      _.each(map.checkpoints, function(cp) {
        var area = new Area(cp.x, cp.y, cp.w, cp.h);
        area.id = cp.id;
        checkpoints.push(area);
      });
      return checkpoints;
    },

    getCurrentCheckpoint: function(entity) {
      return _.detect(this.checkpoints, function(checkpoint) {
        return checkpoint.contains(entity);
      });
    },

    getSubCoordinate: function (x,y) {
      x = x % (this.chunkWidth * this.tilesize);
      y = y % (this.chunkHeight * this.tilesize);
      return [x,y];
    },

    getSubIndex: function (gx,gy) {
      gx = gx.clamp(0, this.width-1);
      gy = gy.clamp(0, this.height-1);

      var index = ~~(gy / this.chunkHeight)*this.chunksX +
                     ~~(gx / this.chunkWidth);
      if (index < 0 || index > this.indexes)
        return null;

      return index;
    },

    getSubIndexRelative: function (x,y) {
      return this.getSubIndex(x >> 4, y >> 4);
    },

    getSubMapIndexDimensions: function (subIndex)
    {
        var map = this.maps[subIndex];
        var indexY = ~~(subIndex / this.chunksX) * (this.chunkHeight);
        var indexX = (subIndex % this.chunksX) * (this.chunkWidth);

        var dimension = {
          x1: indexX,
          x2: indexX + (this.chunkWidth),
          y1: indexY,
          y2: indexY + (this.chunkHeight)
        };
        return dimension;
    },

    GridPositionToTileIndex: function(x, y) {
      return (y * this.width) + x;
    },

    GetMap: function (index) {
      var self = this;
      var map;
      if (!this.maps[index]) {
        map = new Map(this.game, this, index);
        //map.ready(this.MapReady);
        map.ready(function () {
          //self._updateMapOffsets(map);
          //self._updateGrid(map);
          map.gridUpdated = true;
          //map.refreshMap = true;
          game.renderer.forceRedraw = true;
        });

        this.maps[index] = map;
        this.count++;
      } else {
        map = this.maps[index];
      }
      return map;
    },

    LoadMaps: function () {
        var self = this;
        var map;
        var ts = game.tilesize;

        for (var i in this.maps)
        {
          map = this.maps[i];
          map.ready(function () {
            this.gridUpdated = true;
            if ((++self.inc) == self.count) {
              self.OnAllReady();
              self.inc = 0;
              self.moveGrid(true);
              game.renderer.forceRedraw = true;
              self.gridReady = true;
            }
          });
        //  map.loadMap();
        }
    },

    reloadMaps: function (init)
    {
      var ts = game.tilesize;
      var c = game.camera;
      var fe = c.focusEntity;
      if (!fe)
        return false;

      var gx = fe.gx, gy = fe.gy;

      for (var i=0; i < this.indexes; i++)
      {
        var dim = this.getSubMapIndexDimensions(i);
        var mapPoint = {x: (dim.x1+dim.x2)/2, y: (dim.y1+dim.y2)/2}
        var distX = Math.abs(mapPoint.x-gx);
        var distY = Math.abs(mapPoint.y-gy);
        if ( (distX + distY) < (this.chunkHeight * 2) )
        {
          if (!this.maps[i]) {
            this.GetMap(i);
          }
        }
        else if ( (distX + distY) > (this.chunkHeight * 4))
        {
          if (this.maps.hasOwnProperty(i)) {
            this.maps[i] = null;
          }
        }
      }
      if (init)
        this.LoadMaps();
    },

    moveGrid: function (force)
    {
      var self = this;
      var r = game.renderer;
      var ts = game.tilesize;
      var c = game.camera;
      var fe = c.focusEntity;

      if (!fe || !this.gridReady)
        return false;

      this.reloadMaps();

      for (var i in this.maps)
      {
        map = this.maps[i];
        if (!(map && map.isLoaded))
          continue;

        var dim = this.getSubMapIndexDimensions(i);

        var sr = {x1: c.x, y1: c.y,
                  x2: c.x + (c.gridWE * ts), y2: c.y + (c.gridHE * ts)};
        var mr = {x1: (dim.x1 * ts), y1: (dim.y1 * ts),
                  x2: (dim.x2 * ts), y2: (dim.y2 * ts)};

        var res = RectContains(sr, mr);
        if (res)
        {
          this._updateGrid(map);
        }
      }

      game.renderer.forceRedraw = true;
      return true;
    },

    _updateGrid: function (map)
    {
      //console.warn("_updateGrid - called.")
      var r = game.renderer;
      var c = game.camera;
      var gs = game.renderer.gameScale;
      var ts = G_TILESIZE;

      var cgw = c.gridWE;
      var cgh = c.gridHE;

      var fe = c.focusEntity;
      var dim = map.dimensions;

      var cgw = c.gridWE;
      var cgh = c.gridHE;
      var cgwh = (cgw >> 1);
      var cghh = (cgh >> 1);

      var hgw = ~~(c.screenW / (2*gs*ts));
      var hgh = ~~(c.screenH / (2*gs*ts));

      var cw = this.chunkWidth;
      var ch = this.chunkHeight;

      var gx = fe.x >> 4, gy = fe.y >> 4;

      var sw = this.width;
      var sh = this.height;

      var tx = (gx-cgwh).clamp(0, sw-cgw);
      var ty = (gy-cghh).clamp(0, sh-cgh);

      gx = tx, gy = ty;

      var dim = map.dimensions;


      var sgx = gx % cw,
          sgy = gy % ch;

      var msx = (dim.x1-gx),
          msy = (dim.y1-gy);

      var gsx = Math.max(msx, 0),
          gsy = Math.max(msy, 0),
          gex = Math.min((dim.x2-gx), cgw),
          gey = Math.min((dim.y2-gy), cgh);

      var ox = (msx > 0) ? 0 : sgx;
      var oy = (msy > 0) ? 0 : sgy;

      //console.warn("ox:"+ox+",oy:"+oy);
      for(var i=gsy, k=oy, l=ox; i < gey; ++i, ++k) {
          l = ox;
          for(var j=gsx; j < gex; ++j, ++l) {
            //if (k < 0 || k >= this.chunkHeight || l < 0 || l >= this.chunkWidth)
              //console.error("mc._updateGrid - out of bounds: i j, k l,"+i+" "+j+" "+","+k+" "+l);
            this.collisionGrid[i][j] = map.collision[k][l];
            this.tileGrid[i][j] = map.tile[k][l];
          }
      }
    },

    isColliding: function(x, y)
    {
      var x1 = ~~(x >> 4),
          y1 = ~~(y >> 4),
          x2 = ~~(x1 + 0.5),
          y2 = ~~(y1 + 0.5);

      var arr = [[x1,y1], [x1,y2], [x2,y1], [x2,y2]];

      var c = arr[0];
      if (this.isOutOfBounds(c[0], c[1])) {
          return true;
      }
      c = arr[3];
      if (this.isOutOfBounds(c[0], c[1])) {
          return true;
      }

      c = null;
      for (c of arr) {
        if (this.isCollidingGrid(c[0], c[1])) {
            return true;
        }
      }
      return false;
    },

    isCollidingGrid: function(gx, gy) {
      var index = this.getSubIndex(gx,gy);
      var map = this.maps[index];
      if (!map)
        return true;

      gx -= map.dimensions.x1;
      gy -= map.dimensions.y1;

      return map.isColliding(gx,gy);
    },

    /**
     * Returns true if the given position is located within the dimensions of the map.
     *
     * @returns {Boolean} Whether the position is out of bounds.
     */
    isOutOfBounds: function(x, y) {
      return !isInt(x) || !isInt(y) || (x < 0 || x >= (this.width) || y < 0 || y >= (this.height));
    },

    /**
     * Returns true if the given position is located within the dimensions of the map.
     *
     * @returns {Boolean} Whether the position is out of bounds.
     */
    isOutOfCameraBounds: function(x, y) {
      var ts = game.tilesize,
          to = game.tilesize >> 1;
      return !isInt(x) || !isInt(y) || (x < to || x >= (this.width*ts-to) || y < (to) || y >= (this.height*ts-(to)));
    },

    isHarvestTile: function (pos, type) {
      //var gx = pos.x >> 4, gy = pos.y >> 4;
      var tiles = this.getTiles(pos.gx,pos.gy);
      if (!tiles || tiles.length == 0)
        return false;

      log.info("tiles="+JSON.stringify(tiles));
      var types = {}
      types.axe = [678, 679, 698, 699, 855, 875, 274, 275, 294, 295];
      if (!types.hasOwnProperty(type))
        return false;

      //var harvestTiles = [678, 679, 698, 699, 855, 875];
      var res = types[type].some(function (tile) { return tiles.includes(tile); });
      return res;
    },

    getTiles: function (gx,gy) {
      var mapIndex = this.getSubIndex(gx, gy);
      var map = this.maps[mapIndex];
      var tx = gx % this.chunkWidth, ty = gy % this.chunkHeight;
      return map.tile[ty][tx];
    },

  });

  return MapContainer;
});


define('animation',[],function() {

    var Animation = Class.extend({
        init: function(name, length, col, row, width, height) {
            this.name = name;
            this.length = length;
            this.col = col;
            this.row = row;
            this.width = width;
            this.height = height;
            this.reset();
        },

        tick: function() {
            var i = this.currentFrame.index;

            i = (i < this.length - 1) ? i + 1 : 0;

            if(this.count > 0) {
                if(i === 0) {
                    this.count -= 1;
                    if(this.count === 0) {
                        this.currentFrame.index = 0;
                        this.endcount_callback();
                        return;
                    }
                }
            }

            this.currentFrame.x = this.width * (i + this.col);
            this.currentFrame.y = this.height * this.row;
            this.currentFrame.i = (i + this.col);
            this.currentFrame.j = this.row;

            this.currentFrame.index = i;
        },

        setSpeed: function(speed) {
            this.speed = speed;
        },

        setCount: function(count, onEndCount) {
            this.count = count;
            this.endcount_callback = onEndCount;
        },

        isTimeToAnimate: function(time) {
            return (time - this.lastTime) > this.speed;
        },

        update: function(time) {
            if(this.lastTime === 0 && this.name.substr(0, 3) === "atk") {
                this.lastTime = time;
            }

            if(this.isTimeToAnimate(time)) {
                this.lastTime = time;
                this.tick();
                return true;
            } else {
                return false;
            }
        },

        reset: function() {
            this.lastTime = 0;
            this.currentFrame = { index: 0, x: this.col * this.width, y: this.row * this.height, i: this.col, j: this.row};
        }
    });

    return Animation;
});


define('sprite',['animation'], function(Animation) {

    var Sprite = Class.extend({
        init: function(data, scale, container) {
            this.name = data.id;
            this.file = data.file;
            this.scale = scale;
            this.container = container;
            this.isLoaded = false;
            this.offsetX = 0;
            this.offsetY = 0;
            this.data = data;

            this.loadJSON(data);

            this.whiteSprite = {
                isLoaded: true,
            };
            this.silhouetteSprite = {
                isLoaded: true,
            };
            this.rsprite = null;
        },

        loadJSON: function(data) {
            this.id = data.id;

            if (this.file)
              this.filepath = "img/" + this.scale + "/sprites/" + this.file;
            else if (data.file)
              this.filepath = "img/" + this.scale + "/sprites/" + data.file;
            else
              this.filepath = "img/" + this.scale + "/sprites/" + this.id + ".png";

            this.animationData = data.animations;
            this.width = data.width;
            this.height = data.height;
            this.offsetX = (data.offset_x !== undefined) ? data.offset_x : -16;
            this.offsetY = (data.offset_y !== undefined) ? data.offset_y : -16;

            //this.load();
        },


        /*load: function(callback) {
            var self = this;

            self.isLoaded = true;

            if (callback)
              callback();
        },*/

        createAnimations: function() {
            this.animations = {};

            for(var name in this.animationData) {
                var a = this.animationData[name];
                if (!a.hasOwnProperty('col')) a.col = 0;
                this.animations[name] = new Animation(name, a.length, a.col, a.row, this.width, this.height);
            }

            return this.animations;
        },

        getAnimationByName: function(name) {
            var animation = null;

            if(name in this.animations) {
                animation = this.animations[name];
            }
            else {
                var e = new Error();
                log.error(e.stack);
                log.error("No animation called "+ name);
            }
            return animation;
        },

        setAnimation: function(name, speed, count, onEndCount) {
            var self = this;

            //if (!this.isLoaded) this.load();

            //if(this.isLoaded) {
                if(this.currentAnimation && this.currentAnimation.name === name) {
                    return;
                }

                var s = this.sprite,
                    a = this.getAnimationByName(name);

                if(a) {
                    this.currentAnimation = a;
                    this.currentAnimation.setSpeed(speed);
                    this.currentAnimation.setCount(count ? count : 0, onEndCount);
                }
            //}
            /*else {
                this.log_error("Not ready for animation");
            }*/
        },

        /*createHurtSprite: function() {
            //if(!this.isLoaded) this.load();
            if (this.whiteSprite.isLoaded) return;
            var canvas = document.createElement('canvas'),
                //ctx = canvas.getContext('2d'),
                width = this.width,
                height = this.height,
                spriteData, data;

            canvas.width = width;
            canvas.height = height;
            //ctx.drawImage(this.image, 0, 0, width, height);

            try {
                //spriteData = ctx.getImageData(0, 0, width, height);

                data = spriteData.data;

                for(var i=0; i < data.length; i += 4) {
                    data[i] = 255;
                    data[i+1] = data[i+2] = 75;
                }
                spriteData.data = data;

                //ctx.putImageData(spriteData, 0, 0);

                this.whiteSprite = {
                    image: canvas,
                    isLoaded: true,
                    offsetX: this.offsetX,
                    offsetY: this.offsetY,
                    width: this.width,
                    height: this.height
                };
            } catch(e) {
                log.error("Error getting image data for sprite : "+this.name);
            }
        },

        getHurtSprite: function() {
            //if (!this.isLoaded) this.load();
            this.createHurtSprite();
            return this.whiteSprite;
        }*/

        /*createSilhouette: function() {
            if(!this.isLoaded) this.load();
            if (this.silhouetteSprite.isLoaded) return;
            var canvas = document.createElement('canvas'),
                //ctx = canvas.getContext('2d'),
                width = this.width,
                height = this.height,
                spriteData, finalData, data;

            canvas.width = width;
            canvas.height = height;
            //ctx.drawImage(this.image, 0, 0, width, height);
            //data = ctx.getImageData(0, 0, width, height).data;
            //finalData = ctx.getImageData(0, 0, width, height);
            //fdata = finalData.data;

            var getIndex = function(x, y) {
                return ((width * (y-1)) + x - 1) * 4;
            };

            var getPosition = function(i) {
                var x, y;

                i = (i / 4) + 1;
                x = i % width;
                y = ((i - x) / width) + 1;

                return { x: x, y: y };
            };

            var hasAdjacentPixel = function(i) {
                var pos = getPosition(i);

                if(pos.x < width && !isBlankPixel(getIndex(pos.x + 1, pos.y))) {
                    return true;
                }
                if(pos.x > 1 && !isBlankPixel(getIndex(pos.x - 1, pos.y))) {
                    return true;
                }
                if(pos.y < height && !isBlankPixel(getIndex(pos.x, pos.y + 1))) {
                    return true;
                }
                if(pos.y > 1 && !isBlankPixel(getIndex(pos.x, pos.y - 1))) {
                    return true;
                }
                return false;
            };

            var isBlankPixel = function(i) {
                if(i < 0 || i >= data.length) {
                    return true;
                }
                return data[i] === 0 && data[i+1] === 0 && data[i+2] === 0 && data[i+3] === 0;
            };

            for(var i=0; i < data.length; i += 4) {
                if(isBlankPixel(i) && hasAdjacentPixel(i)) {
                    fdata[i] = fdata[i+1] = 255;
                    fdata[i+2] = 150;
                    fdata[i+3] = 150;
                }
            }

            //finalData.data = fdata;
            //ctx.putImageData(finalData, 0, 0);

            this.silhouetteSprite = {
                image: canvas,
                isLoaded: true,
                offsetX: this.offsetX,
                offsetY: this.offsetY,
                width: this.width,
                height: this.height
            };
        }*/
    });
    return Sprite;
});


define('tile',[],function() {

    var Tile = Class.extend({
    });

    var AnimatedTile = Tile.extend({
        init: function(id, length, speed, index) {
            this.startId = id;
            this.id = id;
            this.length = length;
            this.speed = speed;
            this.index = index;
            this.lastTime = 0;
        },

        tick: function() {
            if((this.id - this.startId) < this.length - 1) {
                this.id += 1;
            } else {
                this.id = this.startId;
            }
        },

        animate: function(time) {
            if((time - this.lastTime) > this.speed) {
                this.tick();
                this.lastTime = time;
                return true;
            } else {
                return false;
            }
        }
    });

    return AnimatedTile;
});

define('audio',['area'], function(Area) {
  var AudioManager = Class.extend({
    init: function(game) {
      var self = this;

      if (game.renderer.mobile || typeof(Native) !== 'undefined')
        this.enabled = false;
      else
        this.enabled = true;
      this.extension = "ogg";
      this.sounds = {};
      this.game = game;
      this.currentMusic = null;
      this.areas = [];
      this.loadedMusic = {
        "map0": false,
        "map1": false,
        "map2": false,
        "map3": false
      };

      this.loadedSound = {
        "loot": false,
        "hit1": false,
        "hit2": false,
        "hurt": false,
        "heal": false,
        "chat": false,
        "revive": false,
        "death": false,
        "firefox": false,
        "achievement": false,
        "kill1": false,
        "kill2": false,
        "noloot": false,
        "teleport": false,
        "chest": false,
        "npc": false,
        "npc-end": false
      };

      if (!(Detect.isSafari() && Detect.isWindows())) {} else {
        this.enabled = false; // Disable audio on Safari Windows
      }
    },
    toggle: function(enabled) {
      this.enabled = enabled;
      if (this.enabled) {
        if (this.currentMusic) {
          this.resetMusic(this.currentMusic);
        }
      } else {
        this.stopMusic(this.currentMusic);
        /*if (this.currentMusic) {
          this.currentMusic = null;
        }*/
      }
      return this.enabled;
    },
    load: function(basePath, name, loaded_callback, channels) {
      var path = basePath + name + "." + this.extension,
        sound = document.createElement('audio'),
        self = this;

      sound.addEventListener('canplaythrough', function(e) {
        this.removeEventListener('canplaythrough', arguments.callee, false);
        log.debug(path + " is ready to play.");
        if (loaded_callback) {
          loaded_callback();
        }
      }, false);
      sound.addEventListener('error', function(e) {
        log.error("Error: " + path + " could not be loaded.");
        self.sounds[name] = null;
      }, false);

      sound.preload = "auto";
      sound.autobuffer = true;
      sound.src = path;
      sound.load();

      this.sounds[name] = [sound];
      _.times(channels - 1, function() {
        self.sounds[name].push(sound.cloneNode(true));
      });
    },
    loadSound: function(name, handleLoaded) {
      this.load("audio/sounds/", name, handleLoaded, 4);
    },
    loadMusic: function(name, handleLoaded) {
      this.load("audio/music/", name, handleLoaded, 1);
      var music = this.sounds[name][0];
      music.loop = true;
      music.addEventListener('ended', function() {
        music.play()
      }, false);
    },
    getSound: function(name) {
      if (!this.sounds[name]) {
        return null;
      }
      var sound = _.detect(this.sounds[name], function(sound) {
        return sound.ended || sound.paused;
      });
      if (sound && sound.ended) {
        sound.currentTime = 0;
      } else {
        sound = this.sounds[name][0];
      }
      return sound;
    },
    playSound: function(name) {
      if (this.enabled) {
        if (name in this.loadedSound &&
          this.loadedSound[name] == false) {
          this.loadSound(name);
          this.loadedSound[name] = true;
        }
        var sound = this.getSound(name);
        if (sound) {
          sound.play();
        }
      }
    },
    addArea: function(x, y, width, height, musicName) {
      var area = new Area(x, y, width, height);
      area.musicName = musicName;
      this.areas.push(area);
    },

    // TODO fix.
    getSurroundingMusic: function(entity) {
      return null; // TEMP

      var music = null,
        area = _.detect(this.areas, function(area) {
          return area.contains(entity);
        });

      if (area) {
        music = {
          sound: this.getSound(area.musicName),
          name: area.musicName
        };
      } else {
        music = {
          sound: this.getSound("map" + game.map.index),
          name: "map" + game.map.index
        };
      }
      return music;
    },
    updateMusic: function() {
      if (this.enabled) {
        var music = this.getSurroundingMusic(this.game.player);

        if (music) {
          if (!this.isCurrentMusic(music)) {
            if (this.currentMusic) {
              this.fadeOutCurrentMusic();
            }
            /*if (music.name in this.loadedMusic &&
            	this.loadedMusic[music.name] == false)
            {
            	this.loadMusic(music.name);
            	this.loadedMusic[music.name] = true;
            }*/
            this.playMusic(music);
          }
        } else {
          this.fadeOutCurrentMusic();
        }
      }
      else {
        this.fadeOutCurrentMusic();
      }
    },
    isCurrentMusic: function(music) {
      return this.currentMusic && (music.name === this.currentMusic.name);
    },
    playMusic: function(music) {
      if (music.name in this.loadedMusic &&
        this.loadedMusic[music.name] == false) {
        this.loadMusic(music.name);
        this.loadMusic[music.name] = true;
      }
      if (this.enabled && music && music.sound) {
        if (music.sound.fadingOut) {
          this.fadeInMusic(music);
        } else {
          music.sound.volume = 0.75;
          music.sound.play();
        }
        this.currentMusic = music;
      }
    },
    resetMusic: function(music) {
      if (music && music.sound && music.sound.readyState > 0) {
        music.sound.pause();
        music.sound.currentTime = 0;
        music.sound.play();
      }
    },
    stopMusic: function(music) {
      if (music && music.sound && music.sound.readyState > 0) {
        music.sound.pause();
        music.sound.currentTime = 0;
      }
    },
    fadeOutMusic: function(music, ended_callback) {
      var self = this;
      if (music && !music.sound.fadingOut) {
        this.clearFadeIn(music);
        music.sound.fadingOut = setInterval(function() {
          var step = 0.02;
          volume = music.sound.volume - step;

          if (self.enabled && volume >= step) {
            music.sound.volume = volume;
          } else {
            music.sound.volume = 0;
            self.clearFadeOut(music);
            ended_callback(music);
          }
        }, 50);
      }
    },
    fadeInMusic: function(music) {
      var self = this;
      if (music && !music.sound.fadingIn) {
        this.clearFadeOut(music);
        music.sound.fadingIn = setInterval(function() {
          var step = 0.01;
          volume = music.sound.volume + step;

          if (self.enabled && volume < 0.75 - step) {
            music.sound.volume = volume;
          } else {
            music.sound.volume = 0.75;
            self.clearFadeIn(music);
          }
        }, 30);
      }
    },
    clearFadeOut: function(music) {
      if (music.sound.fadingOut) {
        clearInterval(music.sound.fadingOut);
        music.sound.fadingOut = null;
      }
    },
    clearFadeIn: function(music) {
      if (music.sound.fadingIn) {
        clearInterval(music.sound.fadingIn);
        music.sound.fadingIn = null;
      }
    },
    fadeOutCurrentMusic: function() {
      var self = this;
      if (this.currentMusic) {
        this.fadeOutMusic(this.currentMusic, function(music) {
          self.resetMusic(music);
        });
        this.currentMusic = null;
      }
    }
  });

  return AudioManager;
});


define('updater',['entity/character', 'timer', 'entity/player', 'entity/entitymoving'], function(Character, Timer, Player, EntityMoving) {

    var Updater = Class.extend({
        init: function(game) {
            var self = this;
            this.game = game;
            this.performanceTime = 0;
            //this.tick = 5;
            this.lastUpdateTime = Date.now();

            this.checkStopDanger = function (c)
            {
              var o = c.orientation;
              var res=false;

              if (c.ex == -1 && c.ey == -1)
              {
                return false;
              }
              if (c.x == c.ex && c.y == c.ey)
              {
                log.info("checkStopDanger - coordinates equal");
                res = true;
              }


              var x = c.x, y = c.y;

              if (o == Types.Orientations.LEFT && c.x < c.ex)
              {
                return true;
              }
              else if (o == Types.Orientations.RIGHT && c.x > c.ex)
              {
                return true;
              }
              else if (o == Types.Orientations.UP && c.y < c.ey)
              {
                return true;
              }
              else if (o == Types.Orientations.DOWN && c.y > c.ey)
              {
                return true;
              }
              if (res) {
                c.setPosition(c.ex, c.ey);
                log.info("WARN - PLAYER "+c.id+" not stopping.");
                log.info("x :"+x+",y :"+y);
                log.info("ex:"+c.ex+",ey:"+c.ey);
              }
              return res;
            };

            this.charPathXF = function(c, m) {
              var x = c.x + m;
              if (c.hasChangedItsPath())
              {
                return false;
              }
              c.setPosition(x, c.y);
              return c.nextStep();
            };

            this.charPathYF = function(c, m) {
              var y = c.y + m;
              if (c.hasChangedItsPath())
              {
                return false;
              }
              c.setPosition(c.x, y);
              return c.nextStep();
            };

            this.charKeyXF = function(c, m) {
              var x = c.x + m;
              if (x == c.ex || self.checkStopDanger(c))
              {
                c.forceStop();
                return true;
              }
              c.setPosition(x, c.y);
              return false;
            };

            this.charKeyYF = function(c, m) {
              var y = c.y + m;
              if (y == c.ey || self.checkStopDanger(c))
              {
                c.forceStop();
                return true;
              }
              c.setPosition(c.x, y);
              return false;
            };

            this.playerKeyXF = function(c, m) {
              var x = c.x + m;
              var res = game.moveCharacter(c, x, c.y);
              if (res) {
                c.setPosition(x, c.y);
              } else {
                c.forceStop();
              }
              return !res;
            };

            this.playerKeyYF = function(c, m) {
              var y = c.y + m;
              var res = game.moveCharacter(c, c.x, y);
              if (res) {
                c.setPosition(c.x, y);
              } else {
                c.forceStop();
              }
              return !res;
            };

            this.playerPathXF = function(c, m) {
              var x = c.x + m;
              c.setPosition(x, c.y);
              return c.nextStep();
            };

            this.playerPathYF = function(c, m) {
              var y = c.y + m;
              c.setPosition(c.x, y);
              return c.nextStep();
            };

            this.stopTransition = function (c) {
              //if (c.movement.inProgress)
                //c.forceStop();
            }

        },

        update: function() {
            var ts = game.tilesize;

            //log.info("Updater.update() called");
            //if (game.client)
              //setTimeout(game.client.packetProcFunc,8);
            //game.client.packetProcFunc();

            if (game.mapStatus < 2)
            	return;

            //game.camera.setRealCoords();
            //

            //this.updateRan = false;
            this.looping = true;

            this.updateCharacters();
            this.updateTransitions();

            this.updateAnimations();
            //this.updateAnimatedTiles();
            this.updateChatBubbles();
            this.updateInfos();
// TODO - Re-enable after testing.
            //this.updatePerformance();
            this.looping = false;
            //this.updateRan = true;
            this.lastUpdateTime = Date.now();
        },

        updateCharacters: function() {
            var self = this;
            var mc = game.mapContainer;

			// TODO - Optimization not working.
            // This code is intensive.
            //var frames = Math.max(1, ~~((Date.now() - this.lastUpdateTime) / G_UPDATE_INTERVAL));
            //console.warn("uc ticks="+ticks);
            game.forEachEntity(function(entity) {
                self.game.updateCameraEntity(entity.id, entity);
                if (!(entity instanceof EntityMoving))
                  return;

                entity.tickFrames = 0;
                if (entity.tick > 0) {
                  entity.tickFrames = entity.tick;
                  //console.warn("entity.tickFrames:"+entity.tickFrames);
                }
                if (entity instanceof Player)
                {
                  if (entity == game.player) {
                    self.updatePlayerPathMovement(entity);
                    self.updatePlayerKeyMovement(entity);
                  }
                  else {
                    self.updateCharacterKeyMovement(entity);
                    self.updateCharacterPathMovement(entity);
                  }
                }
                else if (entity instanceof Character) {
                  self.updateCharacterPathMovement(entity);
                }
            });
        },

        updateTransitions: function() {
            var self = this,
                m = null;

            game.forEachEntity(function(entity) {
            		if (!entity || entity.freeze || entity.isDead || entity.isDying)
            			return;

                m = entity.movement;
                if(m && m.inProgress) {
                    m.step();
                }
            });
        },

        updateCharacterPathMovement: function(c) {
            var self = this;

            //var ts = game.tilesize;
            var tick = c.tickFrames;
            //console.warn("tick="+tick);
            //var speed = c.moveSpeed;
            //var time = this.game.currentTime;
            var o = c.orientation;

            if (c.freeze || c.isStunned || c.isDying || c.isDead)
            {
              return;
            }

// TODO - Fix character stuttering thats corrupting the map display and collision.

            var canMove = c.movement.inProgress === false && c.isMovingPath();
            if(canMove) {
              if(o == Types.Orientations.LEFT) {
                c.movement.start(self.charPathXF,
                   self.stopTransition,
                   -tick);
              }
              else if(o == Types.Orientations.RIGHT) {
                c.movement.start(self.charPathXF,
                   self.stopTransition,
                   tick);
              }
              else if(o == Types.Orientations.UP) {
                c.movement.start(self.charPathYF,
                   self.stopTransition,
                   -tick);
              }
              else if(o == Types.Orientations.DOWN) {
                c.movement.start(self.charPathYF,
                   self.stopTransition,
                   tick);
              }
            }

        },

        updateCharacterKeyMovement: function(c)
        {
          var self = this;
          var tick = c.tickFrames;
          //var speed = c.moveSpeed;
          //var time = this.game.currentTime;
          var o = c.orientation;

          if (c.freeze || c.isMovingPath() || c.isDying || c.isDead) {
            //log.info("character is frozen.")
            return;
          }

          var canMove = c.movement.inProgress === false  && c.keyMove && o > 0;
          if(canMove) {
            if(o == Types.Orientations.LEFT) {
              c.movement.start(self.charKeyXF,
                               null,
                               -tick);
            }
            else if(o == Types.Orientations.RIGHT) {
              c.movement.start(self.charKeyXF,
                               null,
                               tick);
            }
            else if(o == Types.Orientations.UP) {
              c.movement.start(self.charKeyYF,
                               null,
                               -tick);
            }
            else if(o == Types.Orientations.DOWN) {
              c.movement.start(
                               self.charKeyYF,
                               null,
                               tick);
            }
          }
        },

        updatePlayerPathMovement: function(c) {
            var self = this;

            //var time = game.currentTime;
            //var ts = game.tilesize;
            var tick = c.tickFrames;
            //var speed = c.moveSpeed;
            var o = c.orientation;

            if (c.isDying || c.isDead || c.freeze || c.isStunned || c.keyMove || !c.isMovingPath())
            {
              return;
            }

// TODO - Fix character stuttering thats corrupting the map display and collision.


            var canMove = c.movement.inProgress === false;
            if(canMove) {
              if(o == Types.Orientations.LEFT) {
                c.movement.start(self.playerPathXF,
                   null,
                   -tick);
              }
              else if(o == Types.Orientations.RIGHT) {
                c.movement.start(self.playerPathXF,
                   null,
                   tick);
              }
              else if(o == Types.Orientations.UP) {
                c.movement.start(self.playerPathYF,
                   null,
                   -tick);
              }
              else if(o == Types.Orientations.DOWN) {
                c.movement.start(self.playerPathYF,
                   null,
                   tick);
              }
            }

        },

        updatePlayerKeyMovement: function(c)
        {
            var self = this;

            if(!game.player)
                return;

            //var time = game.currentTime;
            var tick = c.tickFrames;
            //var ts = game.tilesize;
            //var speed = c.moveSpeed;
            //var gc = game.camera;
            var o = c.orientation;



            if (game.joystick && game.usejoystick)
            {
              if (!game.joystick.isActive())
              {
                 c.move(c.orientation, false);
              }
             if (game.joystick.right())
             {
               //c.move(c.orientation, false);
                 c.move(Types.Orientations.RIGHT, true);
             }
             else if (game.joystick.left())
             {
               //c.move(c.orientation, false);
                 c.move(Types.Orientations.LEFT, true);
             }
             else if (game.joystick.up())
             {
               //c.move(c.orientation, false);
                 c.move(Types.Orientations.UP, true);
             }
             else if (game.joystick.down())
             {
                 //c.move(c.orientation, false);
                 c.move(Types.Orientations.DOWN, true);
             }
             /*else {
               c.move(Types.Orientations.NONE, false);
             }*/
          }

          if (game.joystick && game.joystick.isActive())
          {
            clearInterval(game.autotalk);
          }

          if (c.isDying || c.isDead || c.freeze || c.isStunned || c.isMovingPath())
          {
            return;
          }

// TODO - Skip Move needs FIXING to fix scrolling!!!!!!!!!!!!!!!!!!!!!!


          var canMove = c.movement.inProgress === false && c.keyMove;
          if(canMove) {
            if(o == Types.Orientations.LEFT) {
              c.movement.start(self.playerKeyXF,
                               null,
                               -tick);
            }
            else if(o == Types.Orientations.RIGHT) {
              c.movement.start(self.playerKeyXF,
                               null,
                               tick);
            }
            else if(o == Types.Orientations.UP) {
              c.movement.start(self.playerKeyYF,
                               null,
                               -tick);
            }
            else if(o == Types.Orientations.DOWN) {
              c.movement.start(self.playerKeyYF,
                               null,
                               tick);
            }
          }

        },

        updateAnimations: function() {
            var t = game.currentTime;

            game.camera.forEachInScreen(function(entity) {
                if (!entity)
                	return;

            	var anim = entity.currentAnimation;

                if(anim && !entity.isStun) {
                    if(anim.update(t)) {
                        //entity.setDirty();
                    }
                }
            });

            var target = this.game.targetAnimation;
            if(target) {
                target.update(t);
            }

            if (game.appearanceDialog.visible)
            {
              var pa = game.appearanceDialog.playerAnim;
              if (pa.currentAnimation) {
                var animName = pa.currentAnimation.name;
                pa.currentAnimation.update(t);
                //for (var sprite of pa.sprites)
                  //sprite.currentAnimation.update(t);
                pa.show();
              }
            }
        },

        updateAnimatedTiles: function() {
            var self = this,
                t = game.currentTime;

            game.forEachAnimatedTile(function (tile) {
                tile.animate(t);
            });
        },

        updateChatBubbles: function() {
            var t = this.game.currentTime;
            game.bubbleManager.update(t);
        },

        updateInfos: function() {
            var t = this.game.currentTime;

            this.game.infoManager.update(t);
        }
    });

    return Updater;
});


define('lib/astar',[],function() {

    var AStar = (function () {
      /**
       * A* (A-Star) algorithm for a path finder
       * @author  Andrea Giammarchi
       * @license Mit Style License
       */

      var asGridCellSize = 16;
      var gGrid;

      function diagonalSuccessors($N, $S, $E, $W, N, S, E, W, grid, rows, cols, result, i) {
          if($N) {
              $E && !grid[N][E] && (result[i++] = {x:E, y:N});
              $W && !grid[N][W] && (result[i++] = {x:W, y:N});
          }
          if($S){
              $E && !grid[S][E] && (result[i++] = {x:E, y:S});
              $W && !grid[S][W] && (result[i++] = {x:W, y:S});
          }
          return result;
      }

      function diagonalSuccessorsFree($N, $S, $E, $W, N, S, E, W, grid, rows, cols, result, i) {
          $N = N > -1;
          $S = S < rows;
          $E = E < cols;
          $W = W > -1;
          if($E) {
              $N && !grid[N][E] && (result[i++] = {x:E, y:N});
              $S && !grid[S][E] && (result[i++] = {x:E, y:S});
          }
          if($W) {
              $N && !grid[N][W] && (result[i++] = {x:W, y:N});
              $S && !grid[S][W] && (result[i++] = {x:W, y:S});
          }
          return result;
      }

      function nothingToDo($N, $S, $E, $W, N, S, E, W, grid, rows, cols, result, i) {
          return result;
      }

      function grids(coord) {
        return gGrid[~~(coord[0])][~~(coord[1])];
      }
      function successors(find, x, y, grid, rows, cols){
          x = ~~(x) + 0.5;
          y = ~~(y) + 0.5;

          var
              N = (y - 1),
              S = (y + 1),
              E = (x + 1),
              W = (x - 1),
              $N = N > 0 && !grids([N,x]),
              $S = S < (rows+1) && !grids([S,x]),
              $E = E < (cols+1) && !grids([y,E]),
              $W = W > 0 && !grids([y,W]),
              result = [],
              i = 0
          ;

          $N && (result[i++] = {x:x, y:N});
          $E && (result[i++] = {x:E, y:y});
          $S && (result[i++] = {x:x, y:S});
          $W && (result[i++] = {x:W, y:y});
          return find($N, $S, $E, $W, N, S, E, W, grid, rows, cols, result, i);
      }

      function diagonal(start, end, f1, f2) {
          return f2(f1(start.x - end.x), f1(start.y - end.y));
      }

      function euclidean(start, end, f1, f2) {
          var
              x = start.x - end.x,
              y = start.y - end.y
          ;
          return f2(x * x + y * y);
      }

      function manhattan(start, end, f1, f2) {
          return f1(start.x - end.x) + f1(start.y - end.y);
      }

      function getDir(n1, n2) {
        if (n1.x < n2.x)
          return 1;
        if (n1.x > n2.x)
          return 2;
        if (n1.y < n2.y)
          return 3;
        if (n1.y > n2.y)
          return 4;
        return 0;
      }

      function AStar(grid, start, end, f) {
        gGrid = grid;
        var cols = grid[0].length,
            rows = grid.length,
            limit = cols * rows,
            f1 = Math.abs,
            f2 = Math.max,
            list = {},
            result = [],
            //open = [{x:~~(start[0]), y:~~(start[1]), f:0, g:0, v:~~(start[0])+~~(start[1])*cols}],
            open = [{x:~~(start[0]), y:~~(start[1]), f:0, g:0, v:(start[0])+(start[1])*cols}],
            length = 1,
            adj, distance, find, i, j, max, min, current, next,
            //endnode = {x:(end[0]), y:(end[1]), v:(end[0])+(end[1])*cols};
            endnode = {x:~~(end[0]), y:~~(end[1]), v:~~(end[0])+~~(end[1])*cols};

        switch (f) {
            case "Diagonal":
                find = diagonalSuccessors;
            case "DiagonalFree":
                distance = diagonal;
                break;
            case "Euclidean":
                find = diagonalSuccessors;
            case "EuclideanFree":
                f2 = Math.sqrt;
                distance = euclidean;
                break;
            default:
                distance = manhattan;
                find = nothingToDo;
                break;
        }
        find || (find = diagonalSuccessorsFree);
        do {
            max = limit;
            min = 0;
            for(i = 0; i < length; ++i) {
                if((f = open[i].f) < max) {
                    max = f;
                    min = i;
                }
            };
            current = open.splice(min, 1)[0];
            if (current.v != endnode.v) {
            //if (Math.abs(current.x-endnode.x) >= 1 || Math.abs(current.y-endnode.y) >= 1) {
                --length;
                next = successors(find, current.x, current.y, grid, rows, cols);
                for(i = 0, j = next.length; i < j; ++i){
                    (adj = next[i]).p = current;
                    adj.f = adj.g = 0;
                    adj.v = Math.floor(adj.x) + Math.floor(adj.y) * cols;
                    if(!(adj.v in list)){
                        var extra = 0;
                        if (adj.p) {
                         adj.dir = getDir(adj, adj.p);
                         if (adj.p.dir && adj.p.dir != adj.dir)
                           extra = 2;
                        }
                        adj.f = (adj.g = current.g + distance(adj, current, f1, f2)) + distance(adj, endnode, f1, f2) + extra;
                        open[length++] = adj;
                        list[adj.v] = 1;
                    }
                }
            } else {
                i = length = 0;
                do {
                    result[i++] = [current.x, current.y];
                } while (current = current.p);

                var fn = function (node, result) {
                  result.shift();
                  result.unshift([node[0], node[1]]);
                  var it2 = null;
                  for (var it of result) {
                    if (it2) {
                      if (~~(it2[0]) == ~~(it[0]))
                        it[0] = it2[0];
                      else if (~~(it2[1]) == ~~(it[1]))
                        it[1] = it2[1];
                      else {
                        break;
                      }
                    }
                    it2 = it;
                  }
                };

                fn(end, result);
                result.reverse();
                fn(start, result);
            }
        } while (length);

        for (var i=2; i < result.length; ++i)
        {
          if ((Math.abs(result[i-2][0] - result[i][0]) > 0 &&
               Math.abs(result[i-2][1] - result[i][1]) == 0) ||
              (Math.abs(result[i-2][1] - result[i][1]) > 0  &&
               Math.abs(result[i-2][0] - result[i][0]) == 0))
          {
            result.splice(--i,1);
          }
        }

        /*var i = 0.5;
        for (var node of result) {
          if (node[0] % 1 == 0)
            node[0] += i;
          if (node[1] % 1 == 0)
            node[1] += i;
        }*/
        //log.info(JSON.stringify(result));
        return result;
    }

    return {AStar};

    }());

    return AStar;
});

define('pathfinder',['lib/astar'], function(AStar) {

    var Pathfinder = Class.extend({
        init: function(width, height) {
            this.width = width;
            this.height = height;
            this.grid = null;
            this.blankGrid = [];
            this.initBlankGrid_();
            this.ignored = [];
            this.included = [];
        },

        initBlankGrid_: function() {
            /*for(var i=0; i < this.height; i += 1) {
                this.blankGrid[i] = [];
                for(var j=0; j < this.width; j += 1) {
                    this.blankGrid[i][j] = 0;
                }
            }*/
        },

        checkValidPath: function (path) {
            var pnode = null;
            if (!Array.isArray(path) || path.length < 2)
              return false;
            for (var node of path) {
              if (pnode) {
                if (pnode[0] == node[0] || pnode[0] == node[1] || pnode[1] == node[0] || pnode[1] == node[1]) {
                  pnode = node;
                  continue;
                }
                return false;
              }
              pnode = node;
            }
            return true;
        },

        // TODO - Grid axis is not being checked properly.
         isValidPath: function (grid, path) {
           var ts = G_TILESIZE,
               ly = grid.length,
               lx = grid[0].length;

           // Check collision from an axis, n1 to n2, n3 is for the other axis.
           var c1to2on3 = function (n1,n2,n3,axis) {
             //log.info("c1to2on3 - n1:"+n1+",n2:"+n2+",n3:"+n3);
             n1 = Math.floor(n1), n2 = Math.floor(n2), n3=Math.floor(n3);
             var i1 = Math.min(n1,n2), i2 = Math.max(n1,n2);
             if (axis == "x") {
               for (var i=i1; i < i2; i++) {
                 if (grid[n3][i]) {
                   return false;
                 }
               }
             } else {
               for (var i=i1; i < i2; i++) {
                 if (grid[i][n3]) {
                   return false;
                 }
               }
             }
             return true;
           }

           var xf = function (x1,x2,y) {
             return c1to2on3(x1,x2,y,"x");
           }
           var yf = function (y1,y2,x) {
             return c1to2on3(y1,y2,x,"y");
           }

           var pCoord = null;
           for (var coord of path) {
             if (coord[1] < 0 || coord[1] >= ly)
               return false;
             if (coord[0] < 0 || coord[0] > lx)
               return false;

             if (pCoord) {
               if (coord[0] != pCoord[0] && coord[1] != pCoord[1])
                 return false;
               if (Math.abs(coord[0] - pCoord[0]) > 0) {
                 if (!xf(pCoord[0], coord[0], coord[1]))
                   return false;
               }
               else if (Math.abs(coord[1] - pCoord[1]) > 0) {
                 if (!yf(pCoord[1], coord[1], coord[0]))
                   return false;
               }
             }
             pCoord = coord;
           }
           return true;
         },

        getShortGrid: function (grid, start, end, gridEdges) {
          var ts = G_TILESIZE;
          start = [start[0], start[1]];
    			end = [end[0], end[1]];

          var minX = Math.max(Math.min(Math.floor(start[0]), Math.floor(end[0])) - gridEdges, 0);
          var maxX = Math.min(Math.max(Math.ceil(start[0]), Math.ceil(end[0])) + gridEdges, grid[0].length-1);
          var minY = Math.max(Math.min(Math.floor(start[1]), Math.floor(end[1])) - gridEdges, 0);
          var maxY = Math.min(Math.max(Math.ceil(start[1]), Math.ceil(end[1])) + gridEdges, grid.length-1);

    			var substart = [(start[0]-minX), (start[1]-minY)];
    			var subend = [(end[0]-minX), (end[1]-minY)];

    			//log.info(JSON.stringify(substart));
    			//log.info(JSON.stringify(subend));
    			//log.info("minX="+minX+",maxX="+maxX+",minY="+minY+",maxY="+maxY);


          maxX = Math.min(grid[0].length-1, maxX);
          maxY = Math.min(grid.length-1, maxY);
          var crop = new Array(maxY - minY);
    			for(var j=0, i = minY; i <= maxY; ++i) {
    				crop[j++] = new Uint8Array(grid[i].slice(minX, maxX));
    			}

    			return {
    				crop: crop,
    				minX: minX,
    				minY: minY,
    				substart: substart,
    				subend: subend};
        },

        findNeighbourPath: function(start, end) {
            var ts = G_TILESIZE;

                  // If its one space just return the start, end path.
      			if ((Math.abs(start[0] - end[0]) <= ts && Math.abs(start[1] - end[1]) == 0) ||
      				(Math.abs(start[1] - end[1]) <= ts && Math.abs(start[0] - end[0]) == 0))
      					return [[start[0], start[1]],[end[0],end[1]]];

      			return null;
		    },

        findShortPath: function(crop, offsetX, offsetY, start, end) {
            var ts = G_TILESIZE;
        		var path = [];
      			var subpath = AStar.AStar(crop, start, end);

      			if (subpath && subpath.length > 0)
      			{
      				//var path = subpath;
      				/*var len = subpath.length;
      				for (var j = 0; j < len; ++j)
      				{
      					path[j] = [subpath[j][0]+(offsetX),subpath[j][1]+(offsetY)];
      				}*/
      				//log.info(JSON.stringify(path));
      				log.info(JSON.stringify(subpath));
      				return subpath;
      			}

            return null;
        },

        findPath: function(grid, start, end, findIncomplete) {
            var path;

			      this.grid = grid;
            this.applyIgnoreList_(this.grid, true);
            this.applyIncludeList_(this.grid, true);

            path = AStar.AStar(this.grid, start, end);

            /*if(!path || path.length === 0 && findIncomplete === true) {
                // If no path was found, try and find an incomplete one
                // to at least get closer to destination.
                path = this.findIncompletePath_(start, end);
                //log.info("NO path to destination");
            }*/

            return path;
        },

        /**
         * Finds a path which leads the closest possible to an unreachable x, y position.
         *
         * Whenever A* returns an empty path, it means that the destination tile is unreachable.
         * We would like the entities to move the closest possible to it though, instead of
         * staying where they are without moving at all. That's why we have this function which
         * returns an incomplete path to the chosen destination.
         *
         * @private
         * @returns {Array} The incomplete path towards the end position
         */
        findIncompletePath_: function(start, end) {
            var perfect, x, y,
                incomplete = [];

            perfect = AStar.AStar(this.blankGrid, start, end);

            for(var i=perfect.length-1; i > 0; i -= 1) {
                x = perfect[i][0];
                y = perfect[i][1];

                if(this.grid[y][x] === 0) {
                    incomplete = AStar(this.grid, start, [x, y]);
                    break;
                }
            }
            return incomplete;
        },

        /**
         * Removes colliding tiles corresponding to the given entity's position in the pathing grid.
         */
        ignoreEntity: function(entity) {
            if(entity) {
                this.ignored.push(entity);
            }
        },
        includeEntity: function(entity) {
            if(entity) {
                this.included.push(entity);
            }
        },

        applyIgnoreList_: function(grid, ignored) {
            var self = this,
                x, y;

            _.each(this.ignored, function(entity) {
                x = entity.isMoving() ? entity.nextGridX : entity.gx;
                y = entity.isMoving() ? entity.nextGridY : entity.gy;

                if(x >= 0 && y >= 0) {
                	//log.info("path.grid=["+x+","+y+"]");
                    grid[y][x] = ignored ? 0 : 1;
                }
            });
        },

        applyIncludeList_: function(grid, included) {
            var self = this,
                x, y;

            _.each(this.included, function(entity) {
                x = entity.isMoving() ? (entity.path.length > 0 ? entity.path[entity.path.length-1][0] : entity.nextGridX) : entity.gx;
                y = entity.isMoving() ? (entity.path.length > 0 ? entity.path[entity.path.length-1][1] : entity.nextGridY) : entity.gy;

                if(x >= 0 && y >= 0) {
                	//log.info("path.grid=["+x+","+y+"]");
                    grid[y][x] = included ? 1 : 0;
                }
            });
        },

        clearIgnoreList: function(grid) {
            this.applyIgnoreList_(grid, false);
            this.ignored = [];
        },

        clearIncludeList: function(grid) {
            this.applyIncludeList_(grid, false);
            this.ignored = [];
        },

    });

    return Pathfinder;
});

define('tabbook',[],function() {
  var TabBook = Class.extend({
    init: function(id) {
      this.parent = parent;
      this.id = id;
      this.body = $(id);
      this.pages = [];
      this.pageIndex = -1;

      this.openHandler = null;
    },

    getPageCount: function() {
      return this.pages.length;
    },
    getPageIndex: function() {
      return this.pageIndex;
    },
    setPageIndex: function(value) {
      if(this.pageIndex >= 0) {
        this.pages[this.pageIndex].setVisible(false);
      }
      if((value >= 0) && (value < this.pages.length)) {
        var done = this.openHandler ? this.openHandler(this, value) : true;
        if(done) {
          this.pageIndex = value;
          this.pages[this.pageIndex].setVisible(true);
        }
      } else {
        this.pageIndex = -1;
      }
    },
    getActivePage: function() {
      return this.pageIndex >= 0 ? this.pages[this.pageIndex] : null;
    },
    setActivePage: function(value) {
      var index = this.pages.indexOf(value);
      if(index >= 0) {
        this.setPageIndex(index);
      }
    },

    add: function(page) {
      page.setParent(this);
      this.pages.push(page);
    },

    onOpen: function(handler) {
      this.openHandler = handler;
    }
  });

  return TabBook;
});

define('tabpage',[],function() {
    var TabButton = Class.extend({
        init: function(id, page) {
            var self = this;
            this.id = id;
            this.body = $(id);
            this.page = page;

            this.visibleChangeHandler = null;


            this.body.on('click', function(event) {
                if (self.page.parent.parent.showing)
                  self.page.active();
            });
        },

        getVisible: function() {
            return this.body.attr('class') === 'active';
        },
        setVisible: function(value) {
            var self = this;
            if(value) {
                this.body.addClass('active');
            } else {
                this.body.removeClass('active');
            }
            /*this.body.off().on('click', function(event) {
                if (self.page.parent.parent.showing)
                  self.page.active();
            });*/
        }
    });

    var TabPage = Class.extend({
        init: function(parent, id, buttonId) {
            this.parent;
            this.id = id;
            this.body = $(id);
            this.button = buttonId ? new TabButton(buttonId, this) : null;

            this.activeHandler = null;
        },

        getParent: function() {
            return this.parent;
        },
        setParent: function(value) {
            this.parent = value;
        },
        getVisible: function() {
            return this.body.css('display') === 'block';
        },
        setVisible: function(value) {
            if(this.button) {
                this.button.setVisible(value);
            }
            this.body.css('display', value ? 'block' : 'none');

            if(this.visibleChangeHandler) {
                this.visibleChangeHandler(self, value);
            }
        },

        active: function() {
            if(this.parent) {
                this.parent.setActivePage(this);
            }
        },

        onVisibleChange: function(handler) {
            this.visibleChangeHandler = handler;
        }
    });
    return TabPage;
});

define('pageNavigator',[], function() {
  var PageNavigator = Class.extend({
    init: function(scale, name) {
        this.name = name || "store";
        this.body = $('#'+this.name+'PageNav');
        this.movePreviousButton = $('#'+this.name+'PageNavPrev');
        this.numbers = [];
        for(var index = 0; index < 5; index++) {
            this.numbers.push($('#'+this.name+'PageNavNumber' + index));
        }
        this.moveNextButton = $('#'+this.name+'PageNavNext');

        this.changeHandler = null;

        this.rescale(scale);

        var self = this;

        this.movePreviousButton.click(function(event) {
            //alert("prev");
            if(self.index > 1) {
                self.setIndex(self.index - 1);
                /*if(self.changeHandler) {
                    self.changeHandler(self);
                }*/
            }
        });
        this.moveNextButton.click(function(event) {
            //alert("next");
            if(self.index < self.count) {
                self.setIndex(self.index + 1);
                /*if(self.changeHandler) {
                    self.changeHandler(self);
                }*/
            }
        });
    },

    rescale: function(scale) {
      if (scale == 1)
      {
        for(var index = 0; index < this.numbers.length; index++) {
          this.numbers[index].css({
              'position': 'absolute',
              'left': '' + (12 + (index * 12)) + 'px',
              'top': '0px'
          });
        }
      }
      else if (scale == 2)
      {
        for(var index = 0; index < this.numbers.length; index++) {
          this.numbers[index].css({
              'position': 'absolute',
              'left': '' + (24 + (index * 24)) + 'px',
              'top': '0px'
          });
        }
      }
      else if (scale == 3)
      {
        for(var index = 0; index < this.numbers.length; index++) {
          this.numbers[index].css({
              'position': 'absolute',
              'left': '' + (36 + (index * 36)) + 'px',
              'top': '0px'
          });
        }
      }
    },

    getCount: function() {
        return this.count;
    },
    setCount: function(value) {
        this.count = value;

        this.numbers[3].html(~~(value / 10))
        this.numbers[4].html((value % 10));
    },
    getIndex: function() {
        return this.index;
    },
    setIndex: function(value) {
        this.pageChanged = (this.index != value);
        this.index = value;

        this.numbers[0].html(~~(value / 10))
        this.numbers[1].html((value % 10));

        this.movePreviousButton.attr('class', this.index > 1 ? 'enabled' : '');
        this.moveNextButton.attr('class', this.index < this.count ? 'enabled' : '');

        if(this.pageChanged && this.changeHandler) {
            this.changeHandler(this);
        }
    },
    getVisible: function() {
        return this.body.css('display') === 'block';
    },
    setVisible: function(value) {
        this.body.css('display', value ? 'block' : 'none');
    },

    onChange: function(handler) {
        this.changeHandler = handler;
    },

    open: function() {
      this.setIndex(1);
      (this.index < this.count) ? this.setVisible(1) : this.setVisible();

      //this.movePreviousButton.attr('class', 'enabled');
      //this.moveNextButton.attr('class', 'enabled');

    }

  });

  return PageNavigator;
});

define('playeranim',['sprite','animation','timer'], function(Sprite, Animation, Timer) {
  var PlayerAnim = Class.extend({
    init: function() {
      this.flipSpriteX = false;
      this.flipSpriteY = false;
      this.pjsSprite = null;
      this.animations = null;
      this.currentAnimation = null;
      this.isLoaded = false;
      this.visible = true;

      this.sprites = [];
      this.animations = [];

      this.speeds = {
        attack: 100,
        move: 50,
        walk: 150,
        idle: 500
      };
    },

    loadAnimations: function (sprite) {
      var animations = sprite.createAnimations();
      //sprite.animations = animations;
      for (var id in animations)
      {
        if (!this.animations[id])
          this.animations[id] = animations[id];
      }

      this.isLoaded = true;
      if(this.ready_func) {
          this.ready_func();
      }
    },

    addSprite: function (sprite)
    {
      if(!sprite) {
          log.error(this.id + " : sprite is null", true);
          throw "Sprite error";
      }

      //if(sprite.name in this.sprites) {
      //    return;
      //}

      //if (!sprite.pjsSprite)
      //  sprite.pjsSprite = game.renderer.createSprite(sprite);
      //else
      //  game.renderer.changeSprite(sprite, sprite.pjsSprite);

      this.sprites.push(sprite);

      this.loadAnimations(sprite);
    },

    ready: function(f) {
        this.ready_func = f;
    },

    getSprite: function(index) {
        return this.sprite[index];
    },

    getSpriteName: function(index) {
        return this.sprite[index].name;
    },

/*
for (var sprite of this.sprites) {
  var anim = sprite.currentAnimation = sprite.animations[name];

  //anim.reset();

  this.currentAnimation = anim;
  if(name.indexOf("atk") === 0) {
      anim.reset();
  }
  anim.setSpeed(speed);
  anim.setCount(count ? count : 0, onEndCount || function() {
      self.idle();
  });

}
*/
    getAnimationByName: function(name) {
        var animation = null;

        if(name in this.animations) {
            animation = this.animations[name];
        }
        else {
            var e = new Error();
            log.error(e.stack);
            log.info("No animation called "+ name);
            return null;
        }
        return animation;
    },

    setAnimation: function(name, speed, count, onEndCount) {
        var self = this;

        if(this.isLoaded) {
            if(this.currentAnimation && this.currentAnimation.name === name) {
                return;
            }

            var s = this.sprite,
                a = this.getAnimationByName(name);

            if(a) {
                this.currentAnimation = a;
                if(name.indexOf("atk") === 0) {
                    this.currentAnimation.reset();
                }
                this.currentAnimation.setSpeed(speed);
                this.currentAnimation.setCount(count ? count : 0, onEndCount || function() {
                    self.idle();
                });
            }
        }
        else {
            this.log_error("Not ready for animation");
        }
    },

    idle: function(orientation) {
        this.orientation = orientation || 0;
        this.animate("idle", this.speeds.idle);
    },

    hit: function(orientation) {
        this.orientation = orientation || 0;
        this.animate("atk", this.speeds.attack, 1);
    },

    walk: function(orientation) {
        this.orientation = orientation || 0;
        this.animate("walk", this.speeds.walk);
    },

    animate: function(animation, speed, count, onEndCount) {
        var oriented = ['atk', 'walk', 'idle'],
            o = this.orientation || Types.Orientations.DOWN;

        this.flipSpriteX = false;
        this.flipSpriteY = false;

        if(_.indexOf(oriented, animation) >= 0) {
            animation += "_" + (o === Types.Orientations.LEFT ? "right" : Types.getOrientationAsString(o));
            this.flipSpriteX = (this.orientation === Types.Orientations.LEFT) ? true : false;
        }

        this.setAnimation(animation, speed, count, onEndCount);
    },

    setHTML: function (html) {
      this.html = html;
    },

    show: function () {
      var animName = this.currentAnimation.name,
        s = game.renderer.gameScale;

      var i = 0;
      var types = ["armor", "weapon"];
      for (var sprite of this.sprites) {
        var anim = this.currentAnimation;
        var frame = anim.currentFrame;
        var div = $(this.html[i]);
        var w = (sprite.width * s);
        var h = (sprite.height * s);
        var x = frame.i * w;
        var y = frame.j * h;

        div.css('width', w+'px');
        div.css('height', h+'px');
        div.css('background-image', "url('img/2/sprites/"+sprite.name+".png')");
        div.css('background-size', (w*5)+'px '+(h*9)+'px ');
        div.css('background-position', '-'+x+'px -'+y+'px');
        i++;
      }
    },

  });
  return PlayerAnim;
});

define('dialog/appearancedialog',['./dialog', '../tabbook', '../tabpage', 'data/appearancedata', '../pageNavigator', '../playeranim', 'data/items'], function(Dialog, TabBook, TabPage, AppearanceData, PageNavigator, PlayerAnim, Items) {
    function fixed(value, length) {
        var buffer = '00000000' + value;
        return buffer.substring(buffer.length - length);
    }

    var SCALE = 2;
    function setScale(scale) {
    	    SCALE = scale;
    }

    var StoreRack = Class.extend({
        init: function(parent, id, index) {
            this.parent = parent;
            this.id = id;
            this.index = index;
            this.body = $(id);
            //this.body.data.index = index;
            this.basketBackground = $(id + 'BasketBackground');
            this.basket = $(id + 'Basket');
            this.extra = $(id + 'Extra');
            this.price = $(id + 'Price');
            this.buyButton = $(id + 'BuyButton');
            this.item = null;

            this.rescale();

            this.buyButton.text('Unlock');



        },

        rescale: function() {
            var scale = this.parent.scale;
            var id = this.id;
            this.body = $(id);
            this.basketBackground = $(id + 'BasketBackground');
            this.basket = $(id + 'Basket');
            this.extra = $(id + 'Extra');
            this.price = $(id + 'Price');
            this.buyButton = $(id + 'BuyButton');
        	  if (scale == 1)
        	  {
              this.body.css({
      			   'position': 'absolute',
      			   'left': '0px',
      			   'top': '' + (this.index * 18) + 'px',
      		    });
    	      }
    	      else if (scale == 2) {
               this.body.css({
       			   'position': 'absolute',
       			   'left': '0px',
       			   'top': '' + (this.index * 36) + 'px',
       		    });
    	      }
    	      else if (scale == 3) {
      		    this.body.css({
      			   'position': 'absolute',
      			   'left': '0px',
      			   'top': '' + (this.index * 54) + 'px',
      		    });
    	      }
    	      if (this.item) {
    	     	     this.assign(this.item);
    	      }
        },

        getVisible: function() {
            return this.body.css('display') === 'block';
        },
        setVisible: function(value) {
            var self = this;

            this.body.css('display', value===true ? 'block' : 'none');
            this.buyButton.text('UNLOCK');

            this.buyButton.off().on('click', function(event) {
                log.info("buyButton");
                var dialog = game.appearanceDialog;
                if(game && game.ready && dialog.visible) {
                    game.client.sendAppearanceUnlock(self.item.index, self.item.buyPrice);
                }
            });
        },

        assign: function(item) {
            this.item = item;
            item.itemKind = item.index;

            //Items.jqShowItem(this.basket, {itemKind: this.item.index, itemNumber: 1}, this.basket);
            this.scale = this.parent.scale;
            Items.jqShowItem(this.basket, this.item, this.basket);
	          //this.basket.css({'background-image': "url('img/3/item/item-" + item.sprite + ".png')"});

            //this.basket.attr('title', item.name);
            this.extra.text(item.name);
            this.price.text(item.buyPrice);

            var self = this;
            this.body.off().on('click', function(event) {
                var dialog = game.appearanceDialog;
                if(game && game.ready && dialog.visible) {
                	dialog.update(self.parent.itemType, game.sprites[AppearanceData[self.item.index].sprite]);
                	$('#appearanceDialog').show();
                }
            });
        },

        clear: function() {
            this.basket.css('background-image', 'none')
            this.basket.attr('title', '');
            this.extra.text('');
            this.price.text('');
        }
    });

    var AppearancePage = TabPage.extend({
        init: function(parent, id, itemType, scale, buttonIndex) {
            this._super(parent, id + 'Page', id + buttonIndex + 'Button');
            this.itemType = itemType;
            this.racks = [];
            this.items = [];
            this.scale = scale;
            this.rackSize = 5;
            this.pageIndex = 0;

            for(var index = 0; index < this.rackSize; index++) {
                this.racks.push(new StoreRack(this, id + index, index));
            }
        },

        rescale: function (scale) {
            this.scale = scale;
            for(var index = 0; index < this.rackSize; index++) {
                this.racks[index].rescale();
            }
        },

        getPageCount: function() {
            if (this.items)
            	    return Math.ceil(this.items.length / this.rackSize);
            return 0;
        },
        getPageIndex: function() {
            return this.pageIndex;
        },

        setPageIndex: function(value) {
            this.pageIndex = value;
            this.onData();
        },

        open: function() {
            this.setPageIndex(0);
        },

        onData: function() {
            this.items = [];
            var categoryType;
            if (!game || !game.player)
              return;

            if (this.itemType==0)
                categoryType="armor";
            if (this.itemType==1)
                categoryType="weapon";

    		    if (game.player.isArcher())
    		    {
              if (this.itemType==0)
        			    categoryType="armorarcher";
        			if (this.itemType==1)
        			    categoryType="weaponarcher";
        		}

    		    for(var k=0; k < AppearanceData.length; ++k) {
        			var item = AppearanceData[k];
        			if (!item)
        			    continue;

        			if (item.type == categoryType && game.player.appearances[k] == 0 && item.buy > 0)
        			{
      				    this.items.push({
          					index: k,
          					name: item.name,
          					sprite: item.sprite,
          					buyPrice: item.buy});
        			}
    		    }

      	    this.reload();
      	    this.parent.updateNavigator();
        },

        reload: function()
        {
            for(var index = this.pageIndex * this.rackSize; index < Math.min((this.pageIndex + 1) * this.rackSize, this.items.length); index++) {
                var rack = this.racks[index - (this.pageIndex * this.rackSize)];

                rack.assign(this.items[index]);
                rack.setVisible(true);
            }
            for(var index = this.items.length; index < (this.pageIndex + 1) * this.rackSize; index++) {
                var rack = this.racks[index - (this.pageIndex * this.rackSize)];

                rack.setVisible(false);
            }
        },

    });

    var AppearanceArmorPage = AppearancePage.extend({
        init: function(parent, scale) {
            this._super(parent, '#storeDialogStore', 0, scale, 1);
        }
    });

    var AppearanceWeaponPage = AppearancePage.extend({
        init: function(parent, scale) {
            this._super(parent, '#storeDialogStore', 1, scale, 2);
        }
    });

    var StoreFrame = TabBook.extend({
        init: function(parent) {
            this._super('#storeDialogStore');

            this.parent = parent;
            this.scale = this.parent.scale;
            this.pageArmor = new AppearanceArmorPage(parent, this.scale);
            this.pageWeapon = new AppearanceWeaponPage(parent, this.scale);

            this.add(this.pageArmor);
            this.add(this.pageWeapon);

            this.pageNavigator = new PageNavigator(parent.scale);

            var self = this;

            this.pageNavigator.onChange(function(sender) {
                var activePage = self.getActivePage();
                if(activePage && game.appearanceDialog.visible) {
                     activePage.setPageIndex(sender.getIndex() - 1);
                }
            });
        },

        rescale: function() {
        	this.scale = this.parent.scale;
        	this.pageArmor.rescale(this.scale);
        	this.pageWeapon.rescale(this.scale);

        	this.pageNavigator.rescale(this.scale);
        },

        setPageIndex: function(value) {
            if (!game.appearanceDialog.visible)
            	    return;

            this._super(value);
            this.updateNavigator();
            var activePage = this.getActivePage();
            activePage.open();
        },

        updateNavigator: function () {
            var activePage = this.getActivePage();
            //log.info("activePage.getPageCount()="+activePage.getPageCount());
            if(activePage) {
                if(activePage.getPageCount() > 0) {
                    this.pageNavigator.setCount(activePage.getPageCount());
                    this.pageNavigator.setIndex(activePage.getPageIndex() + 1);
                    this.pageNavigator.setVisible(true);
                } else {
                    this.pageNavigator.setVisible(false);
                }
                activePage.reload();
            }
        },

        open: function() {
            game.client.sendAppearanceList();
        },


    });

    var AppearanceDialog = Dialog.extend({
        init: function(game) {
            this._super(game, '#storeDialog');

            this.storeFrame = new StoreFrame(this);

            this.closeButton = $('#storeDialogCloseButton');
            this.modal = $('#storeDialogModal');
            this.scale=this.setScale();

            var self = this;

            this.closeButton.click(function(event) {
                var activePage = self.storeFrame.getActivePage();
                if (activePage)
                    activePage.setVisible(false);
                self.hide();
            });

            var p = game.player;
            this.playerAnim = new PlayerAnim();

            var changeLookArmor = function (index)
            {
              if (self.armorLooks.length > 0)
      				{
                index = self.looksArmorIndex = (self.armorLooks.length + index) % self.armorLooks.length;
                var spriteId = self.armorLooks[index];
                if (spriteId==0 || game.player.appearances[spriteId] == 1) {
                  //var index = p.isArcher() ? 2 : 0;
                  game.player.sprites[0] = spriteId;
                  game.player.setArmorSprite();
                  game.client.sendLook(0,spriteId);
                }
                self.playerAnim.sprites[0] = game.sprites[AppearanceData[spriteId].sprite];
      					self.updateLook();
      					game.app.initPlayerBar();
      				}
            };

            /*var changeLookWeapon = function (index)
            {
              if (self.weaponLooks.length > 0)
      				{
      					index = self.looksWeaponIndex = (index + self.weaponLooks.length) % self.weaponLooks.length;
      					var spriteId = self.weaponLooks[index];
                if (spriteId==0 || game.player.appearances[spriteId] == 1)
                {
                  //var index = p.isArcher() ? 3 : 1;
                  game.player.sprites[1] = spriteId;
                  game.player.setWeaponSprite();
                  game.client.sendLook(1,spriteId);
                }
                self.playerAnim.sprites[1] = game.sprites[AppearanceData[spriteId].sprite];
      					self.updateLook();
      					game.app.initPlayerBar();
      				}
            }*/

      			$('#changeLookArmorPrev').bind("click", function(event) {
              changeLookArmor(--self.looksArmorIndex);
      			});

      			$('#changeLookArmorNext').bind("click", function(event) {
              changeLookArmor(++self.looksArmorIndex);
      			});

      			/*$('#changeLookWeaponPrev').bind("click", function(event) {
              changeLookWeapon(--self.looksWeaponIndex);
      			});

      			$('#changeLookWeaponNext').bind("click", function(event) {
              changeLookWeapon(++self.looksWeaponIndex);
            });*/
        },

        setScale: function() {
          this.scale = game.renderer.getUiScaleFactor();
        },

        rescale: function() {
        	this.setScale();
		      this.storeFrame.rescale();
        },

        hide: function() {
            $('#storeDialogInventory').css("display","block");
            $('#looksDialogPlayer').css("display","none");

            $('#appearanceDialog').css("display","none");
            this._super();
        },

        assign: function(datas) {
            var weapon, armor,
                width1, height1, width2, height2, width3, height3;

        		game.player.appearances = HexToBin(datas.shift());

            for(var i=0; i < AppearanceData.length; i++)
            {
              AppearanceData[i].buy = parseInt(datas.shift());
            }

            this.storeFrame.pageArmor.onData();
            this.storeFrame.pageWeapon.onData();

            var categoryTypeArmor = "armor", categoryTypeWeapon = "weapon";

    		    if (game.player.isArcher()) {
              categoryTypeArmor="armorarcher";
      		    categoryTypeWeapon="weaponarcher";
            }

      	    this.armorLooks = [];
      	    this.weaponLooks = [];
            this.looksArmorIndex = 0;
            this.looksWeaponIndex = 0;

	          for(var i=0; i < AppearanceData.length; i++)
            {
              if (game.player.appearances[i] == 0)
                continue;

            	//var appearanceIndex = game.player.appearances[i];
            	if (AppearanceData[i].type == categoryTypeArmor)
            		this.armorLooks.push(i);
            	else if (AppearanceData[i].type == categoryTypeWeapon)
            		this.weaponLooks.push(i);
            	//if (i == game.player.sprite[0])
            		//this.looksArmorIndex = (this.armorLooks.length-1);
            	//if (i == game.player.sprite[1])
            		//this.looksWeaponIndex = (this.weaponLooks.length-1);
            }
            this.looksArmorIndex = this.armorLooks.indexOf(game.player.sprite[0]);
            this.looksWeaponIndex = this.weaponLooks.indexOf(game.player.sprite[0]);

            this.scale = game.renderer.getUiScaleFactor();

            this.updateLook();
        },

        update: function (itemType, sprite) {
          this.playerAnim.sprites[itemType] = sprite;
          this.updateLook();
        },

        updateLook: function() {
            var self = this;
            var anim = this.playerAnim;

            var player = game.player;

            if (anim.sprites.length == 0) {
              anim.addSprite(player.getArmorSprite());
              anim.addSprite(player.getWeaponSprite());
              anim.setHTML(['#characterLookArmor','#characterLookWeapon']);
            }

            /*var sprite = player.armorSprite;
            if (anim.sprites[0] != sprite)
            {
              anim.sprites[0] = sprite;
              anim.loadAnimations(sprite);
            }

            var sprite = player.weaponSprite;
            if (anim.sprites[1] != sprite)
            {
              anim.sprites[1] = sprite;
              anim.loadAnimations(sprite);
            }*/

            var armor = anim.sprites[0];
            var weapon = anim.sprites[1];

            var inc = 0, inc_fn = 0;
            if (this.paInterval)
              clearInterval(this.paInterval);
            //var pa = anim;
            var fn = [anim.walk,
              anim.hit];
            this.paInterval = setInterval(function () {
              if (!anim.isLoaded)
                return;

              var o = (inc % 3)+1;
              fn[(inc_fn % fn.length)].bind(anim)(o);
              if (++inc_fn % fn.length == 0)
                inc++;
            }, 1500);


            var zoom = 1.5;
            var scale = 2;

      			width1 = weapon ? weapon.width * scale * zoom : 0;
      			height1 = weapon ? weapon.height * scale * zoom : 0;

      			width2 = armor ? armor.width * scale * zoom : 0;
      			height2 = armor ? armor.height * scale * zoom : 0;

            width3 = Math.max(width1, width2);
            height3 = Math.max(height1, height2);

            switch (this.scale) {
                case 1:
                    $('#characterLook').css('left', '' + (90 - parseInt(width3 / 2)) + 'px');
                    $('#characterLook').css('top', '' + 40 + 'px');
                    break;
                case 2:
                    $('#characterLook').css('left', '' + (180 - parseInt(width3 / 2)) + 'px');
                    $('#characterLook').css('top', '' + 80 + 'px');
                    break;
                case 3:
                    $('#characterLook').css('left', '' + (270 - parseInt(width3 / 2)) + 'px');
                    $('#characterLook').css('top', '' + 120 + 'px');
                    break;
            }


            $('#characterLook').css('width', '' + width3 + 'px');
            $('#characterLook').css('height', '' + height3 + 'px');

            $('#characterLookArmor').css('left', '' + parseInt((width3 - width2) / 2 /*+ armor.offsetX*/) + 'px');
            $('#characterLookArmor').css('top', '' + parseInt((height3 - height2) / 2 /*+ armor.offsetY*/) + 'px');
            $('#characterLookWeapon').css('left', '' + parseInt((width3 - width1) / 2 /*- (weapon.offsetX - armor.offsetX)*/) + 'px');
            $('#characterLookWeapon').css('top', '' + parseInt((height3 - height1) / 2 /*- (weapon.offsetY - armor.offsetY)*/) + 'px');

        },

        show: function() {


            this.rescale();

            this.storeFrame.open();
            game.client.sendAppearanceList();
            //game.client.sendLooks();

            $('#storeDialog .frameheadingtext').text('LOOKS');

            $('#storeDialogStore0Button').hide();
            $('#storeDialogStore2Button').hide();

            $("#storeDialogStore3Button").text("LOOKS");
            $("#storeDialogStore3Button").show();

            $('#storeDialogStore3Button').off().on('click', function (event) {
                  $('#appearanceDialog').show();
            });

            $('#appearanceCloseButton').off().on('click', function (event) {
                  $('#appearanceDialog').hide();
            });


            $('#looksDialogPlayer').css("display","block");

            //this.appearanceFrame.update(game.player.getArmorSprite().name, game.player.getWeaponSprite().name);
            //this.appearanceFrame.show();

            this._super();
            //$("#storeDialogStore1Button").trigger('click');
        },
    });

    return AppearanceDialog;
});


define('text!data/../../shared/data/mobs_speech.json', function () { return '{\n\t"plot": [\n\t\t"You have awoken",\n\t\t"You\'re awake",\n\t\t"It\'s awake?",\n\t\t"You will die this time",\n\t\t"How could this happen?",\n\t\t"Is that you?",\n\t\t"It cant be..",\n\t\t"But, but I thought you were dead..",\n\t\t"This time you will not survive.",\n\t\t"I will kill you for good.",\n\t\t"None can survive me!",\n\t\t"Curses youre alive still.",\n\t\t"But, We destroyed you..",\n\t\t"We killed your father and well kill you.",\n\t\t"How can you be alive still?",\n\t\t"Your brother gasped as he died.",\n\t\t"Its, its you..",\n\t\t"The chosen one, ha you will pay in blood"\n\t],\n\t\n\t"battle": [\n\t\t"Argh",\n\t\t"Ugh",\n\t\t"Oooh",\n\t\t"Ahhh",\n\t\t"MMmm",\n\t\t"Eaat",\n\t\t"Delicious",\n\t\t"Die",\n\t\t"Kill it",\n\t\t"Kill",\n\t\t"Destroy",\n\t\t"Maimm",\n\t\t"Death",\n\t\t"Foood",\n\t\t"Starving",\n\t\t"Rawr",\n\t\t"Roar",\n\t\t"Yummy",\n\t\t"Grrr",\n\t\t"Growl"\n\t]\n}\n';});

/* global Types */
define('data/mobspeech',['text!../../shared/data/mobs_speech.json'], function(MobsSpeechJson) {

	var MobSpeech = {};
	MobSpeech.Speech = {};
	var mobParse = JSON.parse(MobsSpeechJson);
	$.each( mobParse, function( key, value ) {
		MobSpeech.Speech[key] = value;
	});
    return MobSpeech;
});

define('playerpopupmenu',[], function() {
    var PlayerPopupMenu = Class.extend({
        init: function(game){
            this.width = parseInt($('#playerPopupMenuContainer').css('width'));
            this.height = parseInt($('#playerPopupMenuContainer').css('height'));
            this.game = game;
            this.selectedPlayer = null;

            var self = this;
            $('#playerPopupMenuPartyInvite').click(function(event){
                if(self.selectedPlayer){
        	    self.game.client.sendPartyInvite(self.selectedPlayer.name, 0);
                    self.close();
                }
            });
            $('#playerPopupMenuPartyLeader').click(function(event){
                if(self.selectedPlayer){
                    self.game.client.sendPartyLeader(self.selectedPlayer.name);
                    self.close();
                }
            });
            $('#playerPopupMenuPartyKick').click(function(event){
                if(self.selectedPlayer){
                    self.game.client.sendPartyKick(self.selectedPlayer.name);
                    self.close();
                }
            });
            $('#playerPopupMenuAttack').click(function(event){
                if(self.selectedPlayer){
                    if (self.game.player.pvpTarget && self.game.player.pvpTarget == self.selectedPlayer)
                    {
                        $('#playerPopupMenuAttack').html('Attack');
                    	//self.game.player.pvpTarget = null;
                    }
                    else
                    {
			//$('#playerPopupMenuAttack').html('Disengage');
                        self.game.player.pvpTarget = self.selectedPlayer;
                        // Player has 60 seconds of battle time.
                        setTimeout(function () {
				if (self.game.player)
					self.game.player.pvpTarget = null;
                        	clearInterval(self.game.makePlayerAttackAuto);
                    	},60000);
                    }
                }
                self.close();
            });

        },
        click: function(player){
            var s = this.game.renderer.scale;
            var x = (player.x - this.game.camera.x) * s - $('#playerPopupMenuContainer').width()/2;
            var y = (player.y - this.game.camera.y) * s - $('#playerPopupMenuContainer').height()/2;
            var ph = this.game.socialHandler;


            /*if(x < 0){
                x = 0;
            } else if(x + this.width > this.game.renderer.getWidth()){
                x = this.game.renderer.getWidth() - this.width;
            }*/

            /*if(y < 0){
                y = 0;
            } else if(y + this.height > this.game.renderer.getHeight()){
                y = this.game.renderer.getHeight() - this.height;
            }*/

            this.selectedPlayer = player;

            if (ph.isPartyLeader(this.game.player.name) && ph.isPartyMember(this.selectedPlayer.name))
            {
                $('#playerPopupMenuPartyKick').css('display', 'block');
                $('#playerPopupMenuPartyLeader').css('display', 'block');
            }
            else
            {
            	$('#playerPopupMenuPartyKick').css('display', 'none');
            	$('#playerPopupMenuPartyLeader').css('display', 'none');
            }

            if ((ph.isPartyLeader(this.game.player.name) && !ph.isPartyMember(this.selectedPlayer.name)) || ph.partymembers.length == 0)
            {
            	$('#playerPopupMenuPartyInvite').show()
              setTimeout(function () {
                  $('#playerPopupMenuPartyInvite').hide();
              }, 10000);
            }
            else
            {
            	$('#playerPopupMenuPartyInvite').hide();
            }

            if (this.selectedPlayer.level >= 20 && this.game.player.level >= 20 && this.game.mapIndex != 0)
            {
            	    $('#playerPopupMenuAttack').css('display','block');
            }
            else
            {
            	    $('#playerPopupMenuAttack').css('display', 'none');
            }

            $('#playerPopupMenuContainer').css('display', 'block');
            $('#playerPopupMenuContainer').css('top', '' + y + 'px');
            $('#playerPopupMenuContainer').css('left', '' + x + 'px');
            $('#playerPopupMenuName').html(player.name);
        },
        close: function(){
            this.selectedPlayer = null;
            $('#playerPopupMenuContainer').css('display', 'none');
        },
    });

    return PlayerPopupMenu;
});

define('classpopupmenu',[], function() {
    var ClassPopupMenu = Class.extend({
        init: function(){
            var self = this;

            $('#classSwitcherButton').click(function(event){
                game.player.skillHandler.hideShortcuts();
                game.statDialog.page.clear();
                game.client.sendClassSwitch($('#selectClassSwitch').val());
                self.close();
                self.show = false;
            });
        },

        close: function(){
            $('#classSwitcher').css('display', 'none');
        },
        open: function(){
            $('#classSwitcher').css('display', 'block');
        },
    });

    return ClassPopupMenu;
});

/* global Types, Class */

define('equipmenthandler',['entity/item', 'data/items'], function(Item, Items) {
    var EquipmentHandler = Class.extend({
        init: function(game) {
            var self = this;
            this.game = game;
            this.equipment = [];
            this.maxNumber = 5;
            this.scale = 3;

            /*var selectEquipment = function(event) {
              if (self.game.ready) {
                var slot = $(this).data("itemSlot");

                log.info("slot=" + slot);
                //log.info("inventories " + JSON.stringify(self.inventory));
                var item = self.equipment[slot];

                if (item && self.selectedItem != realslot) {
                    self.selectItem(self.selectedItem, false);
                    self.selectItem(realslot, true);
                    $('#invActionButton').data('itemType', 2);
                    $('#invActionButton').data('itemSlot', slot);

                    if (game.inventoryMode == InventoryMode.MODE_SELL) {
                      $('.inventorySellGold').html(parseInt(ItemTypes.getEnchantSellPrice(item)));
                    }
                    else if (game.inventoryMode == InventoryMode.MODE_REPAIR) {
                      $('.inventorySellGold').html(parseInt(ItemTypes.getRepairPrice(item)));
                    }
                    else if (game.inventoryMode == InventoryMode.MODE_ENCHANT) {
                      $('.inventorySellGold').html(parseInt(ItemTypes.getEnchantPrice(item)));
                    }
                    else if (game.inventoryMode == InventoryMode.MODE_BANK) {
                    }
                    return;
                  }
                }

                if (item && self.selectedItem == realslot) {
                  var triggerClick = false;
                  if (game.inventoryMode == InventoryMode.MODE_SELL) {
                    triggerClick = true;
                  }
                  else if (game.inventoryMode == InventoryMode.MODE_REPAIR) {
                    triggerClick = true;
                  }
                  else if (game.inventoryMode == InventoryMode.MODE_ENCHANT) {
                    triggerClick = true;
                  }
                  else if (game.inventoryMode == InventoryMode.MODE_BANK) {
                    triggerClick = true;
                  }
                  else {
                    self.game.unequip(slot);
                  }
                  if (triggerClick) {
                    $('#invActionButton').data('itemType', 2);
                    $('#invActionButton').data('itemSlot', slot);
                    $('#invActionButton').trigger("click");
                  }
                  self.selectItem(realslot, false);
                }
              };*/


            for (var i=0; i < 5; ++i)
            {
              $('#equipment'+i).attr('draggable', true);
              $('#equipment'+i).draggable = true;
              $('#equipment'+i).data("slot", i);
              $('#equipBackground'+i).data("slot", i);

              /*$('#equipment'+i).on('click', function (event) {
                self.selectItem($(this).data("slot"), true);
              });*/

              /*$('#equipment'+i).on('click', function (event) {
                if (DragItem) {
                  var slot = $(this).data("slot");
                  game.client.sendItemSlot([1, DragItem.type, DragItem.slot, 1, 2, slot]);
                  DragItem = null;
                  game.inventoryHandler.deselectItem();
                }
                else {
                  DragItem = {};
                  DragItem.type = 2;
                  DragItem.slot = $(this).data("slot");
                  if (self.selectedItem >= 0)
                    self.selectItem(self.selectedItem, false);
                  self.selectItem($(this).data("slot"), true);

                }
              });*/

              /*$('#equipBackground'+i).on('drop', function(event) {
                if (DragItem) {
                  var slot = $(this).data("slot");
                  game.client.sendItemSlot([2, DragItem.type, DragItem.slot, 1, 2, slot]);
                  DragItem = null;
                  game.inventoryHandler.deselectItem();
                }
              });

              $('#equipment'+i).on('dragover touchover', function(event) {
                event.preventDefault();
              });
              $('#equipment'+i).on('dragover touchover', function(event) {
                event.preventDefault();
              });

              $('#equipment'+i).on('dragstart touchstart', function(event) {
              	log.info("Began DragStart.")
                if (DragItem === null) {
              	  DragItem = {};
              	  DragItem.type = 2;
                  DragItem.slot = $(this).data("slot");
                }
              });*/
            }

            // TODO - TEMP REMOVE.
            //$('#equipment1').data("slot", 0);
            //$('#equipBackground1').data("slot", 0);
            //$('#equipment4').data("slot", 1);
            //$('#equipBackground4').data("slot", 1);

        },

        selectItem: function(realslot, select) {
          var self = this;
          log.info("equipment - selectItem" + realslot);
          if (select) {
            this.selectedItem = realslot;
            $('#equipBackground' + realslot).css({
              'border': self.scale + 'px solid white'
            });
          }
          else {
            $('#equipBackground' + realslot).css({
              'border': 'none'
            });
            this.selectedItem = -1;
          }
        },

        clearItem: function (slot) {
          $('#equipment'+slot).css({
            'background-image': "none",
            'box-shadow': "none"
          });
          $('#equipment'+slot).html('');
        },

        setEquipment: function(itemRooms) {
            for(var i = 0; i < itemRooms.length; ++i)
            {
              this.clearItem(i);
              var item = itemRooms[i];
              if (item.itemKind == -1) {
                this.equipment[item.slot] = null;
                continue;
              }
              if (item) {
                this.equipment[item.slot] = item;

                if (item.slot == 4)
                  game.player.setRange();
              }
            }
            this.refreshEquipment();
        },

        refreshEquipment: function() {
          var scale = game.renderer.guiScale;

          // Dumped from Char dialog.

          for (var i=0; i < this.maxNumber; ++i) {
            var item = this.equipment[i];
            var jqElement = '#equipment'+i;

            if (item && item.itemKind > 0 && item.itemKind < 1000) {
              item.name = ItemTypes.KindData[item.itemKind].name;
            }
            if (jqElement && item) {
              Items.jqShowItem($(jqElement), item, $(jqElement));

              /*var itemData = ItemTypes.KindData[item.itemKind];
              $(jqElement).css({
                'background-image': "url('img/" + scale + "/" + itemData.sprite + "')",
                'background-position': '-' + (itemData.offset[0] * scale * 16) + 'px -' + (itemData.offset[1] * scale * 16) + 'px',
                'line-height': (scale * 16) + 'px',
                'text-shadow': '-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black',
                'color': 'white',
                'font-size': (scale * 6) + 'px',
                'text-align': 'center',
                'box-shadow': 'inset 0 0 0 ' + (scale * 16) + 'px rgba(255,0,0,' + (1 - (item.itemDurability / item.itemDurabilityMax)) + ')'
              });

              $(jqElement).attr(
                'title',
                Item.getInfoMsgEx(item)
              );
              $(jqElement).html(ItemTypes.getLevelByKind(item.itemKind) + '+' + item.itemNumber);*/
            }
            else {
              this.clearItem(i);
            }
          }
        },

    });

    return EquipmentHandler;
});

/* global Types, Class */



define('inventoryhandler',['button2', 'entity/item', 'data/itemlootdata', 'data/items'],
  function(Button2, Item, ItemLoot, Items)
{
  var InventoryHandler = Class.extend({
    init: function(game) {
      this.game = game;

      this.maxInventoryNumber = 48;
      this.itemListCount = 24;
      this.inventory = [];

      this.scale = this.game.renderer.getUiScaleFactor();
      this.xscale = this.game.renderer.getIconScaleFactor();
      log.info("this.scale=" + this.scale);

      this.inventorybutton = new Button2('#inventorybutton', {
        background: {
          left: 196 * this.scale,
          top: 314 * this.scale,
          width: 17 * this.scale
        },
        kinds: [0, 2],
        visible: false
      });

      this.healingCoolTimeCallback = null;

      this.isShowAllInventory = false;

      this.selectedItem = -1;

      this.pageIndex = 0;
      this.pageItems = 24;

      var self = this;
      for (var i = 0; i < 4; i++) {
        $('#scinventorybackground' + i).bind("click", function(event) {
          if (self.game.ready) {
            $("#inventoryGearItems").trigger('click');
            var slot = parseInt(this.id.slice(21));

            log.info("inventoryNumber"+slot);
            var item = self.inventory[slot];
            if (item) {
              item.slot = self.getRealSlot(slot);
              if (ItemTypes.isConsumableItem(item.itemKind)) {
                game.useItem(item);
              }
            }
          }
        });
      }

      this.closeButton = $('#inventoryCloseButton');
      this.closeButton.click(function(event) {
        game.inventoryMode = InventoryMode.MODE_NORMAL;
        self.deselectItem();
        self.hideInventory();
        self.refreshInventory();
      });

      $('#inventoryGearItems').click(function(event) {
        self.pageIndex = 0;
        self.deselectItem();
        self.refreshInventory();
      });
      $('#inventoryGear2Items').click(function(event) {
        self.pageIndex = 1;
        self.deselectItem();
        self.refreshInventory();
      });
    },

    loadInventoryEvents: function() {
      var self = this;
      //DragItem = {};

      self.selectInventory = function(jq) {
        if (!self.game || !self.game.ready)
          return;

        var slot = $(jq).data("itemSlot");
        var type = $(jq).data("itemType");
        log.info("selectInventory - click, slot:"+slot+", type:"+type);

        var realslot = slot;
        var item = null;
        if (type == 0) {
          realslot += (self.pageIndex * self.pageItems);
          item = self.inventory[realslot];
        }
        else {
          item = game.equipmentHandler.equipment[slot];
        }

        //if (!item)
          //return;



        $('.inventorySellGold').html("0");
        if (item) {
          var kind = item.itemKind;
          if (game.inventoryMode == InventoryMode.MODE_ENCHANT ||
              game.inventoryMode == InventoryMode.MODE_REPAIR)
          {
            if (!ItemTypes.isEquipment(kind))
              return;
          }
          if (game.inventoryMode == InventoryMode.MODE_SELL ||
              game.inventoryMode == InventoryMode.MODE_AUCTION)
          {
            if (ItemTypes.isLootItem(kind))
              return;
          }
        }
        //log.info("slot=" + slot);
        //log.info("inventories " + JSON.stringify(self.inventory));
        if (item && self.selectedItem != realslot) {
            $('.inventorySellGoldFrame').show();
            self.selectItem(type, self.selectedItem, false);
            self.selectItem(type, realslot, true);
            $('#invActionButton').data('itemType', type);
            $('#invActionButton').data('itemSlot', realslot);

            var kind = item.itemKind;
            if (game.inventoryMode == InventoryMode.MODE_AUCTION) {
              var value = ~~(ItemTypes.getEnchantSellPrice(item)/2);
              $('.inventorySellGold').html(parseInt(value));
            }
            else if (game.inventoryMode == InventoryMode.MODE_SELL) {
              $('.inventorySellGold').html(parseInt(ItemTypes.getEnchantSellPrice(item)));
            }
            else if (game.inventoryMode == InventoryMode.MODE_REPAIR) {
              $('.inventorySellGold').html(parseInt(ItemTypes.getRepairPrice(item)));
            }
            else if (game.inventoryMode == InventoryMode.MODE_ENCHANT) {
              $('.inventorySellGold').html(parseInt(ItemTypes.getEnchantPrice(item)));
            }
            else if (game.inventoryMode == InventoryMode.MODE_BANK) {
              $('.inventorySellGoldFrame').hide();
            }
            else if (game.inventoryMode == InventoryMode.MODE_NORMAL) {
              $('.inventorySellGoldFrame').hide();
            }
            return;
        }

        if (item && self.selectedItem == realslot) {
          var triggerClick = false;
          if (game.inventoryMode == InventoryMode.MODE_AUCTION) {
            triggerClick = true;
          }
          else if (game.inventoryMode == InventoryMode.MODE_SELL) {
            //log.info("item " + JSON.stringify(item));
            //$('.inventorySellGold').html(parseInt(ItemTypes.getEnchantSellPrice(item)));
            triggerClick = true;
          }
          else if (game.inventoryMode == InventoryMode.MODE_REPAIR) {
            //log.info("item " + JSON.stringify(item));
            //$('.inventorySellGold').html(parseInt(ItemTypes.getRepairPrice(item)));
            triggerClick = true;
          }
          else if (game.inventoryMode == InventoryMode.MODE_ENCHANT) {
            //log.info("item " + JSON.stringify(item));
            //$('.inventorySellGold').html(parseInt(ItemTypes.getEnchantPrice(item)));
            triggerClick = true;
          }
          else if (game.inventoryMode == InventoryMode.MODE_BANK) {
            //log.info("item " + JSON.stringify(item));
            triggerClick = true;
          }
          else {
            item.slot = realslot;
            game.useItem(item, type);
          }
          if (triggerClick) {
            $('#invActionButton').data('itemType', type);
            $('#invActionButton').data('itemSlot', slot);
            $('#invActionButton').trigger("click");
          }
          self.deselectItem();
        }
        //self.deselectItem();
      }

// TODO: FIX BROKEN.
      for (var i = 0; i <= 4; i++) {
        // TODO - Check if not needed.
        //$('#characterEquip'+i).data("itemType",2);
        //$('#characterEquip'+i).data("itemSlot",i);
        $('#equipment' + i).attr('draggable', true);
        $('#equipment' + i).draggable = true;

        $('#equipment'+i).data("itemType",2);
        $('#equipment'+i).data("itemSlot",i);

        $('#equipBackground'+i).data("itemType",2);
        $('#equipBackground'+i).data("itemSlot",i);

        var equipItem = function (slot) {
          if (DragItem) {
            game.client.sendItemSlot([1, DragItem.type, DragItem.slot, 1, 2, slot]);
            DragItem = null;
            self.deselectItem();
          }
          else {
            DragItem = {};
            DragItem.action = 2;
            DragItem.type = 2;
            DragItem.slot = slot;
          }
        };

        var getEquipment = function (slot) {
          if (slot < 0) return null;
          return game.equipmentHandler.equipment[slot];
        };

        $('#equipBackground'+i).on("click", function (e) {
          var slot = $(this).data("itemSlot");
          if (self.selectedItem >= 0) {
            equipItem(slot);
          }
          else {
            if (self.selectedItem == -1 && (slot >= 0 && getEquipment(slot) == null))
              return;

            self.selectInventory(this);
            equipItem(slot);
          }
        });

        $('#equipment'+i).on('dragstart touchstart', function(event) {
          if (self.selectedItem < 0) {
            self.selectInventory(this);
            equipItem($(this).data("itemSlot"));
          }
        });

        $('#equipment' + i).on('dragover touchover', function(event) {
          event.preventDefault();
        });

        $('#equipBackground'+i).on('drop touchend', function(event) {
          equipItem($(this).data("itemSlot"));
        });
      }

      for (var i = 0; i < 24; i++) {
        $('#inventory' + i).attr('draggable', true);
        $('#inventory' + i).draggable = true;

        $('#inventorybackground' + i).data('itemType',0);
        $('#inventorybackground' + i).data('itemSlot',i);
        //$('#inventory' + i).data('itemType',0);
        //$('#inventory' + i).data('itemSlot',i);
        //$('#inventorybackground' + i).click(selectInventory);

				var moveItem = function (realslot) {
          //var realslot = slot; // + (self.pageIndex * self.pageItems);

          if (DragItem === null) {
            DragItem = {};
            DragItem.type = 0;
            DragItem.slot = realslot;
          }
          else {
            var action = DragItem.action || 2;
            game.client.sendItemSlot([action, DragItem.type, DragItem.slot, 1, 0, realslot]);
            DragItem = null;
            self.deselectItem();
          }
				};

				/*var dropItem = function (slot) {
          var realslot = slot + (self.pageIndex * self.pageItems);
				};*/

        var itemslot = function (slot) {
          return slot + (self.pageIndex * self.pageItems);
        }

        /*var getItem = function (realslot) {
          if (realslot < 0) return null;
          return self.inventory[realslot];
        };*/

        $('#inventorybackground'+i).on('click tap', function(event) {
          var slot = $(this).data("itemSlot");
          var realslot = itemslot(slot);

          var hasSelected = (self.selectedItem == -1);

          if (!hasSelected && self.getItem(slot) == null) {
            if (game.gamepad.isActive())
                moveItem(realslot);
            self.deselectItem();
            return;
          }
          if (!hasSelected) {
            self.selectInventory(this);
            if (game.gamepad.isActive())
              moveItem(realslot);
            return;
          }

          var isSame = (self.selectedItem == realslot);
          if (hasSelected || !isSame)
            self.selectInventory(this);
          if (!game.renderer.isDesktop || isSame || hasSelected)
            moveItem(realslot);
        });

        $('#inventorybackground'+i).on('dragstart touchstart', function(event) {
          if (self.selectedItem == -1)
            self.selectInventory(this);
          if (!DragItem)
					  moveItem(itemslot($(this).data("itemSlot")));
        });

        $('#inventory' + i).on('dragover touchover', function(event) {
          event.preventDefault();
        });

        $('#inventorybackground' + i).on('drop touchend', function(event) {
          if (DragItem)
					  moveItem(itemslot($(this).data("itemSlot")));
        });
      }

      $('#game').on('dragover touchover', function(event) {
        event.preventDefault();
      });

      $('#game').on('drop touchend', function(event) {

        self.game.app.setMouseCoordinates(event);

        var invCheck = DragItem && DragItem.slot >= 0;

        if (invCheck) {
          var mousePos = self.game.getMouseGridPosition();
          self.game.dropItem(DragItem.slot, mousePos.x, mousePos.y);
          DragItem = null;
        }
      });

      this.sellButton = $('#invActionButton');
      this.sellButton.off().on('click', function(event) {
        var game = self.game;

        var type = parseInt($(this).data('itemType'));
        var slot = parseInt($(this).data('itemSlot'));

        log.info("invActionButton - click, type:"+type+", slot:"+slot);
        var item = self.inventory[slot];
        if (type === 2)
          item = game.equipmentHandler.equipment[slot];

        self.deselectItem();
        if (item) {
          var kind = item.itemKind;
          if (game.inventoryMode == InventoryMode.MODE_AUCTION) {
            if (ItemTypes.isLootItem(kind) || ItemTypes.isConsumableItem(kind))
              return;

              var value = ~~(ItemTypes.getEnchantSellPrice(item)/2);
              $('#auctionSellCount').val(value);
              game.app.showAuctionSellDialog(slot);
              //game.client.sendAuctionSell(slot);
          }
          else if (game.inventoryMode == InventoryMode.MODE_SELL) {
            if (ItemTypes.isLootItem(kind))
              return;

              game.client.sendStoreSell(type, slot);
          }
          else if (game.inventoryMode == InventoryMode.MODE_REPAIR) {
              if (!ItemTypes.isEquipment(kind))
                return;

              game.repairItem(type, item, slot);
          }
          else if (game.inventoryMode == InventoryMode.MODE_ENCHANT) {
              if (!ItemTypes.isEquipment(kind))
                return;

              game.enchantItem(type, item, slot);
          }
          else if (game.inventoryMode == InventoryMode.MODE_BANK) {
            if (!game.bankHandler.isBankFull()) {
              game.client.sendItemSlot([2, type, slot, 1, 1, -1]);
            }
          }
        }
      });

      $('.inventoryGoldFrame').off().on('click', function(event) {
        if (self.game.bankDialog.visible) {
          self.game.app.showDropDialog(-1);
        }
      });
    },

    deselectItem: function() {
      DragItem = null;
      this.selectItem(this.selectedType, this.selectedItem, false);
    },

    selectItem: function(type, realslot, select) {
      pageslot = realslot % this.pageItems;
      htmlItem = $('#inventorybackground' + pageslot);
      if (type == 2) {
        htmlItem = $('#equipBackground'+realslot);
      }
      this.selectedType = type;
      if (select) {
        this.selectedItem = realslot;
        htmlItem.css({
          'border': this.scale + 'px solid white'
        });
      }
      else {
        this.selectedItem = -1;
        htmlItem.css({
          'border': 'none'
        });
      }
    },

    moveShortcuts: function(x, y) {
      this.container.css({
        "left": this.game.mouse.x + "px",
        "top": this.game.mouse.y + "px"
      });
    },

    showInventoryButton: function() {
      var scale = this.scale;
      this.inventorybutton.setBackground({
        left: 196 * scale,
        top: 314 * scale,
        width: 17 * scale
      });
    },

    refreshInventory: function() {

      this.makeEmptyInventoryAll();

      if (this.pageIndex === 0) {
        //for (var i=0; i < 24; ++i)
        this.showInventoryItems(0,24);
      }
      else if (this.pageIndex === 1) {
        //for (var i=24; i < 48; ++i)
        this.showInventoryItems(24,48);
      }
    },

    setCurrency: function(gold, gems) {
      $('.inventoryGold').text(getGoldShortHand(gold));
      $('.inventoryGems').text(gems);
    },

    initInventory: function(itemArray) {
      this.pageIndex = 0;
      this.setInventory(itemArray);
      this.refreshInventory();
    },

    setInventory: function(itemArray) {
      for (var item of itemArray)
      {
        var i = item.slot;
        if (item.itemKind == -1)
        {
          this.inventory[i] = null;
          this.makeEmptyInventory(i);
          continue;
        }

        this.inventory[i] = item;
        var kind = item.itemKind;
        if (kind >= 1000 && kind < 2000)
          item.name = ItemLoot[kind - 1000].name;
        else
          item.name = ItemTypes.KindData[kind].name;

        var count = this.pageIndex * this.pageItems;
        if (i >= count && i < (count + this.pageItems))
          this.showInventoryItems(i);
      }
    },

    hasItems: function(itemKind, itemCount){
        var a = 0;
        for(var i in this.inventory){
            if(this.inventory[i] && this.inventory[i].itemKind === itemKind){
            	 a += this.inventory[i].itemNumber;
            	 if (a >= itemCount)
                	return true;
            }
        }
        return false;
    },

    showInventoryItems: function(slotStart, slotEnd) {
      slotStart = slotStart || 0;
      slotEnd = slotEnd || slotStart+1;

      log.info("this.scale=" + this.scale);
      var scale = this.scale;

      // TODO - Work out why not emptying item shortcuts.
      for (var i = slotStart; i < slotEnd; ++i)
      {
        var item = this.inventory[i];
        var itemSlot = i % this.pageItems;
        if (!item)
        {
          this.makeEmptyInventory(itemSlot);
          continue;
        }
        var itemKind = item.itemKind;

        var itemNumber = item.itemNumber;

        var itemData;

        if (itemKind >= 1000 && itemKind < 2000) {
          itemData = ItemLoot[itemKind - 1000];
        } else {
          itemData = ItemTypes.KindData[itemKind];
        }
        var spriteName = itemData.sprite;
        if (itemKind >= 1000 && itemKind < 2000) {
          spriteName = game.sprites["itemloot"].file;
        } else if (ItemTypes.isEquippable(itemKind)) {
          spriteName = game.sprites["items"].file;
        }

        /*if (ItemTypes.isConsumableItem(itemKind)) {
          if (itemKind > 0) {

            $('#scinventory' + itemSlot).css({
              'background-image': "url('img/" + scale + "/" + spriteName + "')",
              'background-position': '-' + (itemData.offset[0] * scale * 24) + 'px -' + (itemData.offset[1] * scale * 24) + 'px',
              'background-size': (144 * scale) + "px " + (24 * scale) + "px",
              'background-offset': '-' + scale + "px -" + scale + "px"
            });


            $('#scinventory' + itemSlot).attr('title', Item.getInfoMsgEx(item));
            $('#scinventory' + itemSlot).html(itemNumber);
          }
        }*/

        if (itemKind > 0) {
          var jq = $('#inventory' + itemSlot);
          Items.jqShowItem(jq, item, jq);

          //jq.attr('title', Item.getInfoMsgEx(item));
          //jq.html(itemNumber);
        }

        /*if (ItemTypes.isEquippable(itemKind)) {
          $('#inventory' + itemSlot).html(ItemTypes.getLevelByKind(itemKind) + '+' + itemNumber);
        } else {
          if (itemNumber > 1)
            $('#inventory' + itemSlot).html(itemNumber);
        }*/


        var highlight = $('#inventoryHL' + itemSlot);

        var ct = highlight.data('cooltime');
        if (ct && ct > 0) {
          highlight.css({
            'background-color': '#FF000077'
          });
          /*var shortcut = $('#scinventoryHL' + itemSlot);
          shortcut.css({
            'background-color': '#FF000077'
          });*/
          //return;
        }

        //var parent = $('#inventory' + itemSlot).parent();
        //parent.data('itemSlot', i);
        if (game.inventoryMode == InventoryMode.MODE_SELL ||
            game.inventoryMode == InventoryMode.MODE_AUCTION)
        {
          if (ItemTypes.isEquippable(itemKind)) {
            //$('#inventory' + itemSlot).addClass('active');
            highlight.css({
              'background-color': 'transparent'
            });
          } else {
            //$('#inventory' + itemSlot).removeClass('active');
            highlight.css({
              'background-color': '#00000077'
            });
            //parent.data('itemSlot', -1);
          }
        }
        else if (game.inventoryMode == InventoryMode.MODE_REPAIR) {
          if (ItemTypes.isEquippable(itemKind) &&  item.itemDurability != item.itemDurabilityMax) {
            //$('#inventory' + itemSlot).addClass('active');
            highlight.css({
              'background-color': 'transparent'
            });
          } else {
            //$('#inventory' + itemSlot).removeClass('active');
            highlight.css({
              'background-color': '#00000077'
            });
            //parent.data('itemSlot', -1);
          }
        }
        else if (game.inventoryMode == InventoryMode.MODE_ENCHANT) {
          if (ItemTypes.isEquippable(itemKind) && item.itemNumber < 25) {
            //$('#inventory' + itemSlot).addClass('active');
            highlight.css({
              'background-color': 'transparent'
            });
          } else {
            //$('#inventory' + itemSlot).removeClass('active');
            highlight.css({
              'background-color': '#00000077'
            });
            //parent.data('itemSlot', -1);
          }
        }
        else {
          //$('#inventory' + itemSlot).addClass('active');
          highlight.css({
            'background-color': 'transparent'
          });
        }
      }
    },

    setMaxInventoryNumber: function(maxInventoryNumber) {
      var i = 0;
      this.maxInventoryNumber = maxInventoryNumber;

      /*for (i = 0; i < maxInventoryNumber; i++) {
        $('#inventorybackground' + i).css('display', 'block');
        $('#inventorynumber' + i).css('display', 'block');
      }*/
    },

    makeEmptyInventory: function(i) {
      i = (i % this.pageItems);

      $('#inventorybackground' + i).attr('class', '');

      if (i >= 0 && i < 6)
      {
        $('#scinventory' + i).css('background-image', "none");
        $('#scinventory' + i).attr('title', '');
        $('#scinventory' + i).html("");
      }

      $('#inventoryHL' + i).css({
        'background-color': "transparent"
      });
      $('#inventory' + i).css({
        'background-image': "none",
      });
      $('#inventory' + i).attr('title', '');
      $('#inventory' + i).html('');
      $('#slot' + i).html('');
    },

    makeEmptyInventoryAll: function() {
      for (var i = 0; i < 24; i++)
      {
        this.makeEmptyInventory(i);
      }
    },


    toggleInventory: function(open) {
      this.isShowAllInventory = open || !this.isShowAllInventory;
      if (!$("#allinventorywindow").is(':visible')) {
        this.showInventory();
        game.gamepad.dialogOpen();
      } else {
        this.hideInventory();
      }
    },

    showInventory: function() {
      this.pageIndex = 0;
      $('.inventorySellGoldFrame').hide();
      if (game.inventoryMode == InventoryMode.MODE_AUCTION) {
        $('#invActionButton').text("LIST");
        $('#invActionButton').show();
      }
      else if (game.inventoryMode == InventoryMode.MODE_SELL) {
        $('#invActionButton').text("SELL");
        $('#invActionButton').show();
      }
      else if (game.inventoryMode == InventoryMode.MODE_ENCHANT) {
        $('#invActionButton').text("ENCHANT");
        $('#invActionButton').show();
      }
      else if (game.inventoryMode == InventoryMode.MODE_REPAIR) {
        $('#invActionButton').text("REPAIR");
        $('#invActionButton').show();
      }
      /*else if (game.inventoryMode == InventoryMode.MODE_BANK) {
        $('#invActionButton').text("BANK");
        $('#invActionButton').show();
      }*/
      else {
        $('#invActionButton').hide();
      }
      this.refreshInventory();
      $('#allinventorywindow').css('display', 'block');
    },

    hideInventory: function() {
      $('#allinventorywindow').css('display', 'none');
      game.inventoryMode = 0;
    },

    decInventory: function(slot) {
      var self = this;

      if (this.healingCoolTimeCallback === null) {
        //var cooltime = $('#scinventoryHL'+slot);
        var cooltime2 = $('#inventoryHL'+slot);

        var ct = '5';
        cooltime2.data('cooltime', ct);

        //cooltime.html(ct);
        cooltime2.html(ct);

        this.healingCoolTimeCallback = setInterval(function() {
          var ct = parseInt(cooltime2.data('cooltime'));
          cooltime2.data('cooltime', (--ct).toString());

          //cooltime.html(ct);
          cooltime2.html(ct);

          if (ct <= 0) {
            clearInterval(self.healingCoolTimeCallback);
            /*cooltime.css({
             'background-color': 'transparent'
           });*/
            cooltime2.css({
             'background-color': 'transparent'
            });
            self.healingCoolTimeCallback = null;
            //cooltime.html('');
            cooltime2.html('');
          }

        }, 1000);

        var count = this.inventory[slot].itemNumber;
        count -= 1;
        if (count <= 0) {
          this.inventory[slot] = null;
        }
        return true;
      }
      return false;
    },

    getItemInventorSlotByKind: function(kind) {
      for (i = 0; i < this.maxInventoryNumber; i++) {
        var item = this.inventory[i];
        if (item && kind == item.itemKind)
          return i;
      }
    },

    isInventoryFull: function() {
      for (var i = 6; i < this.maxInventoryNumber; ++i) {
        var item = this.inventory[i];
        if (item == null) {
          return false;
        }
      }
      return true;
    },

    hasItem: function(kind, count) {
      for (i = 6; i < this.maxInventoryNumber; i++) {
        var item = this.inventory[i];
        if (item && kind == item.itemKind && item.itemNumber >= count) {
          return true;
        }
      }
      return false;
    },

    getItemCount: function(kind) {
      for (i = 0; i < this.maxInventoryNumber; i++) {
        var item = this.inventory[i];
        if (item && kind == item.itemKind) {
          return item.itemNumber;
        }
      }
      return null;
    },

    getItemTotalCount: function(kind) {
      var total = 0;
      for (i = 0; i < this.maxInventoryNumber; i++) {
        var item = this.inventory[i];
        if (item && kind == item.itemKind) {
          total += item.itemNumber;
        }
      }
      return total;
    },

    getItemByKind: function(kind) {
      for (i = 0; i < this.maxInventoryNumber; i++) {
        var item = this.inventory[i];
        if (item && kind == item.itemKind) {
          item.slot = i;
          return item;
        }
      }
      return null;
    },

    getRealSlot: function (slot) {
      return slot + (this.pageIndex * this.pageItems);
    },

    getItem: function (slot) {
      var realslot = slot + (this.pageIndex * this.pageItems);
      if (realslot < 0) return null;
      if (!this.inventory[realslot])
        return null;
      return this.inventory[realslot];
    },
  });

  return InventoryHandler;
});

/* global Types, Class */

define('bankhandler',[], function() {
    var BankHandler = Class.extend({
        init: function(game) {
            var self = this;

            this.game = game;
            this.maxNumber = 96;
            this.banks = {};
        },

        initBank: function(itemArray) {
          for(var i = 0; i < itemArray.length; ++i)
          {
            var item = itemArray[i];
            if (item)
              this.banks[item.slot] = item;
          }
        },

        setBank: function(itemArray) {
          for(var i = 0; i < itemArray.length; ++i)
          {
            var item = itemArray[i];
            if (item.itemKind == -1)
              this.banks[item.slot] = null;
            else
              this.banks[item.slot] = item;
          }
        },

        setGold: function(gold) {
            this.gold = parseInt(gold);
            $('.bankGold').text(this.gold);
        },

        isBankFull: function() {
          if (Object.keys(this.banks).length < this.maxNumber)
            return false;
        	for (var i=0; i < this.maxBankNumber; i++)
        	{
        		if (!this.banks[i])
        			return false;
        	}
        	return true;
        },
    });

    return BankHandler;
});

define('socialhandler',[], function() {
  var SocialHandler = Class.extend({
    init: function(game) {
		var self = this;

		this.game = game;
		this.toggle = false;

		this.partymembers = [];
		$('#partyleave').click(function(event){
			self.game.client.sendPartyLeave();
			$('#partynames').html("");
			self.show();
		});
		$('#partyclose').click(function(e){
				self.show();
		});

		this.guildmembers = [];
		$('#guildleave').click(function(event){
			self.game.client.sendLeaveGuild();
			$('#guildnames').html("");
			self.show();
		});
		$('#socialclose').click(function(e){
				self.show();
		});

    },

    inviteParty: function (invitee)
    {
		var self = this;

		$('#socialconfirmtitle').html("Party " + invitee.name + "?");

      $('#socialconfirm').show();
	    $('#socialconfirmyes').on('click', function(event){
		    self.game.client.sendPartyInvite(invitee.name, 1);
		    $('#socialconfirm').hide();
	    });
	    $('#socialconfirmno').off().on('click', function(event){
		    self.game.client.sendPartyInvite(invitee.name, 2);
		    $('#socialconfirm').hide();
	    });

       setTimeout(function () {
         $('#socialconfirm').hide();
       }, 10000);
    },

    inviteGuild: function (guildId, guildName, invitorName)
    {
		var self = this;

      $('#socialconfirmtitle').html("Join Guild " + guildName + "?");

        $('#socialconfirm').show();
  	    $('#socialconfirmyes').on('click', function(event){
  		    self.game.client.sendGuildInviteReply(guildId, true);
  		    $('#socialconfirm').hide();
  	    });
  	    $('#socialconfirmno').on('click', function(event){
  		    self.game.client.sendGuildInviteReply(guildId, false);
  		    $('#socialconfirm').hide();
  	    });

         setTimeout(function () {
           $('#socialconfirm').hide();
         }, 10000);
    },

    show: function() {
        this.toggle = !this.toggle;
    	if (this.toggle)
    	{
            this.displayParty();
			this.displayGuild();
			$('#socialwindow').css('display', 'block');
        }
        else
        {
            $('#socialwindow').css('display', 'none');
        }
    },
    setPartyMembers: function(members){
      this.partymembers = members;
      this.displayParty();
    },

    setGuildMembers: function(members){
      this.guildmembers = members;
      this.displayGuild();
    },

    displayParty: function () {
      if (this.partymembers.length <= 1)
      {
      	  $('#partynames').html("No party.");
          return;
      }
	  else
	  {
		  $('#partyleave').show();
	  }

      var htmlStr = "<table><tr><th>Name</th></tr>";
      htmlStr += "<tr><td>" + this.partymembers[0] + " (L)</td></tr>";
      for(var i=1; i < this.partymembers.length; ++i){
          htmlStr += "<tr><td>" + this.partymembers[i] + "</td></tr>";
      }
      htmlStr += "</table>";
      $('#partynames').html(htmlStr);
    },

    displayGuild: function () {
      if (this.guildmembers.length <= 0)
      {
      	  $('#guildnames').html("No guild.");
          return;
      }
	  else
	  {
		  $('#guildleave').show();
	  }

      var htmlStr = "<table><tr><th>Name</th></tr>";
      htmlStr += "<tr><td>" + this.guildmembers[0] + " (L)</td></tr>";
      for(var i=1; i < this.guildmembers.length; ++i){
          htmlStr += "<tr><td>" + this.guildmembers[i] + "</td></tr>";
      }
      htmlStr += "</table>";
      $('#guildnames').html(htmlStr);

    },

    isPartyLeader: function (name) {
    	return name === this.partymembers[0];
    },

    isPartyMember: function (name) {
    	return (this.partymembers.indexOf(name) > -1);
    },

    isGuildLeader: function (name) {
    	return name === this.guildmembers[0];
    },

    isGuildMember: function (name) {
    	return (this.guildmembers.indexOf(name) > -1);
    }

  });
  return SocialHandler;
});

define('leaderboardhandler',[], function() {
  var LeaderboardHandler = Class.extend({
    init: function(game) {
	this.game = game;
	this.toggle = false;

	var self = this;
	$('#leaderboardclose').click(function(e){
            self.show();
	});
    },

    show: function() {
        this.toggle = !this.toggle;
    	if (this.toggle)
    	{
            $('#leaderboard').css('display', 'block');
            this.display();
        }
        else
        {
            $('#leaderboard').css('display', 'none');
        }
    },
    display: function () {
    	var self = this;
    	var leaderJSON;
    	var recordsPerPage = 10;

	  var callback = function () {
		var leaders = [];


		switch($('#lbselect').val())
		{
		    case 'xp':
			$.each( leaderJSON, function( key, value ) {
				if (value.xp > 0)
					leaders.push({"key": key, "value": Types.getLevel(value.xp)});
			});
			break;
		    case 'pk':
			$.each( leaderJSON, function( key, value ) {
				if (value.pk > 0)
					leaders.push({"key": key, "value": value.pk});
			});
			break;
		    case 'pkd':
			$.each( leaderJSON, function( key, value ) {
				var pkd = (value.pd>0) ? Number(value.pk / value.pd).toFixed(2):0;
				if (pkd > 0)
					leaders.push({"key": key, "value": pkd});
			});
			break;
		    case 'pd':
			$.each( leaderJSON, function( key, value ) {
				if (value.pd > 0)
					leaders.push({"key": key, "value": value.pd});
			});
			break;
		    case 'tk':
			$.each( leaderJSON, function( key, value ) {
				if (value.tk > 0)
					leaders.push({"key": key, "value": value.tk});
			});
			break;
		    case 'td':
			$.each( leaderJSON, function( key, value ) {
				if (value.td > 0)
					leaders.push({"key": key, "value": value.td});
			});
			break;
		    case 'tkd':
			$.each( leaderJSON, function( key, value ) {

				var tkd = (value.td>0) ? Number(value.tk / value.td).toFixed(2):0;
				if (tkd > 0)
					leaders.push({"key": key, "value": tkd});
			});
			break;
		}
		//log.info(JSON.stringify(leaders));

		leaders.sort(function (a,b) { return b.value-a.value });

		var playerIndex = -1;
		var leadersLength = leaders.length;
		for (var i=0; i < leadersLength; ++i)
		{
			var leader = leaders[i];
			if (self.game.player.name == leader.key)
			{
				playerIndex = i;
				break;
			}
		}

		var recStart;
		var recEnd;

		var pageIndex;
		if (parseInt($('#lbindex').val()) > 0)
			pageIndex = parseInt($('#lbindex').val());
		else if (playerIndex >= 0)
			pageIndex = Math.ceil(playerIndex/recordsPerPage);
		else
			pageIndex = 1;

		//alert(pageIndex);
		if (pageIndex > 0)
		{
			recStart = (pageIndex-1) * recordsPerPage;
			recEnd = Math.min(leaders.length,recStart+recordsPerPage);;
		}
		else
		{
			recStart = 0;
			recEnd = Math.min(leaders.length,recStart+recordsPerPage);
		}

		var lbdata = "<table><tr><th>Rank</th><th>Name</th><th>Score</th></tr>";
		for (var i=recStart; i < recEnd; ++i)
		{
			var leader = leaders[i];
			if (i == playerIndex)
				lbdata += "<tr class=\"lbplayer\"><td>"+(i+1)+"</td><td>"+leader.key+"</td><td>"+leader.value+"</td></tr>";
			else
				lbdata += "<tr><td>"+(i+1)+"</td><td>"+leader.key+"</td><td>"+leader.value+"</td></tr>";
		}
		lbdata += "</table>";
		$('#lbdata').html(lbdata);


		var pagesCount = Math.ceil(leadersLength / recordsPerPage);
		//alert(leadersLength + " " + recordsPerPage + " " + pagesCount);
		var pageData;
		for (var i = 1; i <= pagesCount; ++i)
		{
			if (pageIndex == i)
			    pageData += "<option value=\""+i+"\" selected>"+i+"</option>";
			else
			    pageData += "<option value=\""+i+"\">"+i+"</option>";
		}
		$('#lbindex').empty();
		$('#lbindex').html(pageData);

	  };

    	$('#lbselect').change(function () {
    		$('#lbindex').val('');
    		callback();
    	});

    	$('#lbindex').change(function () {
    		callback();
    	});

// TODO - FIX.
      return;

	fetch('http://103.214.108.218:8080/leader.json')
	  .then(
	    function(response) {
	      if (response.status !== 200) {
		console.log('Looks like there was a problem. Status Code: ' +
		  response.status);
		return;
	      }

	      // Examine the text in the response
	      response.json().then(function(data) {
		console.log(data);
		leaderJSON = data;
		callback();
	      });
	    }
	  )
	  .catch(function(err) {
	    console.log('Fetch Error :-S', err);
	  });
    },

  });

  return LeaderboardHandler;
});

// Customised by Langerz.

var VirtualJoystick	= function(opts)
{
	opts			= opts			|| {};
	this._container		= opts.container	|| document.body;
	this._strokeStyle	= opts.strokeStyle	|| 'cyan';
	this._stickEl		= opts.stickElement	|| this._buildJoystickStick();
	this._baseEl		= opts.baseElement	|| this._buildJoystickBase();
	this._mouseSupport	= opts.mouseSupport !== undefined ? opts.mouseSupport : false;
	this._stationaryBase	= opts.stationaryBase || false;
	this._baseX		= this._stickX = opts.baseX || 0
	this._baseY		= this._stickY = opts.baseY || 0
	this._limitStickTravel	= opts.limitStickTravel || false
	this._stickRadius	= opts.stickRadius !== undefined ? opts.stickRadius : 100
	this._useCssTransform	= opts.useCssTransform !== undefined ? opts.useCssTransform : false
	this._game       = opts.game || null;
	this._deadzone       = opts.deadzone || 20;

	//this._container.style.position	= "relative"

	this._container.appendChild(this._baseEl)
	this._baseEl.style.position	= "absolute"
	this._baseEl.style.display	= "none"
	this._container.appendChild(this._stickEl)
	this._stickEl.style.position	= "absolute"
	this._stickEl.style.display	= "none"

	this._pressed	= false;
	this._touchIdx	= null;

	if(this._stationaryBase === true){
		this._baseEl.style.left		= (this._baseX - this._baseEl.width /2)+"px";
		this._baseEl.style.top          = (this._baseY - this._baseEl.height/2)+"px";
		//this._stickEl.style.left	= (this._baseX - this._stickEl.width /2)+"px";
		//this._stickEl.style.top         = (this._baseY - this._stickEl.height/2)+"px";
	}

	this._transform	= this._useCssTransform ? this._getTransformProperty() : false;
	this._has3d	= this._check3D();

	var __bind	= function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
	this._$onTouchStart	= __bind(this._onTouchStart	, this);
	this._$onTouchEnd	= __bind(this._onTouchEnd	, this);
	this._$onTouchMove	= __bind(this._onTouchMove	, this);
	this._container.addEventListener( 'touchstart'	, this._$onTouchStart	, false );
	this._container.addEventListener( 'touchend'	, this._$onTouchEnd	, false );
	this._container.addEventListener( 'touchmove'	, this._$onTouchMove	, false );
	if( this._mouseSupport ){
		this._$onMouseDown	= __bind(this._onMouseDown	, this);
		this._$onMouseUp	= __bind(this._onMouseUp	, this);
		this._$onMouseMove	= __bind(this._onMouseMove	, this);
		this._container.addEventListener( 'mousedown'	, this._$onMouseDown	, false );
		this._container.addEventListener( 'mouseup'	, this._$onMouseUp	, false );
		this._container.addEventListener( 'mousemove'	, this._$onMouseMove	, false );
	}
}

VirtualJoystick.prototype.destroy	= function()
{
	this._container.removeChild(this._baseEl);
	this._container.removeChild(this._stickEl);

	this._container.removeEventListener( 'touchstart'	, this._$onTouchStart	, false );
	this._container.removeEventListener( 'touchend'		, this._$onTouchEnd	, false );
	this._container.removeEventListener( 'touchmove'	, this._$onTouchMove	, false );
	if( this._mouseSupport ){
		this._container.removeEventListener( 'mouseup'		, this._$onMouseUp	, false );
		this._container.removeEventListener( 'mousedown'	, this._$onMouseDown	, false );
		this._container.removeEventListener( 'mousemove'	, this._$onMouseMove	, false );
	}
}

/**
 * @returns {Boolean} true if touchscreen is currently available, false otherwise
*/
VirtualJoystick.touchScreenAvailable	= function()
{
	return 'createTouch' in document ? true : false;
}

/**
 * microevents.js - https://github.com/jeromeetienne/microevent.js
*/
;(function(destObj){
	destObj.addEventListener	= function(event, fct){
		if(this._events === undefined) 	this._events	= {};
		this._events[event] = this._events[event]	|| [];
		this._events[event].push(fct);
		return fct;
	};
	destObj.removeEventListener	= function(event, fct){
		if(this._events === undefined) 	this._events	= {};
		if( event in this._events === false  )	return;
		this._events[event].splice(this._events[event].indexOf(fct), 1);
	};
	destObj.dispatchEvent		= function(event /* , args... */){
		if(this._events === undefined) 	this._events	= {};
		if( this._events[event] === undefined )	return;
		var tmpArray	= this._events[event].slice();
		for(var i = 0; i < tmpArray.length; i++){
			var result	= tmpArray[i].apply(this, Array.prototype.slice.call(arguments, 1))
			if( result !== undefined )	return result;
		}
		return undefined
	};
})(VirtualJoystick.prototype);

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

VirtualJoystick.prototype.deltaX	= function(){ return this._stickX - this._baseX;	}
VirtualJoystick.prototype.deltaY	= function(){ return this._stickY - this._baseY;	}

VirtualJoystick.prototype.up	= function(){
	if( this._pressed === false )	return false;
	var deltaX	= this.deltaX();
	var deltaY	= this.deltaY();
	if( deltaY >= -this._deadzone )				return false;
	if( Math.abs(deltaX) > Math.abs(deltaY) )	return false;
	return true;
}
VirtualJoystick.prototype.down	= function(){
	if( this._pressed === false )	return false;
	var deltaX	= this.deltaX();
	var deltaY	= this.deltaY();
	if( deltaY <= this._deadzone )				return false;
	if( Math.abs(deltaX) > Math.abs(deltaY) )	return false;
	return true;
}
VirtualJoystick.prototype.right	= function(){
	if( this._pressed === false )	return false;
	var deltaX	= this.deltaX();
	var deltaY	= this.deltaY();
	if( deltaX <= this._deadzone )				return false;
	if( Math.abs(deltaY) > Math.abs(deltaX) )	return false;
	return true;
}
VirtualJoystick.prototype.left	= function(){
	if( this._pressed === false )	return false;
	var deltaX	= this.deltaX();
	var deltaY	= this.deltaY();
	if( deltaX >= -this._deadzone)				return false;
	if( Math.abs(deltaY) > Math.abs(deltaX) )	return false;
	return true;
}

VirtualJoystick.prototype.isActive = function() {
    if (this.right() || this.left() || this.up() || this.down())
        return true;
return false;
}

VirtualJoystick.prototype.isWithinJoystick = function(x, y) {
	var x2 = Math.abs(x-this._baseX);
	var y2 = Math.abs(y-this._baseY);
	if(x2 < this._stickRadius && y2 < this._stickRadius){
		return true;
	}
	return false;
}

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

VirtualJoystick.prototype._onUp	= function()
{
	this._pressed	= false;
	this._stickEl.style.display	= "none";

	if(this._stationaryBase == false){
		this._baseEl.style.display	= "none";

		this._baseX	= this._baseY	= 0;
		this._stickX	= this._stickY	= 0;
	}

	if (Date.now() - this._pressTime <= 300)
	{
		//this._baseEl.style.display	= "none";
		//this._stickEl.style.display	= "none";
		/*if(game && !app.dropDialogPopuped && !app.auctioSellDialogPopuped)
		{
			game.click();
			return;
		}*/
	}
	//this._game.player.moveHeldDown = false;
}

VirtualJoystick.prototype._onDown	= function(x, y)
{
	this._pressTime = Date.now();

	this._pressed	= true;
	if(this._stationaryBase == false){
		this._baseX	= x;
		this._baseY	= y;
		this._baseEl.style.display	= "none";
		this._move(this._baseEl.style, (this._baseX - this._baseEl.width /2), (this._baseY - this._baseEl.height/2));
	}

	this._stickX	= x;
	this._stickY	= y;

	if(this._limitStickTravel === true){
		var deltaX	= this.deltaX();
		var deltaY	= this.deltaY();
		var stickDistance = Math.sqrt( (deltaX * deltaX) + (deltaY * deltaY) );
		if(stickDistance > this._stickRadius){
			var stickNormalizedX = deltaX / stickDistance;
			var stickNormalizedY = deltaY / stickDistance;

			this._stickX = stickNormalizedX * this._stickRadius + this._baseX;
			this._stickY = stickNormalizedY * this._stickRadius + this._baseY;
		}
	}

	this._move(this._stickEl.style, (this._stickX - this._stickEl.width /2), (this._stickY - this._stickEl.height/2));


	this._baseEl.style.display	= "none";
	this._stickEl.style.display	= "none";

	//var self;
	//this._game.player.moveHeldDown = true;
	//setTimeout(function() { self._game.player.firstMove = false; }, 100);
}

VirtualJoystick.prototype._onMove	= function(x, y)
{
	if( this._pressed === true ){
		this._stickX	= x;
		this._stickY	= y;

		if(this._limitStickTravel === true){
			var deltaX	= this.deltaX();
			var deltaY	= this.deltaY();
			var stickDistance = Math.sqrt( (deltaX * deltaX) + (deltaY * deltaY) );
			if(stickDistance > this._stickRadius){
				var stickNormalizedX = deltaX / stickDistance;
				var stickNormalizedY = deltaY / stickDistance;

				this._stickX = stickNormalizedX * this._stickRadius + this._baseX;
				this._stickY = stickNormalizedY * this._stickRadius + this._baseY;
			}
		}

		this._baseEl.style.display	= "block";
		this._stickEl.style.display	= "block";
    this._move(this._stickEl.style, (this._stickX - this._stickEl.width /2), (this._stickY - this._stickEl.height/2));

	}
}


//////////////////////////////////////////////////////////////////////////////////
//		bind touch events (and mouse events for debug)			//
//////////////////////////////////////////////////////////////////////////////////

VirtualJoystick.prototype._onMouseUp	= function(event)
{
	return this._onUp();
}

VirtualJoystick.prototype._onMouseDown	= function(event)
{
	var offsetWidth = $('#canvas').offset().left;
	var x = Math.round(event.pageX / this.getZoom() - offsetWidth);
	var y = Math.round(event.pageY / this.getZoom() - $('#canvas').offset().top);
	log.info("deltaX:" +this.deltaX()+",deltaY:"+this.deltaY());
	if (this._game.usejoystick)
	{
		//alert("deltaX:" +this.deltaX()+",deltaY:"+this.deltaY());
		return this._onDown(x, y);
	}
}

VirtualJoystick.prototype._onMouseMove	= function(event)
{

	var offsetWidth = $('#canvas').offset().left;
	var x = Math.round(event.pageX / this.getZoom() - offsetWidth);
	var y = Math.round(event.pageY / this.getZoom() - $('#canvas').offset().top);
	if (this._game.usejoystick)
		return this._onMove(x, y);

}

//////////////////////////////////////////////////////////////////////////////////
//		comment								//
//////////////////////////////////////////////////////////////////////////////////

VirtualJoystick.prototype._onTouchStart	= function(event)
{
	// if there is already a touch inprogress do nothing
	if( this._touchIdx !== null )	return;

	// notify event for validation
	var isValid	= this.dispatchEvent('touchStartValidation', event);
	if( isValid === false )	return;

	// dispatch touchStart
	this.dispatchEvent('touchStart', event);

	event.preventDefault();
	// get the first who changed
	var touch	= event.changedTouches[0];
	// set the touchIdx of this joystick
	this._touchIdx	= touch.identifier;

	// forward the action
	var offsetWidth = $('#canvas').offset().left;
	var x = Math.round(touch.pageX / this.getZoom() - offsetWidth);
	var y = Math.round(touch.pageY / this.getZoom() - $('#canvas').offset().top);
	if (this._game.usejoystick)
		return this._onDown(x, y);
}

VirtualJoystick.prototype._onTouchEnd	= function(event)
{
	// if there is no touch in progress, do nothing
	if( this._touchIdx === null )	return;

	// dispatch touchEnd
	this.dispatchEvent('touchEnd', event);

	// try to find our touch event
	var touchList	= event.changedTouches;
	for(var i = 0; i < touchList.length && touchList[i].identifier !== this._touchIdx; i++);
	// if touch event isnt found,
	if( i === touchList.length)	return;

	// reset touchIdx - mark it as no-touch-in-progress
	this._touchIdx	= null;

//??????
// no preventDefault to get click event on ios
event.preventDefault();

	return this._onUp()
}

VirtualJoystick.prototype._onTouchMove	= function(event)
{
	// if there is no touch in progress, do nothing
	if( this._touchIdx === null )	return;

	// try to find our touch event
	var touchList	= event.changedTouches;
	for(var i = 0; i < touchList.length && touchList[i].identifier !== this._touchIdx; i++ );
	// if touch event with the proper identifier isnt found, do nothing
	if( i === touchList.length)	return;
	var touch	= touchList[i];

	event.preventDefault();

	var offsetWidth = $('#canvas').offset().left;
	var x = Math.round(touch.pageX / this.getZoom() - offsetWidth);
	var y = Math.round(touch.pageY / this.getZoom() - $('#canvas').offset().top);
	if (this._game.usejoystick)
		return this._onMove(x, y);
}

VirtualJoystick.prototype.getZoom = function () {
	return 1/game.renderer.gameZoom;
}

//////////////////////////////////////////////////////////////////////////////////
//		build default stickEl and baseEl				//
//////////////////////////////////////////////////////////////////////////////////

/**
 * build the canvas for joystick base
 */
VirtualJoystick.prototype._buildJoystickBase	= function()
{
	var canvas	= document.createElement( 'canvas' );
	canvas.style.zIndex=100;
	canvas.width	= 126;
	canvas.height	= 126;

	var ctx		= canvas.getContext('2d');
	ctx.beginPath();
	ctx.strokeStyle = this._strokeStyle;
	ctx.lineWidth	= 3;
	ctx.arc( canvas.width/2, canvas.width/2, 20, 0, Math.PI*2, true);
	ctx.stroke();

	ctx.beginPath();
	ctx.strokeStyle	= this._strokeStyle;
	ctx.lineWidth	= 1;
	ctx.arc( canvas.width/2, canvas.width/2, 30, 0, Math.PI*2, true);
	ctx.stroke();

	return canvas;
}

/**
 * build the canvas for joystick stick
 */
VirtualJoystick.prototype._buildJoystickStick	= function()
{
	var canvas	= document.createElement( 'canvas' );
	canvas.style.zIndex=200;
	canvas.width	= 86;
	canvas.height	= 86;
	var ctx		= canvas.getContext('2d');
	ctx.beginPath();
	ctx.strokeStyle	= this._strokeStyle;
	ctx.lineWidth	= 3;
	ctx.arc( canvas.width/2, canvas.width/2, 20, 0, Math.PI*2, true);
	ctx.stroke();
	return canvas;
}

//////////////////////////////////////////////////////////////////////////////////
//		move using translate3d method with fallback to translate > 'top' and 'left'
//      modified from https://github.com/component/translate and dependents
//////////////////////////////////////////////////////////////////////////////////

VirtualJoystick.prototype._move = function(style, x, y)
{
	if (this._transform) {
		if (this._has3d) {
			style[this._transform] = 'translate3d(' + x + 'px,' + y + 'px, 0)';
		} else {
			style[this._transform] = 'translate(' + x + 'px,' + y + 'px)';
		}
	} else {
		style.left = x + 'px';
		style.top = y + 'px';
	}
}

VirtualJoystick.prototype._getTransformProperty = function()
{
	var styles = [
		'webkitTransform',
		'MozTransform',
		'msTransform',
		'OTransform',
		'transform'
	];

	var el = document.createElement('p');
	var style;

	for (var i = 0; i < styles.length; i++) {
		style = styles[i];
		if (null != el.style[style]) {
			return style;
		}
	}
}

VirtualJoystick.prototype._check3D = function()
{
	var prop = this._getTransformProperty();
	// IE8<= doesn't have `getComputedStyle`
	if (!prop || !window.getComputedStyle) return module.exports = false;

	var map = {
		webkitTransform: '-webkit-transform',
		OTransform: '-o-transform',
		msTransform: '-ms-transform',
		MozTransform: '-moz-transform',
		transform: 'transform'
	};

	// from: https://gist.github.com/lorenzopolidori/3794226
	var el = document.createElement('div');
	el.style[prop] = 'translate3d(1px,1px,1px)';
	document.body.insertBefore(el, null);
	var val = getComputedStyle(el).getPropertyValue(map[prop]);
	document.body.removeChild(el);
	var exports = null != val && val.length && 'none' != val;
	return exports;
}
;
define("lib/virtualjoystick", function(){});

define('settingshandler',['lib/localforage', 'lib/virtualjoystick'], function(localforage) {
  var SettingsHandler = Class.extend({
    init: function(game,app) {
    	this.game = game;
    	this.app = app;
    	this.toggle = false;
    	var self = this;

      var sound = localforage.getSetting

    	$('#settingsclose').click(function(e){
                self.show();
    	});

    	/*$('#buttonsound').click(function(e) {
    		if ($(this).hasClass('active')) {
    			$(this).html("Off");
    			$(this).removeClass('active');
          funcSound(false);
          localforage.setItem('sound', false);
    		}
    		else {
    			$(this).html("On");
    			$(this).addClass('active');
          funcSound(true);
          localforage.setItem('sound', true);
    		}
    	});*/

      this.funcSound = function (bSound)
      {
        if(self.game && self.game.audioManager) {
          self.game.audioManager.toggle(bSound);
        }
      };

      var buttonSound = $('#buttonsound');
      buttonSound.click(function(e) {
        if ($(this).hasClass('active')) {
          $(this).html("Off");
          $(this).removeClass('active');
          self.funcSound(false);
          localforage.setItem('sound', 0);
        }
        else {
          $(this).html("On");
          $(this).addClass('active');
          self.funcSound(true);
          localforage.setItem('sound', 1);
        }
      });


      var funcChat = function (bChat)
      {
        if(self.game) {
    			if(bChat) {
    				app.hideChatLog();
    			} else {
    				app.showChatLog();
    			}
        }
      };

      var buttonChat = $('#buttonchat');
      localforage.getItem('chat', function(e, val) {
        if (!val) {
          buttonChat.html("Off");
    			buttonChat.removeClass('active');
          funcChat(false);
        }
        else {
          buttonChat.html("On");
    			buttonChat.addClass('active');
          funcChat(true);
        }
      });

    	buttonChat.click(function(e) {
    		if ($(this).hasClass('active')) {
    			$(this).html("Off");
    			$(this).removeClass('active');
          funcChat(false);
          localforage.setItem('chat', false);
    		}
    		else {
    			$(this).html("On");
    			$(this).addClass('active');
          funcChat(true);
          localforage.setItem('chat', true);
    		}

      });


      var funcJoystick = function (bJoystick)
      {
        if(self.game) {
          if (bJoystick)
          {
              self.game.usejoystick = true;
              log.info("Loading Joystick");
              self.game.joystick = new VirtualJoystick({
              game            : self.game,
              container		: document.getElementById('canvas'),
              mouseSupport	: true,
              //stationaryBase  : true,
              //baseX : 50 * self.renderer.scale,
              //baseY : $('#container').height() - (60 * self.renderer.scale),

              //limitStickTravel: true,
              //stickRadius: 20 * self.renderer.scale,
              });
          }
          else
          {
            self.game.usejoystick = false;
            self.game.joystick = null;
            VirtualJoystick._touchIdx = null;
          }
        }
      };

      var buttonJoystick = $('#buttonjoystick');
      localforage.getItem('joystick', function(e, val) {
        if (!val) {
          buttonJoystick.html("Off");
    			buttonJoystick.removeClass('active');
          funcJoystick(false);
        }
        else {
          buttonJoystick.html("On");
    			buttonJoystick.addClass('active');
          funcJoystick(true);
        }
      });

    	buttonJoystick.click(function(e) {
    		if ($(this).hasClass('active')) {
    			$(this).html("Off");
    			$(this).removeClass('active');
          funcJoystick(false);
          localforage.setItem('joystick', false);
    		}
    		else {
    			$(this).html("On");
    			$(this).addClass('active');
          funcJoystick(true);
          localforage.setItem('joystick', true);
    		}
      });


      var buttonOptimized = $('#buttonoptimized');
      /*localforage.getItem('optimized', function(e, val) {
        if (!val) {
    			buttonOptimized.html("Off");
    			buttonOptimized.removeClass('active');
    		}
    		else {
    			buttonOptimized.html("On");
    			buttonOptimized.addClass('active');
    		}
        if (self.game) {
    			self.game.optimized = val;
        }
      });*/

    	buttonOptimized.click(function(e) {
    		if ($(this).hasClass('active')) {
    			$(this).html("Off");
    			$(this).removeClass('active');
    		}
    		else {
    			$(this).html("On");
    			$(this).addClass('active');
    		}
        if (self.game) {
    			self.game.optimized = !self.game.optimized;
        }
        localforage.setItem('optimized', self.game.optimized);
      });

      var buttonGPU = $('#buttonGPU');
      if(self.game && self.game.renderer) {
        /*localforage.getItem('gpu', function(e, val) {
          self.game.updateTick = val;
          if(val == 16) {
            buttonGPU.html("High");
            buttonGPU.addClass('active');
            funcGPU(16);
          }
          if(val == 32) {
            buttonGPU.html("Low");
            buttonGPU.removeClass('active');
            funcGPU(32);
          }
        });*/
      }

      var funcGPU = function (tick)
      {
        if(self.game) {
          //self.game.renderTick = 32;
          self.game.updateTick = tick;
          if (typeof(requestAnimFrame) === "undefined")
          {
            clearInterval(self.game.gameTick);
            self.game.gameTick = setInterval(self.game.tick, tick);
          }
        }
      };

      buttonGPU.click(function(e) {
        if ($(this).hasClass('active')) {
          localforage.setItem('gpu', 32);
    			$(this).html("Low");
    			$(this).removeClass('active');
          funcGPU(32);
    		}
    		else {
          localforage.setItem('gpu', 16);
    			$(this).html("High");
    			$(this).addClass('active');
          funcGPU(16);
    		}
      });

      var buttonMColor = $('#buttonmenucolor');
      localforage.getItem('menucolor', function(e, val) {
        if (!val)
          return;
        //$('div.frame-heading').css('background-color', val);
        //$('div.frame-content').css('background-color', val);
        //$('div.frame-panel').css('background-color', val);
        buttonMColor.val(val);
      });

      var buttonBColor = $('#buttonbuttoncolor');
      localforage.getItem('buttoncolor', function(e, val) {
        if (!val)
          return;
        $('div.frame-new-button').css('background-color', val);
        buttonBColor.val(val);
      });

    	buttonMColor.change(function(e) {
        localforage.setItem('menucolor', this.value);
        //$('div.frame-heading').css('background-color', this.value);
        //$('div.frame-content').css('background-color', this.value);
        //$('div.frame-panel').css('background-color', this.value);
      });
      $('#buttonbuttoncolor').change(function(e) {
        localforage.setItem('buttoncolor', this.value);
        $('div.frame-new-button').css('background-color', this.value);
      });

      // Hacky value settings but should work!
      this.changeZoom = function (defval, forceval) {
        if (!self.game)
          return;
        forceval = forceval || 0;
        if (forceval > 0)
          val = forceval;
        else
          val = self.zoomLevel || defval;
        self.game.ready = false;
        self.game.camera.rescale(val);
        self.game.renderer.rescaling = true;
        self.game.renderer.calcZoom();
        self.game.renderer.rescale();
        self.game.renderer.resizeCanvases();
        self.game.camera.setRealCoords();
        self.game.moveEntityThreshold = ~~(self.game.camera.gridW / 2) + 1;
        self.game.ready = true;
        self.game.renderer.forceRedraw = true;
        self.game.renderer.rescaling = false;
        $("#gamezoom option:selected").removeAttr("selected");
        $('#gamezoom option[value="'+val+'"]').attr("selected", true);
      }

      var selectZoom = $('.cgamezoom');
      if(self.game) {
        localforage.getItem('gamezoom', function(e, val) {
            self.zoomLevel = val;
        });
      }

    	selectZoom.change(function() {
    		var val = parseInt($('#gamezoom').val());
        localforage.setItem('gamezoom', val);
        //$("#gamezoom option:selected").prop("selected", false);
        //self.changeZoom(0, val);
    	});
    },

    apply: function () {
        var self = this;

        var buttonSound = $('#buttonsound');
        localforage.getItem('sound', function(e, val) {
          if (val == 0) {
            buttonSound.html("Off");
            buttonSound.removeClass('active');
            self.funcSound(false);
          }
          else {
            buttonSound.html("On");
            buttonSound.addClass('active');
            self.funcSound(true);
          }
        });


    },

    show: function() {
    	var self = this;
        this.toggle = !this.toggle;
    	if (this.toggle)
    	{
            $('#settings').css('display', 'block');
        }
        else
        {
            $('#settings').css('display', 'none');
        }
    }

  });
  return SettingsHandler;
});

define('storehandler',['config'], function(config) {
  var StoreHandler = Class.extend({
    init: function(game,app) {
    	this.game = game;
    	this.app = app;
    	this.toggle = false;
    	var self = this;
    	$('#shopCloseButton').click(function(e){
          $('#shopDialog').hide();
          this.toggle = false;
    	});
      $('#shopDialog').hide();
    },

    show: function() {
      $('#shopDialog').show();
      $('#shopUsername').val(game.player.user.username);

    }

  });
  return StoreHandler;
});

define('bools',[],function() {
    var Bools = Class.extend({
        init: function(game) {
            this.game = game;
            this.showExperimentalCanvas = true;
            this.debug = false;
        } 
    });
});
define('inventorystore',['entity/item', 'data/items'], function(Item, Items) {
    function fixed(value, length) {
        var buffer = '00000000' + value;
        return buffer.substring(buffer.length - length);
    }

    var InventoryStore = Class.extend({
        init: function(parent, index) {
            this.parent = parent;
            this.index = index;
            this.itemKind = null;
            this.itemName = null;
            this.itemNumber = 0;
            this.skillKind = 0;
            this.skillLevel = 0;
            this.experience = 0;
            var name = '#dialogInventory' + fixed(this.index, 2);
            this.background = $(name + 'Background');
            this.body = $(name + 'Body');
            this.number = $(name + 'Number');

            this.rescale();
            var self = this;

        },

        rescale: function() {
            this.scale = this.parent.parent.scale;
            if (this.scale == 1)
            {
		    this.background.css({
    			'position': 'absolute',
    			'left': '' + (15 + Math.floor(this.index % 6) * 17) + 'px',
    			'top': '' + (27 + Math.floor(this.index / 6) * 23) + 'px',
    			'width': '16px',
    			'height': '16px',
    			'background-image': 'url("img/1/storedialogsheet.png")',
    			'background-position': '-300px -180px'
		    });
		    this.body.css({
    			'position': 'absolute',
    			'width': '16px',
    			'height': '15px',
    			'bottom': '1px',
    			'line-height': '16px',
    			'text-shadow': '-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black',
    			'color': 'rgba(255,255,0,1.0)',
    			'font-size': '6px',
    			'text-align': 'center',
		    });
		    this.number.css({
		    	'margin-top': '15px',
    			'color': '#fff',
    			'font-size': '6px',
    			'text-align': 'center',
    			'text-shadow': '-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black',
		    });
            }
            else if (this.scale == 2)
            {
		    this.background.css({
			'position': 'absolute',
			'left': '' + (30 + Math.floor(this.index % 6) * 33) + 'px',
			'top': '' + (54 + Math.floor(this.index / 6) * 45) + 'px',
			'width': '32px',
			'height': '32px',
			'background-image': 'url("img/2/storedialogsheet.png")',
			'background-position': '-600px -360px'
		    });
		    this.body.css({
			'position': 'absolute',
			'width': '32px',
			'height': '30px',
			'bottom': '2px',
			'line-height': '32px',
			'text-shadow': '-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black',
			'color': 'rgba(255,255,0,1.0)',
			'font-size': '12px',
			'text-align': 'center',

		    });
		    this.number.css({
		    	'margin-top': '30px',
			'color': '#fff',
			'font-size': '12px',
			'text-align': 'center',
			'text-shadow': '-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black',
		    });
            }
            else if (this.scale == 3)
            {
		    this.background.css({
			'position': 'absolute',
			'left': '' + (45 + Math.floor(this.index % 6) * 50) + 'px',
			'top': '' + (81 + Math.floor(this.index / 6) * 68) + 'px',
			'width': '48px',
			'height': '48px',
			'background-image': 'url("img/3/storedialogsheet.png")',
			'background-position': '-900px -540px'
		    });
		    this.body.css({
			'position': 'absolute',
			'width': '48px',
			'height': '45px',
			'bottom': '3px',
			'line-height': '48px',
			'text-shadow': '-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black',
			'color': 'rgba(255,255,0,1.0)',
			'font-size': '18px',
			'text-align': 'center',

		    });
		    this.number.css({
		    	'margin-top': '45px',
			'color': '#fff',
			'font-size': '18px',
			'text-align': 'center',
			'text-shadow': '-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black',
		    });
            }
            if (this.itemKind) {
                this.restore();
            }
        },

        getIndex: function() {
            return this.index;
        },
        getItemKind: function() {
            return this.itemKind;
        },
        setItemKind: function(value) {
            if (value==null)
            {
            	    this.itemKind = null;
            	    this.itemName = '';
            }
            else
            {
            	    this.itemKind = value;
            	    this.itemName = ItemTypes.KindData[value].name;
            }
        },
        getItemName: function() {
            return this.itemName;
        },

        getComment: function() {
            return Item.getInfoMsgEx(this.itemKind, this.enchantLevel, this.skillKind, this.skillLevel, this.itemDurability, this.itemDurabilityMax);
        },

        assign: function(itemKind, itemNumber, skillKind, skillLevel, durability, durabilityMax, experience) {
            this.setItemKind(itemKind);
            this.itemNumber = itemNumber;
            this.skillKind = skillKind;
            this.skillLevel = skillLevel;
            this.itemName = ItemTypes.KindData[itemKind].name;
            this.spriteName = ItemTypes.KindData[itemKind].sprite;
            this.itemDurability = durability;
            this.itemDurabilityMax = durabilityMax;
            this.itemDurabilityPercent = durability/durabilityMax*100;
            this.experience = experience;
            this.restore();
        },
        clear: function() {
            this.setItemKind(null);
            this.itemNumber = 0;
            this.skillKind = 0;
            this.skillLevel = 0;
            this.release();
        },
        release: function() {
            this.body.css('background-image', '');
            this.body.html("");
            this.body.attr('title', '');
            this.number.html("");
        },
        restore: function() {
            Items.jqShowItem(this.body, this, this.number);

          	if (ItemTypes.isObject(this.itemKind) || ItemTypes.isCraftItem(this.itemKind)) {
          		//this.number.html(this.itemNumber);
            }
          	else
          	{
          		//this.number.html(ItemTypes.getLevelByKind(this.itemKind) +"+"+this.itemNumber);
          		this.body.html(this.itemDurabilityPercent.toFixed() + "%");
          	}

            //this.body.attr('title', this.getComment());
        }
    });
    return InventoryStore;
});

define('dialog/storedialog',['./dialog', '../tabbook', '../tabpage', '../entity/item', '../inventorystore', '../pageNavigator', 'data/items'],
  function(Dialog, TabBook, TabPage, Item, InventoryStore, PageNavigator, Items) {

    var SCALE = 3;
    function setScale(scale) {
    	    SCALE = scale;
    }

    var StoreRack = Class.extend({
        init: function(parent, id, index) {
            this.parent = parent;
            this.id = id;
            this.index = index;
            this.body = $(id);
            this.basketBackground = $(id + 'BasketBackground');
            this.basket = $(id + 'Basket');
            this.extra = $(id + 'Extra');
            this.price = $(id + 'Price');
            this.buyButton = $(id + 'BuyButton');
            this.item = null;

            this.rescale();

            this.buyButton.text('Buy');

            var self = this;
        },

        rescale: function() {
            var scale = this.parent.scale;
            var id = this.id;
            this.body = $(id);
          	if (scale == 1)
          	{
              this.body.css({
      	        'position': 'absolute',
      	        'left': '0px',
      	        'top': '' + (this.index * 20) + 'px'
      		    });
            }
            else if (scale == 2) {
              this.body.css({
                'position': 'absolute',
                'left': '0px',
                'top': '' + (this.index * 40) + 'px'
              });
            }
            else if (scale == 3) {
              this.body.css({
                'position': 'absolute',
                'left': '0px',
                'top': '' + (this.index * 60) + 'px'
              });
            }
            if (this.item) {
            	     this.assign(this.item);
            }
        },

        getVisible: function() {
            return this.body.css('display') === 'block';
        },
        setVisible: function(value) {
            var self = this;

            this.body.css('display', value ? 'block' : 'none');
            this.buyButton.text('Buy');
            if (value)
            {
              this.buyButton.off().on('click', function(event) {
                  if (self.item.buyPrice > game.player.gold[0]) {
                      game.showNotification(["SHOP", "SHOP_NOGOLD"]);
                      return;
                  }
                  if(game && game.ready) {
                      game.client.sendStoreBuy(self.parent.itemType, parseInt(self.item.kind), 1);
                  }
                  event.stopPropagation();
              });
            }
        },

        assign: function(item) {
            this.item = item;
            Items.jqShowItem(this.basket, this.item, this.basket);

            var itemRoom = new ItemRoom(0, item.kind, 1, 900,900, 0);
            var itemDesc = Item.getInfoMsgEx(itemRoom);
            var itemName = ItemTypes.getName(item.kind);
            this.basket.attr('title', itemDesc);
            if (ItemTypes.isConsumableItem(item.kind)) {
              this.basket.text('');
              this.extra.text((item.buyCount > 0 ? 'x' + item.buyCount : '')+" "+itemDesc);
            } else {
              //this.basket.text(ItemTypes.getLevelByKind(item.kind) +"+1");
              this.extra.text(itemName);
            }

            this.price.text(getGoldShortHand(item.buyPrice));
        }
    });

    var StorePage = TabPage.extend({
        init: function(parent, id, itemType, items, scale, buttonIndex) {
            this._super(parent, id + 'Page', id + buttonIndex + 'Button');
            this.itemType = itemType;
            this.racks = [];
            this.items = items;
            this.scale = scale;
            this.pageIndex = 0;

            this.parent = parent;
            this.rackRows = 5;

            for(var index = 0; index < this.rackRows; index++) {
                this.racks.push(new StoreRack(this, id + index, index));
            }
        },

        rescale: function (scale) {
            this.scale = scale;
            for(var index = 0; index < this.rackRows; index++) {
                this.racks[index].rescale();
            }
        },

        getPageCount: function() {
            if (!this.items) return 0;
            log.info("this.items.length="+this.items.length);
            return Math.ceil(this.items.length / this.rackRows);
        },

        getPageIndex: function() {
            return this.pageIndex;
        },

        setPageIndex: function(value) {
            this.pageIndex = value;
            this.open(this.parent.minLevel,this.parent.maxLevel);
            this.reload();
        },

        open: function(min,max) {
            this.items = ItemTypes.Store.getItems(this.itemType, min, max);
            log.info(JSON.stringify(this.items));

            var cond = function (item) { return ItemTypes.isConsumableItem(item.kind); };
        		if (this.itemType==2)
                cond = function (item) { return ItemTypes.isArmor(item.kind); }
        		if (this.itemType==3)
                cond = function (item) { return ItemTypes.isWeapon(item.kind); }

            var i=this.items.length;
            while (--i >= 0)
            {
          	    var item = this.items[i];
          	    if (!cond(item))
          	    	this.items.splice(this.items.indexOf(item),1);
            }
            //this.setPageIndex(0);
        },

        reload: function() {
            this.clear();

            for(var index = this.pageIndex * this.rackRows; index < Math.min((this.pageIndex + 1) * this.rackRows, this.items.length); index++) {
                var rack = this.racks[index - (this.pageIndex * this.rackRows)];

                rack.assign(this.items[index]);
                rack.setVisible(true);
            }
        },

        clear: function () {
          for(var index = 0; index < this.rackRows; index++) {
              var rack = this.racks[index];
              rack.setVisible(false);
          }
        },

        close: function () {
          this.clear();
          this.setVisible(false);
        }

    });

    var StorePotionPage = StorePage.extend({
        init: function(parent, scale) {
            this._super(parent, '#storeDialogStore', 1,
            	    null, scale, 0);
        }
    });

    var StoreArmorPage = StorePage.extend({
        init: function(parent, scale) {
            this._super(parent, '#storeDialogStore', 2,
            	    null, scale, 1);
        }
    });

    var StoreWeaponPage = StorePage.extend({
        init: function(parent, scale) {
            this._super(parent, '#storeDialogStore', 3,
            	    null, scale, 2);
        }
    });

    var StoreFrame = TabBook.extend({
        init: function(parent) {
            this._super('#storeDialogStore');

            this.parent = parent;
            this.scale = this.parent.scale;
            this.pagePotion = new StorePotionPage(this, this.scale);
            this.pageArmor = new StoreArmorPage(this, this.scale);
            this.pageWeapon = new StoreWeaponPage(this, this.scale);

            this.add(this.pagePotion);
            this.add(this.pageArmor);
            this.add(this.pageWeapon);

            this.pageNavigator = new PageNavigator(parent.scale);
            this.pageNavigator.onChange(function(sender) {
                var activePage = self.getActivePage();
                if(activePage && game.storeDialog.visible) {
                    log.info("self.parent.game.storeDialog.visible");
                    activePage.setPageIndex(sender.getIndex() - 1);
                    //activePage.reload();
                }

            });

            var self = this;

            this.minLevel = 1;
            this.maxLevel = 100;
        },

        rescale: function() {
        	this.scale = this.parent.scale;
        	this.pagePotion.rescale(this.scale);
        	this.pageArmor.rescale(this.scale);
        	this.pageWeapon.rescale(this.scale);

        	this.pageNavigator.rescale(this.scale);
        },

        setPageIndex: function(value) {
            if (!game.storeDialog.visible)
            {
            	    return;
            }
            this.pages[value].open(this.minLevel, this.maxLevel);

            this._super(value);

            var activePage = this.getActivePage();

            if(activePage) {
                if(activePage.getPageCount() > 1) {
                    //log.info("activePage.getPageCount()="+activePage.getPageCount());
                    this.pageNavigator.setCount(activePage.getPageCount());
                    this.pageNavigator.setIndex(activePage.getPageIndex() + 1);
                    this.pageNavigator.open();
                    this.pageNavigator.setVisible(true);
                }
                else {
                  this.pageNavigator.setVisible(false);
                }
                activePage.reload();
            }
        },

        open: function(min,max) {
            var self = this;

            this.minLevel = min;
            this.maxLevel = max;

            //for(var index = 0; index < this.pages.length; index++) {
            //    this.pages[index].open(min,max);
            //}

            this.setPageIndex(0);
            this.pagePotion.setPageIndex(0);
            //this.pagePotion.open(min,max);


            //this.pageNavigator.open();
        }
    });

    var StoreDialog = Dialog.extend({
        init: function(game) {
            this._super(game, '#storeDialog');
            this.setScale();

            this.storeFrame = new StoreFrame(this);

            this.sellButton = $('#storeDialogStore3Button');
            this.sellButton.show();

            //this.modal = $('#dialogModal');

            this.scale=this.setScale();

            var self = this;

            //$('#storeDialogStorePage').css('display','none');
        },

        setScale: function() {
          this.scale = game.renderer.getUiScaleFactor();
        },

        rescale: function() {
        	this.setScale();
		      this.storeFrame.rescale();
        },

        show: function(min, max) {
            var self = this;

            $('#storeDialog .frameheading div').text('SHOPS');

            $("#storeDialogStore0Button").text('CONSUME');
            //$("#storeDialogStore0Button").removeClass('active');
            $("#storeDialogStore0Button").show();
            $("#storeDialogStore2Button").show();

            this.sellButton.text('SELL');
            this.sellButton.show();

            this.sellButton.off().on('click', function (event) {
              game.inventoryMode = InventoryMode.MODE_SELL;
              game.inventoryHandler.showInventory(true);
            });

            this.rescale();
            this.storeFrame.open(min, max);

            this.addClose();

            this._super();
            $("#storeDialogStore0Button").trigger('click');
        },

        hide: function() {
            var activePage = this.storeFrame.getActivePage();
            if (activePage)
            {
                activePage.close();
            }
            this._super();
        },
    });

    return StoreDialog;
});

define('dialog/auctiondialog',['./dialog', '../tabbook', '../tabpage', '../entity/item', 'data/items', '../inventorystore', '../pageNavigator'], function(Dialog, TabBook, TabPage, Item, Items, InventoryStore, PageNavigator) {
    function fixed(value, length) {
        var buffer = '00000000' + value;
        return buffer.substring(buffer.length - length);
    }

    var SCALE = 2;
    function setScale(scale) {
    	    SCALE = scale;
    }

    var StoreRack = Class.extend({
        init: function(parent, id, index) {
            this.parent = parent;
            this.id = id;
            this.index = index;
            this.body = $(id);
            this.basketBackground = $(id + 'BasketBackground');
            this.basket = $(id + 'Basket');
            this.extra = $(id + 'Extra');
            this.price = $(id + 'Price');
            this.buyButton = $(id + 'BuyButton');
            this.item = null;

            this.rescale();

            this.buyButton.text('BUY');

        },

        rescale: function() {
            var scale = this.parent.scale;
            var id = this.id;
            this.body = $(id);
            this.basketBackground = $(id + 'BasketBackground');
            this.basket = $(id + 'Basket');
            this.extra = $(id + 'Extra');
            this.price = $(id + 'Price');
            this.buyButton = $(id + 'BuyButton');
        	if (scale == 1)
        	{
            this.body.css({
        			'position': 'absolute',
        			'left': '0px',
        			'top': '' + (this.index * 18) + 'px',
    		    });
  	     }
  	     else if (scale == 2) {
           this.body.css({
       			'position': 'absolute',
       			'left': '0px',
       			'top': '' + (this.index * 40) + 'px',
   		    });
  	     }
  	     else if (scale == 3) {
  		    this.body.css({
      			'position': 'absolute',
      			'left': '0px',
      			'top': '' + (this.index * 60) + 'px',
  		    });
  	     }
  	     if (this.item) {
  	     	     this.assign(this.item);
  	     }
        },

        getVisible: function() {
            return this.body.css('display') === 'block';
        },
        setVisible: function(value) {
            var self = this;
            this.body.css('display', value===true ? 'block' : 'none');
            if (this.parent.parent.pageIndex == 0)
            	this.buyButton.text('DELETE');
            else
            	this.buyButton.text('BUY');
            this.buyButton.off().on('click', function(event) {
                if (self.item)
                {
            			if(game && game.ready && game.auctionDialog.visible) {
            			    //alert("auction buy");
            			    if (self.parent.parent.pageIndex == 0) {
            				      game.client.sendAuctionDelete(self.item.index, self.parent.itemType);
                      }
            			    else {
                          if (self.item.buyPrice > game.player.gold[0]) {
                              game.showNotification(["SHOP", "SHOP_NOGOLD"]);
                              return;
                          }
            				      game.client.sendAuctionBuy(self.item.index, self.parent.itemType);
                      }
            			}
            		}
            });
        },

        assign: function(item) {
            this.item = item;
            log.info(JSON.stringify(item));

            Items.jqShowItem(this.basket, item.item, this.basket);
            //this.basket.css('background-image', 'url("img/'+this.parent.scale+'/item-' + item.name + '.png")')
            var itemData = ItemTypes.KindData[item.kind];
	          //this.basket.css({'background-image': "url('img/" + this.parent.scale + "/" + itemData.sprite + "')",
		          // 'background-position': '-'+(itemData.offset[0]*this.parent.scale*16)+'px -'+(itemData.offset[1]*this.parent.scale*16)+'px'});

            var itemDesc = Item.getInfoMsgEx(item.item);
            //this.basket.attr('title', itemDesc);
            this.extra.text(itemDesc);
            this.price.text(item.buyPrice + 'g');
        },

        clear: function() {
            this.basket.css('background-image', 'none')
            this.basket.attr('title', '');
            this.extra.text('');
            this.price.text('');

        }
    });

    var AuctionStorePage = TabPage.extend({
      init: function(parent, id, itemType, items, scale, buttonIndex) {
          this._super(parent, id + 'Page', id + buttonIndex + 'Button');
            this.itemType = itemType;
            this.racks = [];
            this.items = items;
            this.scale = scale;
            this.rackSize = 5;

            for(var index = 0; index < this.rackSize; index++) {
                this.racks.push(new StoreRack(this, id + index, index));
            }
        },

        rescale: function (scale) {
            this.scale = scale;
            for(var index = 0; index < this.rackSize; index++) {
                this.racks[index].rescale();
            }
        },

        getPageCount: function() {
            if (this.items)
            	    return Math.ceil(this.items.length / this.rackSize);
            return 0;
        },

        getPageIndex: function() {
            return this.pageIndex;
        },

        setPageIndex: function(value) {
            log.info("setPageIndex: "+ value);
            this.pageIndex = value;
            //if (this.pageIndex > 0)
            this.reload();
        },

        sendOpen: function() {
             game.client.sendAuctionOpen(this.itemType);
        },

        reload: function() {
            for (var rack of this.racks)
              rack.clear();

            this.close();

            if (!this.items || this.items.length == 0)
        	     return;

            log.info("reload - this.pageIndex: "+ this.pageIndex);
            for(var index = this.pageIndex * this.rackSize; index < Math.min((this.pageIndex + 1) * this.rackSize, this.items.length); index++) {
                var rack = this.racks[index - (this.pageIndex * this.rackSize)];

                rack.assign(this.items[index]);
                rack.setVisible(true);
            }
            this.parent.updatePageNav();
        },

        close: function() {
            for(var index = 0; index < this.rackSize; index++) {
            	this.racks[index].setVisible(false);
            }
            //this.clear();
            //this.setVisible(false);
        },

        setItems: function(itemData) {
            this.items = [];
            if (!itemData)
              this.close();

            if (itemData) {
      		    for(var k in itemData) {
      			    var item = itemData[k];
                var kind = item.item.itemKind;
      			    this.items.push({
          				index: item.index,
          				name: ItemTypes.KindData[kind].name,
          				kind: kind,
                  itemKind: kind,
          				player: item.player,
          				buyPrice: item.buy,
          				item: item.item,
          				rank: ItemTypes.KindData[kind].modifier
      			    });
      		    }
            }
	    if (this.items.length > 0)
	    {
		          this.items.sort(function(a, b) {
	               return a.rank - b.rank || a.kind - b.kind || a.itemCount - b.itemCount || a.buyPrice - b.buyPrice;
		          });

          		if (this.itemType > 0)
          		{
          		// Find the Cheapest Item for that kind only.
        		    for (var i = this.items.length - 1; i > 0; --i)
        		    {
            			var item = this.items[i];
            			var prevItem = this.items[i-1];

            			if (item.kind == prevItem.kind &&
            			    item.itemCount == prevItem.itemCount &&
            			    item.itemSkillKind == prevItem.itemSkillKind &&
            			    item.itemSkillLevel == prevItem.itemSkillLevel)
            			{
            				this.items.splice(i,1);
            			}
        		    }
        		 }
	    }
      //this.pageIndex = 0;
	       //this.reload();
        }
    });

    var MyAuctionPage = AuctionStorePage.extend({
        init: function(parent, scale) {
            this._super(parent, '#storeDialogStore', 0, [], scale, 0);
        },

    });
    var AuctionArmorPage = AuctionStorePage.extend({
        init: function(parent, scale) {
            this._super(parent, '#storeDialogStore', 1, [], scale, 1);
        },

    });

    var AuctionWeaponPage = AuctionStorePage.extend({
        init: function(parent, scale) {
            this._super(parent, '#storeDialogStore', 2, [], scale, 2);
        },
    });

    var StoreFrame = TabBook.extend({
        init: function(parent) {
            this._super('#storeDialogStore');

            this.parent = parent;
            this.scale = this.parent.scale;
            this.pageMyAuctions = new MyAuctionPage(parent, this.scale);
            this.pageArmor = new AuctionArmorPage(parent, this.scale);
            this.pageWeapon = new AuctionWeaponPage(parent, this.scale);

            this.add(this.pageMyAuctions);
            this.add(this.pageArmor);
            this.add(this.pageWeapon);

            this.pageNavigator = new PageNavigator(parent.scale);

            var self = this;

            this.pageNavigator.onChange(function(sender) {
                var activePage = self.getActivePage();
                if(activePage && game.auctionDialog.visible) {
                    log.info("activePage.setPageIndex("+(sender.getIndex()-1)+");");
                    activePage.setPageIndex(sender.getIndex()-1);
                }
            });
        },

        rescale: function() {
        	this.scale = this.parent.scale;
        	this.pageArmor.rescale(this.scale);
        	this.pageWeapon.rescale(this.scale);
        	this.pageMyAuctions.rescale(this.scale);

        	this.pageNavigator.rescale(this.scale);
        },

        setPageIndex: function(page) {
            page = page || 0;

            if (!game.auctionDialog.visible)
            	    return;

            this.pages[page].sendOpen();
            /*var activePage = this.getActivePage();
            if (activePage)
              activePage.setPageIndex(0);*/

            this._super(page);


        },

        updatePageNav: function(len) {
          var activePage = this.getActivePage();
          if(activePage) {
              if(activePage.getPageCount() > 1) {
                  this.pageNavigator.setCount(activePage.getPageCount());
                  this.pageNavigator.setIndex(activePage.getPageIndex()+1);
                  this.pageNavigator.setVisible(true);
              } else {
                  this.pageNavigator.setVisible(false);
              }
          }
        },

        open: function(val) {
            this.setPageIndex(val);
            //this.pages[val].open();
            this.pageNavigator.setVisible(false);
        }
    });

    var AuctionDialog = Dialog.extend({
        init: function(game) {
            this._super(game, '#storeDialog');
            this.setScale();

            this.storeFrame = new StoreFrame(this);

            //this.closeButton = $('#storeDialogCloseButton');
            this.modal = $('#storeDialogModal');
            this.scale=this.setScale();

            //var self = this;

            /*this.closeButton.click(function(event) {
                var activePage = self.storeFrame.getActivePage();
                if (activePage)
                    activePage.setVisible(false);
            	self.hide();
            });*/
            this.addClose();
        },

        setScale: function() {
		      this.scale = game.renderer.getUiScaleFactor();
	      },

        rescale: function() {
        	this.setScale();
		      this.storeFrame.rescale();
        },

        show: function() {
            var self = this;

            this.rescale();

            $('#storeDialog .frameheading div').text('AUCTION');

            $("#storeDialogStore0Button").text('LIST');
            $("#storeDialogStore0Button").show();
            $("#storeDialogStore2Button").show();

            $("#storeDialogStore3Button").text('SELL');
            $("#storeDialogStore3Button").show();
            $("#storeDialogStore3Button").off().on('click', function (event) {
              game.inventoryMode = InventoryMode.MODE_AUCTION;
              game.inventoryHandler.toggleInventory();
            });

            /*for(var index = 0; index < this.storeFrame.pages.length; index++) {
                var page = this.storeFrame.pages[index];
            	  page.open();
            }*/
            this.storeFrame.open(0);

            //$('#storeDialogSellButton').css("display","none");
            //$('#auctionDialogSellButton').css("display","block");

            this._super();
            $("#storeDialogStore0Button").trigger('click');
        },

        hide: function() {
            var activePage = this.storeFrame.getActivePage();
            if (activePage)
            {
                activePage.close();
                activePage.setVisible(false);
            }
            //$('#auctionDialogSellButton').hide();
            this._super();
        },
    });

    return AuctionDialog;
});

define('dialog/bankdialog',['./dialog', '../tabbook', '../tabpage', '../entity/item', 'data/items', 'data/itemlootdata', '../inventorystore'], function(Dialog, TabBook, TabPage, Item, Items, ItemLoot, InventoryStore) {
    function fixed(value, length) {
        var buffer = '00000000' + value;
        return buffer.substring(buffer.length - length);
    }

    var BankSlot = Class.extend({
        init: function(parent, index) {
            this.parent = parent;
            this.index = index;
            this.item = null;
            var name = '#bankDialogBank' + fixed(this.index, 2);
            this.background = $(name + 'Background');
            this.body = $(name + 'Body');

            this.rescale();
            var self = this;

            this.background.data('itemSlot',this.index);


            this.body.data('itemSlot',this.index);

            this.body.attr('draggable', true);
            this.body.draggable = true;

            var moveItem = function (slot) {
              var realslot = slot + (self.parent.page * self.parent.pageItems);

              if (DragBank === null) {
                DragBank = {};
                DragBank.type = 0;
                DragBank.slot = realslot;
                //self.parent.selectBankItem(self.background);
              } else {
                game.client.sendItemSlot([2, 1, DragBank.slot, 1, 1, realslot]);
                DragBank = null;
                self.parent.deselectItem();
              }
            };

            this.background.off().on('click tap', function(event) {
                var slot = $(this).data("itemSlot");

                if (self.parent.getItem(slot) == null) {
                  if (game.gamepad.isActive())
                      moveItem(slot);
                  self.parent.deselectItem();
                  return;
                }

                var isSame = (self.parent.selectedItem % 24) == slot;
                self.parent.selectBankItem(this);
                if (!game.renderer.isDesktop || isSame || game.gamepad.isActive()) {
                  moveItem(slot);
                  return;
                }

            });

            this.body.on('dragstart touchstart', function(event) {
              if (self.parent.selectedItem == -1)
                self.parent.selectBankItem(this);
              if (!DragBank)
                moveItem($(this).data("itemSlot"));
            });

            this.body.on('dragover touchover', function(event) {
              event.preventDefault();
            });

            this.background.on('drop touchend', function(event) {
              moveItem($(this).data("itemSlot"));
            });
        },

        rescale: function() {
            this.scale = game.renderer.guiScale;
            if (this.scale == 1)
            {
              this.background.css({
      			'position': 'absolute',
      			'left': '' + (0 + Math.floor(this.index % 6) * 18) + 'px',
      			'top': '' + (0 + Math.floor(this.index / 6) * 18) + 'px'
      		    });
            }
            else if (this.scale == 2)
            {
              this.background.css({
      			'position': 'absolute',
      			'left': '' + (0 + Math.floor(this.index % 6) * 50) + 'px',
      			'top': '' + (0 + Math.floor(this.index / 6) * 50) + 'px'
      		    });
            }
            else if (this.scale == 3)
            {
      		    this.background.css({
      			'position': 'absolute',
      			'left': '' + (0 + Math.floor(this.index % 6) * 60) + 'px',
      			'top': '' + (0 + Math.floor(this.index / 6) * 60) + 'px'
      		    });
            }
            if (this.item) {
                this.restore();
            }
        },

        getIndex: function() {
            return this.index;
        },
        getItemKind: function() {
            return this.item.itemKind;
        },
        setItemName: function() {
            var kind = this.item.itemKind;
            if ( ItemTypes.isLootItem(kind))
              this.itemName = ItemLoot[kind-1000].name;
            else
      	      this.itemName = ItemTypes.KindData[kind].name;
        },
        getItemName: function() {
            return this.itemName;
        },
        getComment: function() {
            return Item.getInfoMsgEx(this.item);
        },

        assign: function(item) {
            this.item = item;
            var kind = item.itemKind;
            this.setItemName(kind);
            this.itemDurabilityPercent = item.itemDurability/item.itemDurabilityMax*100;
            this.body.data('itemNumber',this.item.itemNumber);
            this.background.data('itemNumber',this.item.itemNumber);

            this.restore();
        },
        clear: function() {
            this.item = null;
            this.release();
        },
        release: function() {
            this.body.css('background-image', '');
            this.body.html("");
            this.body.attr('title', '');
        },
        restore: function() {
            var kind = itemKind = this.item.itemKind;
            var scale = game.renderer.getIconScaleFactor();

            Items.jqShowItem(this.body, this.item, this.body);
        }
    });

    var BankFrame = Class.extend({
        init: function(parent) {
            this.parent = parent;
            this.bankslots = [];
            this.page = 0;

            //this.pageIndex = 0;
            this.pageItems = 24;

            var self = this;
            this.selectBankItem = function(jq) {
              if (!(game && game.ready))
                return;

              var slot = $(jq).data("itemSlot");
              var itemNumber = $(jq).data("itemNumber");
              log.info("selectInventory - click, slot:"+slot);

              var realslot = slot + (self.page * self.pageItems);
              var item = game.bankHandler.banks[realslot];
              //var item = this.getItem(slot);

              //log.info("slot=" + slot);
              //log.info("inventories " + JSON.stringify(self.inventory));
              if (item) {
                if (self.selectedItem != realslot) {
                  self.deselectItem();
                  self.selectItem(realslot, true);
                  return;
                }
                else {
                  self.select(realslot, itemNumber);
                  self.deselectItem();
                }
              }
            };

            for(var index = 0; index < this.pageItems; index++) {
                this.bankslots.push(new BankSlot(this, index));
            }

            this.goldNumber = $('.bankGold');

            this.selectedBank = null;
            this.selectedItem = null;

      	    $('#bankDialogBankGoldBody').click(function(event) {
      	    	game.app.showDropDialog(-2);
      	    });



        },

        rescale: function(scale) {
            for(var index = 0; index < this.bankslots.length; index++) {
                this.bankslots[index].rescale();
            }
        },

        getItem: function (slot) {
            var realslot = slot + (this.page * this.pageItems);
            return game.bankHandler.banks[realslot];
        },

        getInventory: function(index) {
            return this.bankslots[index];
        },

        open: function(page) {
            this.page = page;
            game.bankHandler.pageIndex = page;

            for(var index = 0; index < 24; index++) {
                this.bankslots[index].release();
            }

            if(game && game.ready) {
                for(var bankNumber = 0; bankNumber < this.pageItems; bankNumber++) {
                    var item = game.bankHandler.banks[this.pageItems*page+bankNumber];
                    if(item) {
                        this.bankslots[bankNumber].assign(item);
                    }
                }
            }
        },

        select: function(realslot, itemCount = 1) {
            if (!game.inventoryHandler.isInventoryFull())
            {
                //game.client.sendItemSlot([2, 1, bank.getIndex()+(this.page*this.pageItems), 0, -1]);
                //bank.release();
                game.client.sendItemSlot([2, 1, realslot, itemCount, 0, -1]);
                this.bankslots[realslot % 24].release();
            }
        },

        deselectItem: function() {
          this.selectItem(this.selectedItem, false);
        },

        selectItem: function(realslot, select) {
          pageslot = realslot % this.pageItems;
          //var str = '#bankDialogBank'+fixed(pageslot,2)+'Background';
          if (pageslot < 0)
            return;

          var background = this.bankslots[pageslot].background;

          if (select) {
            var s = game.renderer.getUiScaleFactor();
            this.selectedItem = realslot;
            background.css({
              'border': s + 'px solid white'
            });
          }
          else {
            this.selectedItem = -1;
            background.css({
              'border': 'none'
            });
          }
        },
    });


    var BankDialog = Dialog.extend({
        init: function(game) {
            this._super(game, '#bankDialog');
            this.scale=0;
            this.setScale();

            var self = this;

            this.bankFrame = new BankFrame(this);

            this.storeButton = $('#bankDialogStoreButton');
            this.storeButton.off().on('click', function (event) {
              game.inventoryMode = InventoryMode.MODE_BANK;
              game.inventoryHandler.showInventory();
            });

            $('#bankGoldFrame').click(function(event) {
      	    	self.game.app.showDropDialog(-2);
      	    });

            $('#bankDialog0Button').click(function(event) {
      	    	  self.bankFrame.open(0);
      	    });
            $('#bankDialog1Button').click(function(event) {
      	    	  self.bankFrame.open(1);
      	    });
            $('#bankDialog2Button').click(function(event) {
      	    	  self.bankFrame.open(2);
      	    });
            $('#bankDialog3Button').click(function(event) {
      	    	  self.bankFrame.open(3);
      	    });


            this.closeButton = $('#bankDialogCloseButton');



            this.closeButton.click(function(event) {
                self.hide();
            });
        },

        setScale: function() {
          game.renderer.getUiScaleFactor();
        },

        rescale: function() {
        	this.setScale();
		      this.bankFrame.rescale(this.scale);
        },

        show: function() {
            this.rescale();
            this.bankFrame.open(this.bankFrame.page);
            this._super();
        },

        hide: function() {
            this._super();
        },

    });

    return BankDialog;
});


// TODO - Add Menu Option Navigation. (Assign Skill, Add stat points, Change Settings, View Leaderboard etc).

define('gamepad',[], function() {
  var Navigate = {
    NONE: 0,
    LEFT: 1,
    RIGHT: 2,
    UP: 3,
    DOWN: 4
  };

var jqInventoryWindow = $("#allinventorywindow");
var jqMenuWindow = $("#menucontainer");
var jqAttackWindow = $("#attackContainer");
var jqSkillWindow = $("#skillsDialog");
var jqStatWindow = $("#statsDialog");
var jqPlayerPopupWindow = $("#playerPopupMenuContainer");
var jqInviteWindow = $("#partyconfirm");
var jqQuestWindow = $("#questlog");
var jqSocialWindow = $("#socialwindow");
var jqSettingsWindow = $("#settings");
var jqLeaderWindow = $("#leaderboard");
var jqDropWindow = $("#dropDialog");
var jqInputWindow = $("#inputDialog");
var jqConfirmWindow = $("#dialogModalConfirm");
var jqNotifyWindow = $("#dialogModalNotify");
var jqDiedWindow = $("#diedwindow");
var jqAuctionSellWindow = $("#auctionSellDialog");
var jqAchievementWindow = $("#achievementlog");
var jqShopWindow = $("#shopDialog");

var selectFirstItem = {
  allinventorywindow: "#equipBackground0",
  menucontainer: "#inventorybutton",
  statsDialog: "#charAddAttack",
  skillsDialog: "#characterSkill0Body",
  playerPopupMenuContainer: "#playerPopupMenuPartyInvite",
  questlog: "#questCloseButton",
  socialwindow: "#socialclose",
  settings: "#settingchat",
  leaderboard: "#lbselect",
  dropDialog: "#dropAccept",
  dialogModalConfirm: "#dialogModalConfirmButton1",
  dialogModalNotify: "#dialogModalNotifyButton1",
  combatContainer: "#scinventory0",
  auctionSellDialog: "#auctionSellAccept",
  bankDialog: "#bankDialogBank00Background",
  appearanceDialog: "#changeLookArmorPrev",
  shopDialog: "#shopSKU",
  storeDialog: "#storeDialogStore0Button",
  socialconfirm: "#socialconfirmyes",
  diedwindow: "#respawn",
};

  var Gamepad = Class.extend({
    init: function(game) {
      var self = this;

  self.shopPageIndex = 0;
	self.storeDialogSide = ['#storeDialogStore0Button', '#storeDialogStore1Button', '#storeDialogStore2Button', '#storeDialogStore3Button'];
	self.storeDialogBuyButton = "#storeDialogStore{0}BuyButton";

  self.bankPages = ["#bankDialog0Button", "#bankDialog1Button", "#bankDialog2Button", "#bankDialog3Button", "#bankDialogStoreButton"];
  self.bankPageIndex = 0;


  self.playerInventory = "#inventorybackground{0}";
  self.playerInventoryButtons = ["#inventoryGearItems", "inventoryGear2Items"];
  self.playerBank = "#bankDialogBank{0}Background";
  self.playerEquipment = ["#equipBackground0","#equipBackground1","#equipBackground2","#equipBackground3","#equipBackground4"];
  self.playerShortcut = ["#shortcut0", "#shortcut1", "#shortcut2", "#shortcut3", "#shortcut4", "#shortcut5", "#shortcut6", "#shortcut7"];

  self.playerDialogSkill = "#characterSkill{0}Body";
  self.playerShortcutSkill = "#skill{0}Body";
  self.playerDialogStat = ["#charAddAttack","#charAddDefense","#charAddHealth","#charAddEnergy","#charAddLuck"];
  self.playerSettings = ["#buttonchat","#buttonsound","#buttonjoystick","#buttonmenucolor","#buttonbuttoncolor","#gamezoom"];
  self.leaderboardselect = ["#lbselect","#lbindex"];

  self.mainButtonsActive = false;
  self.mainButtons = [
    "#charactermenu",
    "#chatbutton",
    "#shortcutbutton"
  ];

	self.menuButtons = [
    "#inventorybutton",
    "#characterbutton",
    "#skillbutton",
    "#helpbutton",
    "#achievementbutton",
    "#socialbutton",
    "#warpbutton",
    "#settingsbutton",
//    "#leaderboardbutton",
    "#storebutton"
  ];

	//self.shortcutButtons = ['#scinventory2','#scinventory3','#scinventory0','#scinventory1','#skill0','#skill1','#skill2','#skill3','#skill4', '#skill5'];

  self.navMouse = false;

  self.navigate = Navigate.NONE;
  self.navNone = false;

  self.movePad = false;
  //self.navLeft = false;
  //self.navRight = false;
  //self.navUp = false;
  //self.navDown = false;

  self.shortcutAssign = 0;
  self.selectedItem = null;
  //self.navIntervalSpeed = 16;

  self.resetNavInterval = function (speed) {
    clearInterval(self.navInterval);
    self.navInterval = setInterval(function () {
      self.funcNavigation();
    }, speed);
  }
  self.resetNavInterval(180);

  self.funcNavigation = function () {
    if (self.navNone) {
      return;
    }
    if (!self.isActive())
    {
      return;
    }

    //var navigate = self.navigate[0];
    //var navigate = self.navigate[1];
    var navigate = self.navigate;

    if (!jqInventoryWindow.is(':visible') &&
        (game.storeDialog.visible ||
         game.auctionDialog.visible ||
         game.appearanceDialog.visible))
    {
       if (navigate == Navigate.UP)
       {
         self.joystickY = (self.joystickY-1).clamp(0,5);
         if (self.joystickY == 0)
         {
           var index = self.storeDialogSide[self.joystickX];
           this.setSelectedItem($(index));
           if (self.joystickX == 3)
           {
             self.joystickX = 0;
             self.joystickY = 0;
           }
           $(index).trigger("click");
         }
         else {
           var index = self.storeDialogBuyButton.format(self.joystickY-1);
           this.setSelectedItem($(index));
         }
       }
       if (navigate == Navigate.DOWN)
       {
         self.joystickY = (self.joystickY+1).clamp(0,5);
         if (self.joystickY >= 1) {
           var index = self.storeDialogBuyButton.format(self.joystickY-1);
           this.setSelectedItem($(index));
         }
       }
       if (navigate == Navigate.LEFT)
       {
         if (self.joystickY == 0) {
           self.joystickX = (self.joystickX-1).clamp(0,3);
           var index = self.storeDialogSide[self.joystickX];
           this.setSelectedItem($(index));
           $(index).trigger("click");
         }
         else {
           $('#storePageNavPrev').trigger("click");
         }
       }
       if (navigate == Navigate.RIGHT)
       {
         if (self.joystickY == 0) {
           self.joystickX = (self.joystickX+1).clamp(0,3);
           var index = self.storeDialogSide[self.joystickX];
           if (self.joystickX == 3)
           {
             self.joystickX = 0;
             self.joystickY = 0;
           }
           this.setSelectedItem($(index));
           $(index).trigger("click");
         }
         else {
           $('#storePageNavNext').trigger("click");
         }
       }
    }
    else if (!jqInventoryWindow.is(':visible') && game.bankDialog.visible)
    {

      var y4 = 0;
      if (navigate == Navigate.UP)
      {
        self.joystickY = (self.joystickY-1).clamp(0,4);

        if (self.joystickY == 4)
          y4 = ~~(self.joystickX/3);
      }
      if (navigate == Navigate.DOWN)
      {
        self.joystickY = (self.joystickY+1).clamp(0,4);

        if (self.joystickY == 4)
          y4 = ~~(self.joystickX/3);
      }
      if (navigate == Navigate.LEFT)
      {
        self.joystickX = (self.joystickX-1).clamp(0,5);

        if (self.joystickY == 4)
          y4 = (self.joystickX%2);

      }
      if (navigate == Navigate.RIGHT)
      {
        self.joystickX = (self.joystickX+1).clamp(0,5);

        if (self.joystickY == 4)
          y4 = (self.joystickX%2);
      }
      if (navigate != Navigate.NONE || navigate != Navigate.NONE) {
        if (self.joystickY == 4)
        {
          var jq = ["#bankGoldFrame", "#bankDialogStoreButton"];
          this.setSelectedItem($(jq[y4]));
        }
        else {
          var index = self.playerBank.format(padding((self.joystickY)*6+(self.joystickX),2));
          this.setSelectedItem($(index));
        }
      }
      return;
    }
    else if (jqInventoryWindow.is(':visible'))
    {
      if (navigate == Navigate.UP)
      {
        if (self.joystickX > 0 && self.joystickY < 4) {
          self.joystickY = ((self.joystickY+3)%4).clamp(0,3);
          var index = self.playerInventory.format((self.joystickY)*6+(self.joystickX)-1);
          this.setSelectedItem($(index));
        }
        if (self.joystickX == 0)
        {
          self.joystickY = ((self.joystickY+4)%5).clamp(0,4);
          var index = self.playerEquipment[self.joystickY];
          this.setSelectedItem($(index));
        }
      }
      if (navigate == Navigate.DOWN)
      {
        if (self.joystickX > 0 && self.joystickY < 4) {
          self.joystickY = ((self.joystickY+5)%4).clamp(0,3);
          var index = self.playerInventory.format((self.joystickY)*6+(self.joystickX)-1);
          this.setSelectedItem($(index));
        }
        if (self.joystickX == 0)
        {
          self.joystickY = ((self.joystickY+6)%5).clamp(0,4);
          var index = self.playerEquipment[self.joystickY];
          this.setSelectedItem($(index));
        }
      }
      if (navigate == Navigate.LEFT)
      {
        self.joystickX = ((self.joystickX+6)%7).clamp(0,6);
        if (self.joystickY == 4)
          self.joystickY = 3;

        if (self.joystickX > 0 && self.joystickY < 4) {
          var index = self.playerInventory.format((self.joystickY)*6+(self.joystickX)-1);
          this.setSelectedItem($(index));
        }
        if (self.joystickX == 0)
        {
          var index = self.playerEquipment[self.joystickY];
          this.setSelectedItem($(index));
        }
      }
      if (navigate == Navigate.RIGHT)
      {
        self.joystickX = ((self.joystickX+8)%7).clamp(0,6);
        if (self.joystickY == 4)
          self.joystickY = 3;

        if (self.joystickX > 0 && self.joystickY < 4) {
          var index = self.playerInventory.format((self.joystickY)*6+(self.joystickX)-1);
          this.setSelectedItem($(index));
        }
        if (self.joystickX == 0)
        {
          var index = self.playerEquipment[self.joystickY];
          this.setSelectedItem($(index));
        }
      }
      return;
    }
    else if (jqMenuWindow.is(':visible'))
    {
      var len = self.menuButtons.length;
      if (navigate == Navigate.UP)
      {
        self.joystickY = ((self.joystickY-1+len)%len).clamp(0,9);
        var index = self.menuButtons[self.joystickY];
        this.setSelectedItem($(index));
      }
      if (navigate == Navigate.DOWN)
      {
        self.joystickY = ((self.joystickY+1+len)%len).clamp(0,9);
        var index = self.menuButtons[self.joystickY];
        this.setSelectedItem($(index));
      }
    }
    else if (self.mainButtonsActive)
    {
      var l = self.mainButtons.length;

      if (navigate == Navigate.UP)
      {
        self.joystickX = (l+self.joystickX-2) % l;
      }
      else if (navigate == Navigate.DOWN)
      {
        self.joystickX = (l+self.joystickX+2) % l;
      }
      else if (navigate == Navigate.LEFT && self.joystickX > 0)
      {
        self.joystickX = (l+self.joystickX-1) % l;
      }
      else if (navigate == Navigate.RIGHT && self.joystickX > 0)
      {
        self.joystickX = (l+self.joystickX+1) % l;
      }
      if (navigate != Navigate.NONE)
      {
        var index = self.mainButtons[self.joystickX];
        this.setSelectedItem($(index));
        return;
      }
    }
    else if (self.shortcutActive && jqAttackWindow.is(':visible'))
    {
      if (navigate == Navigate.UP)
      {
        self.joystickY = ((self.joystickY+7)%8);
        var index = self.playerShortcut[(self.joystickY)*2+(self.joystickX)];
        this.setSelectedItem($(index));
      }
      if (navigate == Navigate.DOWN)
      {
        self.joystickY = ((self.joystickY+1)%8);
        var index = self.playerShortcut[(self.joystickY)*2+(self.joystickX)];
        this.setSelectedItem($(index));
      }
      if (navigate == Navigate.LEFT)
      {
        self.joystickX = (self.joystickX+1%2);
        var index = self.playerShortcut[(self.joystickY)*2+(self.joystickX)];
        this.setSelectedItem($(index));
      }
      if (navigate == Navigate.RIGHT)
      {
        self.joystickX = (self.joystickX+1%2);
        var index = self.playerShortcut[(self.joystickY)*2+(self.joystickX)];
        this.setSelectedItem($(index));
      }
    }
    else if (jqSkillWindow.is(':visible'))
    {
      /*if (navigate == Navigate.UP)
      {
        self.joystickY = (self.joystickY-1).clamp(0,2);
        var index = self.playerDialogSkill.format((self.joystickY)*6+(self.joystickX));
        this.setSelectedItem($(index));
      }
      if (navigate == Navigate.DOWN)
      {
        self.joystickY = (self.joystickY+1).clamp(0,2);
        var index = self.playerDialogSkill.format((self.joystickY)*6+(self.joystickX));
        this.setSelectedItem($(index));
      }*/
      if (navigate == Navigate.LEFT)
      {
        self.joystickX = (self.joystickX-1).clamp(0,5);
        var index = self.playerDialogSkill.format((self.joystickY)*6+(self.joystickX));
        this.setSelectedItem($(index));
      }
      if (navigate == Navigate.RIGHT)
      {
        self.joystickX = (self.joystickX+1).clamp(0,5);
        var index = self.playerDialogSkill.format((self.joystickY)*6+(self.joystickX));
        this.setSelectedItem($(index));
      }
    }
    else if (jqStatWindow.is(':visible'))
    {
      if (navigate == Navigate.UP)
      {
        self.joystickY = (self.joystickY-1).clamp(0,4);
        var index = self.playerDialogStat[self.joystickY];
        this.setSelectedItem($(index));
      }
      if (navigate == Navigate.DOWN)
      {
        self.joystickY = (self.joystickY+1).clamp(0,4);
        var index = self.playerDialogStat[self.joystickY];
        this.setSelectedItem($(index));
      }
    }
    else if (jqSettingsWindow.is(':visible'))
    {
      if (navigate == Navigate.UP)
      {
        self.joystickY = (self.joystickY-1).clamp(0,5);
        var index = self.playerSettings[self.joystickY];
        this.setSelectedItem($(index));
      }
      if (navigate == Navigate.DOWN)
      {
        self.joystickY = (self.joystickY+1).clamp(0,5);
        var index = self.playerSettings[self.joystickY];
        this.setSelectedItem($(index));
      }
    }
    else if (jqLeaderWindow.is(':visible'))
    {
      if (navigate == Navigate.LEFT)
      {
        var index = self.leaderboardselect[0];
        this.setSelectedItem($(index));
      }
      if (navigate == Navigate.RIGHT)
      {
        var index = self.leaderboardselect[1];
        this.setSelectedItem($(index));
      }
    }
  };

  self.setSelectedItem = function (val) {
    //if (self.selectedItem != val)
    //{
      var defHighlight = "2px solid rgb(0, 0, 255)";
      if (self.selectedItem && self.selectedItem.css('border') == defHighlight)
        self.selectedItem.css('border', self.selectedItemBorder);

      if (val)
      {
        self.selectedItemBorder = val.css('border');
        val.css({'border': defHighlight});
        self.selectedItem = val;
      }
    //}
  };

  //setInterval(self.funcNavigation, 1000);


	self.pxgamepad = new PxGamepad();

	self.pxgamepad.start();

  self.joystickSide = 0;
  self.joystickIndex = 0;
  self.joystickX = 0;
  self.joystickY = 0;
  self.dpadActive = false;
	/*if (self.pxgamepad.getGamepad())
	{
		self.enableSelectItem();
	}*/

  self.pxgamepad.buttonOn('select', function() {
    log.info("buttonOn = select");
    if (self.mainButtonsActive) {
      self.mainButtonsActive = false;
      self.setSelectedItem(null);
      return;
    }

    self.mainButtonsActive = true;
    self.setSelectedItem($("#charactermenu"));
    //self.resetNavInterval(192);
  });

  self.pressShortcut = function (index) {
    jqAttackWindow.show();
    self.setSelectedItem($(self.playerShortcut[index]));
    self.selectedItem.trigger("click");
  };

  /*self.pressSkill = function (index) {
    jqAttackWindow.show();
    self.setSelectedItem($(self.playerShortcut[index]));
    self.selectedItem.trigger("click");
  };*/

  self.pxgamepad.buttonOn('x', function() {
    if (self.leftTopPressed) {
      self.pressShortcut(2);
      return;
    }
    if (self.rightTopPressed) {
      self.pressShortcut(6);
      return;
    }

    log.info("buttonOn = x");
    game.playerTargetClosestEntity(1);
	});

  self.pxgamepad.buttonOff('x', function() {
    log.info("buttonOff = x");
    //self.navMouse = false;
	});

  self.pxgamepad.buttonOn('y', function() {
    if (self.leftTopPressed) {
      self.pressShortcut(3);
      return;
    }
    if (self.rightTopPressed) {
      self.pressShortcut(7);
      return;
    }

    log.info("buttonOn = y");
    self.navMouse = !self.navMouse;
	});

  self.pxgamepad.buttonOff('y', function() {
    log.info("buttonOff = y");
	});

	self.pxgamepad.buttonOn('a', function() {
      log.info("buttonOn = a");
      if (self.leftTopPressed) {
        self.pressShortcut(0);
        return;
      }
      if (self.rightTopPressed) {
        self.pressShortcut(4);
        return;
      }

	    if(self.isDialogOpen())
	    {
        if (jqAuctionSellWindow.is(':visible'))
        {
          $("#auctionSellAccept").trigger("click");
          return;
        }
    	  if (jqDiedWindow.is(':visible'))
    	  {
    	    $("#respawn").trigger('click');
          return;
    	  }
        if (jqConfirmWindow.is(':visible'))
        {
          $("#dialogModalConfirmButton1").trigger("click");
          return;
        }
        if (jqNotifyWindow.is(':visible'))
        {
          $("#dialogModalNotifyButton1").trigger("click");
          return;
        }
    	  if ($("#socialconfirm").is(':visible'))
    		{
    	    $('#socialconfirmyes').trigger("click");
    		}
      	else if (jqPlayerPopupWindow.is(':visible'))
    		{
    		    $(self.playerMode).trigger("click");
    		}
    		else if (jqDropWindow.is(':visible'))
    		{
    		    $("#dropAccept").trigger("click");
            return;
    		}
        else if (jqSkillWindow.is(':visible'))
    		{
          if (game.selectedSkill) {
            $(self.playerShortcut.format(self.shortcutAssign)).trigger("click");
            self.shortcutAssign = (self.shortcutAssign+1) % 8;
          }
          else if (self.selectedItem) {
            self.selectedItem.trigger("click");
          }
    		}
        else if (jqStatWindow.is(':visible'))
    		{
          if (self.selectedItem) {
            self.selectedItem.trigger("click");
          }
    		}
      	else if (jqInventoryWindow.is(':visible'))
      	{
          if (game.inventoryHandler.selectedItem != -1 &&
              self.lastSelectedItem == self.selectedItem)
          {
            $('#invActionButton').trigger("click");
            return;
          }

          if (self.selectedItem)
            self.selectedItem.trigger("click");

          self.lastSelectedItem = self.selectedItem;
          return;
        }
    		else if (jqMenuWindow.is(':visible'))
    		{
          if (self.selectedItem)
            self.selectedItem.trigger("click");
    		}
    		else if (!jqInventoryWindow.is(':visible') && (game.storeDialog.visible || game.auctionDialog.visible || game.appearanceDialog.visible))
    		{
           if (self.selectedItem)
        	     self.selectedItem.trigger("click");
    		}
    		else if (!jqInventoryWindow.is(':visible') && game.bankDialog.visible)
    		{
          if (self.selectedItem) {
            self.selectedItem.trigger("click");
            self.setSelectedItem(self.selectedItem);
          }
          return;
    		}
        else if (jqSettingsWindow.is(':visible'))
        {
          if (self.selectedItem)
          {
              if (self.selectedItem.attr("id") == "gamezoom")
              {
                var index = $(".cgamezoom option:selected").index();
                var size = $(".cgamezoom option").length;
                var newIndex = (index+1) % size;

                $(".cgamezoom option:selected").removeAttr("selected");
                $(".cgamezoom option:eq("+newIndex+")").prop("selected", true);
                $(".cgamezoom").trigger("chosen:updated");
                $(".cgamezoom").trigger("change");
              }
              else {
                self.selectedItem.trigger("click");
              }
          }
        }
        else if (jqLeaderWindow.is(':visible'))
        {
          if (self.selectedItem)
          {
            if (self.selectedItem.attr("id") == "lbselect")
            {
              var index = $("#lbselect option:selected").index();
              var size = $("#lbselect option").length;
              var newIndex = (index+1) % size;

              $("#lbselect option:selected").removeAttr("selected");
              $("#lbselect option:eq("+newIndex+")").prop("selected", true);
              $("#lbselect").trigger("chosen:updated");
              $("#lbselect").trigger("change");
            }
            if (self.selectedItem.attr("id") == "lbindex")
            {
              var index = $("#lbindex option:selected").index();
              var size = $("#lbindex option").length;
              var newIndex = (index+1) % size;

              $("#lbindex option:selected").removeAttr("selected");
              $("#lbindex option:eq("+newIndex+")").prop("selected", true);
              $("#lbindex").trigger("chosen:updated");
              $("#lbindex").trigger("change");
            }
          }
        }
        else if (self.mainButtonsActive)
        {
          log.info("self.mainButtonsActive");
          if (self.selectedItem)
          {
              self.selectedItem.trigger("click");

              /*if (self.selectedItem.attr('id') === 'charactermenu')
              {
                //self.setSelectedItem(null);
                self.setSelectedItem($("#inventorybutton"));
              }*/
              //self.setSelectedItem(null);
              self.dialogOpen();
          }
          self.mainButtonsActive = false;
        }
        self.joystickX = 0;
        self.joystickY = 0;
     }
     else
     {
         //self.shortcutActive = !self.shortcutActive;
        if (self.navMouse)
          game.click();
        else
          game.makePlayerInteractNextTo();
     }
	});

	self.pxgamepad.buttonOn('b', function() {
    log.info("buttonOn = b");
    if (self.leftTopPressed) {
      self.pressShortcut(1);
      return;
    }
    if (self.rightTopPressed) {
      self.pressShortcut(5);
      return;
    }

    if(self.isDialogOpen())
    {
        if (jqConfirmWindow.is(':visible'))
        {
          $("#dialogModalConfirmButton2").trigger("click");
          return;
        }
        if (jqNotifyWindow.is(':visible'))
        {
          $("#dialogModalNotifyButton1").trigger("click");
          return;
        }
        if (jqDiedWindow.is(':visible'))
    	  {
    	    $("#respawn").trigger('click');
          return;
    	  }
        if (jqAuctionSellWindow.is(':visible'))
        {
          $("#auctionSellCancel").trigger("click");
          return;
        }
	    	if ($("#socialconfirm").is(':visible'))
    		{
      	    $('#socialconfirmno').trigger("click");
    		    $('#socialconfirm').css('display', 'none');
    		}
    		else if (jqPlayerPopupWindow.is(':visible'))
    		{
    		    game.playerPopupMenu.close();
    		}
	    	else if ($("#chatbox").is(':visible'))
	    	{
	    	    $("#chatbox").hide();
	    	}
        else if (jqSkillWindow.is(':visible'))
        {
          $("#skillsCloseButton").trigger("click");
        }
        else if (jqStatWindow.is(':visible'))
        {
          $("#statsCloseButton").trigger("click");
        }
	    	else if (jqInventoryWindow.is(':visible'))
	    	{
            var inv = game.inventoryHandler;
            if (inv.selectedItem >= 0) {
              inv.deselectItem();
              return;
            } else {
	    	      $("#inventoryCloseButton").trigger("click");
            }
	    	}
	    	else if (jqQuestWindow.is(':visible'))
	    	{
	    	    //self.disableSelectItem();
	    	    $("#questCloseButton").trigger("click");
	    	}
        else if (jqAchievementWindow.is(':visible'))
        {
            $("#achievementCloseButton").trigger("click");
        }
	    	else if (jqSocialWindow.is(':visible'))
	    	{
	    	    //self.disableSelectItem();
	    	    $("#socialclose").trigger("click");
	    	}
	    	else if (jqSettingsWindow.is(':visible'))
	    	{
	    	    //self.disableSelectItem();
	    	    $("#settingsclose").trigger("click");
	    	}
	    	else if (jqLeaderWindow.is(':visible'))
	    	{
	    	    //self.disableSelectItem();
	    	    $("#leaderboardclose").trigger("click");
	    	}
        else if (jqShopWindow.is(':visible'))
	    	{
	    	    $("#shopCloseButton").trigger("click");
	    	}
    		else if (jqMenuWindow.is(':visible'))
    		{
    	      //self.disableSelectItem();
    		    jqMenuWindow.trigger("click");
            self.mainButtonsActive = false;
    		}
    		else if (jqDropWindow.is(':visible'))
    		{
    	      //self.disableSelectItem();
    		    $("#dropCancel").trigger("click");
    		}
    		else if (game.storeDialog.visible || game.auctionDialog.visible || game.appearanceDialog.visible)
    		{
            $("#storeDialogCloseButton").trigger("click");
    		    //self.disableSelectItem();
    		}
    		else if (game.bankDialog.visible)
    		{
    		    $("#bankDialogCloseButton").trigger("click");
    		}
        else if (self.shortcutActive)
        {
          $(self.playerShortcut[self.joystickIndex]).trigger("click");
        }
        else if (self.mainButtonsActive)
        {
          self.mainButtonsActive = false;
          self.setSelectedItem(null);
        }
        if (!self.isDialogOpen())
        {
      		self.joystickIndex = 0;
          //self.resetNavInterval(16);
          self.setSelectedItem(null);
          self.joystickX = -1;
          self.joystickY = -1;
        }
	    }
	    else
	    {
        /*self.shortcutActive = true;
        if (!$("#attackContainer").is(':visible'))
        {
          self.setSelectedItem($(self.playerShortcut[0]));
          $("#attackContainer").show();
        }*/
	    }
	});

    	self.pxgamepad.buttonOff('b', function() {
        log.info("buttonOff = b");

        /*if ($("#attackContainer").is(':visible') && self.selectedItem && self.shortcutActive)
            self.selectedItem.trigger("click");
        self.shortcutActive = false;*/
        //game.click();



      });

      var switchBankDialogPage = function (mod) {
        var l = self.bankPages.length;
        var i = (l+self.bankPageIndex+mod) % l;
        self.bankPageIndex = i;
        var jq = $(self.bankPages[i]);
        self.setSelectedItem(jq);
        jq.trigger("click");
      }

      var switchShopDialogPage = function (mod) {
        var l = self.storeDialogSide.length;
        var i = (l+self.shopPageIndex+mod) % l;
        self.shopPageIndex = i;
        var jq = $(self.storeDialogSide[i]);
        self.setSelectedItem(jq);
        jq.trigger("click");
      }

      self.pxgamepad.buttonOn('leftTop', function() {
        if (jqInventoryWindow.is(':visible'))
        {
            $("#inventoryGearItems").click();
            return;
        }
        if ($("#bankDialog").is(':visible')) {
          switchBankDialogPage(-1);
          return;
        }
        if ($("#storeDialogStore").is(':visible')) {
          switchShopDialogPage(1);
          return;
        }

        jqAttackWindow.show();
        self.leftTopPressed = true;
      });
      self.pxgamepad.buttonOff('leftTop', function() {
        self.leftTopPressed = false;
      });

      self.pxgamepad.buttonOn('rightTop', function() {
        if (jqInventoryWindow.is(':visible'))
        {
            $("#inventoryGear2Items").click();
            return;
        }
        if ($("#bankDialog").is(':visible')) {
          switchBankDialogPage(1);
          return;
        }
        if ($("#storeDialogStore").is(':visible')) {
          switchShopDialogPage(1);
          return;
        }

        jqAttackWindow.show();
        self.rightTopPressed = true;
      });

      self.pxgamepad.buttonOff('rightTop', function() {
        self.rightTopPressed = false;
      });



      // Default.
	    //selectJoystickSide();

	    self.joystickSide = 0;
	    self.joystickIndex = 0;

      self.pxgamepad.buttonOn('dpadUp', function() {
        self.dpadY = -1;
    	});

      self.pxgamepad.buttonOn('dpadDown', function() {
        self.dpadY = 1;
    	});

      self.pxgamepad.buttonOn('dpadLeft', function() {
        self.dpadX = -1;
    	});

      self.pxgamepad.buttonOn('dpadRight', function() {
        self.dpadX = 1;
    	});

      self.pxgamepad.buttonOff('dpadUp', function() {
        self.dpadY = 0;
    	});

      self.pxgamepad.buttonOff('dpadDown', function() {
        self.dpadY = 0;
    	});

      self.pxgamepad.buttonOff('dpadLeft', function() {
        self.dpadX = 0;
    	});

      self.pxgamepad.buttonOff('dpadRight', function() {
        self.dpadX = 0;
    	});

    },

    interval: function () {
	    var self = this;

      self.navigate = Navigate.NONE;

 	    if (!self.pxgamepad.getGamepad())
	      return;

      var p = game.player;
      if (!p || !game.started || !game.ready)
        return;

      self.pxgamepad.update();

       var ignorezone = 0.10;
       var modx = self.dpadX || self.pxgamepad.leftStick.x,
           mody = self.dpadY || self.pxgamepad.leftStick.y;

       var modxa = Math.abs(modx), modya = Math.abs(mody);
       var mod = Math.max(modxa, modya);
       if (mod > ignorezone)
       {
         if (mod > 0.25) {
      	   if (modxa > modya)
      	   {
             self.navigate = (modx > 0) ? Navigate.RIGHT : Navigate.LEFT;
      	   }
           else
      	   {
             self.navigate = (mody > 0) ? Navigate.DOWN : Navigate.UP;
      	   }
         }
      }

      var mouse = game.mouse,
        width = game.renderer.renderer.screen.width,
        height = game.renderer.renderer.screen.height,
        ts = game.tilesize,
        speed = (ts >> 3) * game.renderer.scale;

      var modx2 = self.navMouse ? (self.dpadX || self.pxgamepad.leftStick.x) : self.pxgamepad.rightStick.x,
          mody2 = self.navMouse ? (self.dpadY || self.pxgamepad.leftStick.y) : self.pxgamepad.rightStick.y;
      var modxa2 = Math.abs(modx2),
          modya2 = Math.abs(mody2),
          mod2 = Math.max(modxa2, modya2);

      if (mod2 > ignorezone)
      {
        mouse.x += modx2 * speed;
        mouse.y += mody2 * speed;
     }

     game.mouse.x = ~~(mouse.x.clamp(0,width-1));
     game.mouse.y = ~~(mouse.y.clamp(0,height-1));

      var navigate = self.navigate;
      ///var navigate = self.navigate[1];

      if (!self.isDialogOpen() && !self.navMouse)
      {
        if (!game.player.keyMove) {
          if (navigate == Navigate.LEFT)
          {
              //log.info("moveLeft = true");
              p.move(3, true);
              this.movePad = 3;
          }
          if (navigate == Navigate.RIGHT)
          {
              //log.info("moveRight = true");
              p.move(4, true);
              this.movePad = 4;
          }
          if (navigate == Navigate.UP)
          {
              //log.info("moveUp = true");
              p.move(1, true);
              this.movePad = 1;
          }
          if (navigate == Navigate.DOWN)
          {
              //log.info("moveDown = true");
              p.move(2, true);
              this.movePad = 2;
          }
        }
        if (navigate == Navigate.NONE && navigate == Navigate.NONE && p.keyMove & this.movePad > 0)
        {
          p.move(this.movePad, false);
          this.movePad = 0;
        }
      }

	    game.movecursor();
	    game.updateCursorLogic();

      if (!self.isDialogOpen()) {
        self.funcNavigation();
      }
    },

    isDialogOpen: function () {
      //return jqInventoryWindow.is(':visible');
    	return game.storeDialog.visible ||
    		game.bankDialog.visible ||
    		game.auctionDialog.visible ||
        game.appearanceDialog.visible ||
    		jqMenuWindow.is(':visible') ||
    		jqInventoryWindow.is(':visible') ||
    		jqSkillWindow.is(':visible') ||
        jqStatWindow.is(':visible') ||
    		jqPlayerPopupWindow.is(':visible') ||
    		jqInviteWindow.is(':visible') ||
    		jqQuestWindow.is(':visible') ||
        jqAchievementWindow.is(':visible') ||
    		jqSocialWindow.is(':visible') ||
    		jqSettingsWindow.is(':visible') ||
    		jqLeaderWindow.is(':visible') ||
    		jqDropWindow.is(':visible') ||
        jqInputWindow.is(':visible') ||
        jqConfirmWindow.is(':visible') ||
        jqNotifyWindow.is(':visible') ||
        jqAuctionSellWindow.is(':visible') ||
        jqDiedWindow.is(':visible') ||
        jqShopWindow.is(':visible') ||
        this.mainButtonsActive;
        //this.shortcutActive;
        //this.navMouse;
    },

    isActive: function () {
    	return (this.pxgamepad.getGamepad() !== null);
    },

    navActive: function () {
    	if (this.pxgamepad.getGamepad() === null)
        return true;
      return !(this.navigate === 0);
    },

    dialogNavigate: function (direction) {
     this.joystickSide = 0;
     this.joystickIndex = 0;
     this.joystickX = 0;
     this.joystickY = 0;
     //this.resetNavInterval(192);
    },

    dialogOpen: function () {
      for (var k in selectFirstItem) {
          if ($('#'+k).is(':visible') && self.selectedItem == null)
          {
            if (selectFirstItem[k])
              this.setSelectedItem($(selectFirstItem[k]));
            else {
              this.setSelectedItem(null);
            }
            //self.joystickX = 0;
            //self.joystickY = 0;
            break;
          }
      }

      this.dialogNavigate();
    },

    dialogClose: function () {
      //this.resetNavInterval(16);
    }

  });
  return Gamepad;
});

define('clientcallbacks',['infomanager', 'hoveringinfo', 'bubble',
        'renderer', 'map', 'mapcontainer', 'animation', 'sprite', 'tile',
        'gameclient', 'clientcallbacks', 'audio', 'updater',
        'pathfinder', 'entity/entity', 'entity/entitymoving', 'entity/item', 'data/items', 'data/itemlootdata', 'data/appearancedata', 'dialog/appearancedialog',
        'entity/mob', 'entity/npcstatic', 'entity/npcmove', 'data/npcdata', 'entity/player', 'entity/character', 'entity/chest', 'entity/block',
        'data/mobdata', 'data/mobspeech', 'exceptions', 'config', 'chathandler',
        'playerpopupmenu', 'classpopupmenu', 'quest', 'data/questdata', 'questhandler', 'achievement',
        'equipmenthandler', 'inventoryhandler', 'bankhandler', 'socialhandler',
        'leaderboardhandler', 'settingshandler','storehandler','bools',
        'skillhandler', 'data/skilldata', 'dialog/storedialog', 'dialog/auctiondialog',
        'dialog/bankdialog', 'data/langdata', 'gamepad'],

function(InfoManager, HoveringInfo, BubbleManager,
        Renderer, Map, MapContainer, Animation, Sprite, AnimatedTile,
         GameClient, ClientCallbacks, AudioManager, Updater,
         Pathfinder, Entity, EntityMoving, Item, Items, ItemLoot, AppearanceData, AppearanceDialog,
         Mob, NpcStatic, NpcMove, NpcData, Player, Character, Chest, Block,
         MobData, MobSpeech, Exceptions, config, ChatHandler,
         PlayerPopupMenu, ClassPopupMenu, Quest, QuestData, QuestHandler, Achievement,
         EquipmentHandler, InventoryHandler, BankHandler, SocialHandler,
         LeaderboardHandler, SettingsHandler, StoreHandler, Bools,
         SkillHandler, SkillData, StoreDialog, AuctionDialog,
         BankDialog, LangData, GamePad) {
  var ClientCallbacks = Class.extend({
      init: function(client) {
        this.client = client;

        //var client = game.client;

        // data - mapIndex, mapStatus, x, y.
        client.onPlayerTeleportMap(function(data) {
          var mapId = parseInt(data[0]),
              x = parseInt(data[2]),
              y = parseInt(data[3]);
          var status = game.mapStatus = parseInt(data[1]);

          log.info("ON PLAYER TELEPORT MAP:"+mapId+"status: "+status+",x:"+x+",y:"+y);

          if (status == -1)
          {
            game.mapIndex = 0;
            game.mapStatus = 2;
            game.player.forceStop();
            game.player.clearTarget();
            //game.player.path = null;
            //game.player.step = 0;
            return;
          }

          if (status == 1)
          {
            log.info("spawnMap");

            if (game.player.isMoving())
              game.player.forceStop();
            game.mapIndex = mapId;
            game.player.mapIndex = mapId;
            //game.player.forceStop();
            game.player.clearTarget();
            game.player.freeze = true;
            //game.player.path = null;
            //game.player.step = 0;

            game.renderer.clearEntities();

            delete game.entities;
            game.entities = {};
            delete game.camera.entities;
            game.camera.entities = {};
            delete game.camera.outEntities;
            game.camera.outEntities = {};
            delete game.items;
            game.items = {};

            log.info("Map loaded.");
            client.sendTeleportMap([mapId, 1, x, y]);
            //game.renderer.initPIXI();
            game.renderer.blankFrame = true;
            //game.initCursors();
            //game.setCursor("hand");
          }

          if (status == 2)
          {
              log.info("spawnMap - Loaded");
              game.initPlayer();


// TODO - ERROR, On position 50,50 pathing is allowing move inside collisionGrid.
              //x = 200 * game.tilesize, y = 200 * game.tilesize;
              //game.player.setPosition(x, y);
              game.player.setPositionSpawn(x, y);
              game.player.forceStop();
              //game.player.gx = x >> 4;
              //game.player.gy = y >> 4;
              var c = game.camera;
              //c.scrollX = false;
              //c.scrollY = false;
              //c.sox = 0;
              //c.soy = 0;

              game.initGrid();
              c.setRealCoords();

              game.pathfinder = new Pathfinder(game.mapContainer.chunkWidth, game.mapContainer.chunkHeight);
              //game.initAnimatedTiles();
              log.info("spawnMap - Cleared");

              var mapReady = function ()
              {
                log.info("spawnPlayer - started");

                var p = game.player;
                //p.setWeaponSprite(p.getWeaponSprite());
                //p.setArmorSprite(p.getArmorSprite());

                game.addEntity(p);

                //game.mapIndex = mapId;

                game.audioManager.updateMusic();




                game.mapStatus = 2;

                //if (game.player.x % ts === 0 || game.player.y % ts === 0)
                //{
                  //var mc = game.mapContiainer;
                  //var x=game.player.x, y=game.player.y;
                  log.info("moveGrid");
                  //mc.fx = x;
                  //mc.fy = y;
                  //mc.fgx = p.gx;
                  //mc.fgy = p.gy;
                  //mc.moveGrid();
                  //game.renderer.refreshGrid();
                //}
                //game.mapContainer.moveGrid();
                //game.renderer.refreshGrid();
                //game.mapContainer.moveGrid();
                //game.renderer.refreshGrid();

                game.renderer.forceRedraw = true;
                log.info("spawnPlayer - finished");
                //game.renderer.blankFrame = false;
                game.player.freeze = false;
              };
              //game.renderer.forceRedraw = true;
              game.mapContainer.allReady(function() {
                mapReady();
              });
              game.renderer.forceRedraw = true;
          }

        });

        /*client.onEntityList(function(list) {
            var entityIds = _.pluck(game.entities, 'id'),
                knownIds = _.intersection(entityIds, list),
                newIds = _.difference(list, knownIds);

            // Ask the server for spawn information about unknown entities
            if(_.size(newIds) > 0) {
                client.sendWho(newIds);
            }
        });*/

        /*client.onKnownEntityList(function(list) {
            if (!list || list.length == 0) {
              client.sendKnowWho([]);
              return;
            }

            if (game.camera)
            {
              game.camera.forEachInOuterScreen(function(entity,id) {
                  if(!entity || entity.isDead)
                  {
                      game.camera.outEntities[id] = null;
                      delete game.camera.outEntities[id];
                  }
              });
            }

            var entityIds = _.pluck(list, 'id');
            client.sendKnowWho(entityIds);
        });*/

        client.onLogin(function () {
        	client.sendLogin(game.player);
        });

        client.onSpawnItem(function(data, item) {
            //log.info("Spawned " + ItemTypes.KindData[item.kind].name + " (" + item.id + ") at "+x+", "+y);
            if (!item) return;

            var x = parseInt(data[5]),
                y = parseInt(data[6]),
                count = parseInt(data[8]);

            var kind = item.kind;
            var sprite = null;
						if (ItemTypes.isLootItem(kind))
							sprite = game.sprites['itemloot'];
            else
              sprite = game.sprites[ItemTypes.KindData[item.kind].spriteName];

						item.setSprite(sprite);
						item.wasDropped = true;
						log.info("x:"+x+",y:"+y);
						item.setPosition(x, y);
						item.count = parseInt(count);

            game.addItem(item);
            game.updateCursor();
            game.updateCameraEntity(item.id, item);
        });

        /*client.onSpawnChest(function(chest, x, y) {
            log.info("Spawned chest (" + chest.id + ") at "+x+", "+y);
            chest.setSprite(game.sprites[chest.getSpriteName()]);
            chest.setPosition(x, y);
            chest.setAnimation("idle_down", 150);
            game.addEntity(chest, x, y);
            chest.onOpen(function() {
                chest.setSprite(game.sprites["death"]);
                chest.setAnimation("death", 120, 1, function() {
                    log.info(chest.id + " was removed");
                    game.removeEntity(chest);
                    game.previousClickPosition = {};
                    game.player.removeTarget();
                });
            });
        });*/

        var spawnEntity = function(data, entity)
        {
          var id = data[0];
          if(id === game.playerId)
            return;

          entity.setPosition(data[5], data[6]);
          var orientation = data[7];
          entity.level = parseInt(data[8]);
          if (data.length > 10 && !(entity instanceof Block)) {
            entity.setHP(parseInt(data[9]));
            entity.setMaxHP(parseInt(data[10]));
          }

          if(entity.type === Types.EntityTypes.PLAYER)
          {
              //entity.setClass(parseInt(data[11]));
              entity.sprites[0] = parseInt(data[12]); // Main sprite.
              entity.sprites[1] = parseInt(data[13]);
              entity.armorColor = '#'+data[14];
              entity.weaponColor = '#'+data[15];
          }
          if (entity.type === Types.EntityTypes.NODE)
          {
            //entity.level = data[10];
            entity.name = data[3];
            entity.isDying = entity.isDead = false;
            var spriteName = data[9];
            var animName = data[10];
            entity.weaponType = data[11];
            entity.setSprite(game.sprites[spriteName]);
            entity.animate(animName, entity.idleSpeed);
          }

          if (entity instanceof Mob)
          {
            var spriteName = entity.getSpriteName();
            entity.name = spriteName;
            entity.setSprite(game.sprites[spriteName]);
          }
          else if (entity instanceof Player)
          {
            entity.setArmorSprite();
            entity.setWeaponSprite();

            //entity.setWeaponSpriteId(entity.sprites[0]);
            //entity.setArmorSpriteId(entity.sprites[1]);
          }
          else if (entity instanceof Block)
          {
            var nameData = data[3].split("-");
            var spriteName = "block-"+entity.kind;
            entity.setSprite(game.sprites[spriteName]);
            entity.animate(nameData[1], entity.idleSpeed);
          }
          else if (entity.type == Types.EntityTypes.TRAP)
          {
            var spriteName = "trap-"+entity.kind;
            entity.setSprite(game.sprites[spriteName]);

            var animName = (spriteId == 0) ? "off" : "on";
            entity.animate(animName, entity.idleSpeed);

          }
          else if (entity instanceof NpcStatic)
          {
              var uid = NpcData.Kinds[entity.kind].uid;
              entity.setSprite(game.sprites[uid]);
          }
          else if (entity instanceof NpcMove)
          {
              var uid = "npc"+(1+(~~(entity.kind/8)%4))+"_"+(1+(entity.kind%8));
              entity.setSprite(game.sprites[uid]);
              entity.questId = data[8];
          }

          if (entity instanceof EntityMoving && !(entity instanceof Block)) {
              entity.setOrientation(orientation);
              entity.idle(orientation);
          }

          game.addEntity(entity);
          //game.updateCameraEntity(entity.id, entity);

          var entityName = entity.name;
          //if (entity instanceof Mob)
          //  entityName = MobData.Kinds[entity.kind].name;

          if (entity instanceof NpcStatic)
            entityName = NpcData.Kinds[entity.kind].uid;
          else if (entity instanceof Item)
            entityName = ItemTypes.KindData[entity.kind].name;

          log.debug("Spawned " + entityName + " (" + entity.id + ") at "+entity.x+", "+entity.y);

          if (entity instanceof Character)
          {
            entity.onBeforeStep(function() {
            });

            entity.onStep(function() {
            });

            entity.onStopPathing(function(x, y) {
            });

            entity.onRequestPath(function(x, y) {
                var include = [];
                var ignored = [entity], // Always ignore self
                    ignoreTarget = function(target) {
                        ignored.push(target);
                    };

                if(entity.hasTarget()) {
                    ignoreTarget(entity.target);
                } else if(entity.previousTarget) {
                    ignoreTarget(entity.previousTarget);
                }

                var path = game.findPath(entity, x, y, ignored, include);
                if (!game.pathfinder.checkValidPath(path))
                {
                  try { throw new Error(); } catch(err) { console.error("invalidpath: "+JSON.stringify(path)); }
                }
                return path;
            });

            entity.onHasMoved(function(entity) {
            });
          }

          if(entity instanceof Character || entity.type === Types.EntityTypes.NODE)
          {
              entity.isDead = false;
              entity.isDying = false;

              entity.onRemove(function () {
                var p = game.player;
                if(p.target === entity) {
                    p.disengage();
                }

                log.info(entity.id + " was removed");

                entity.isDead = true;
                game.removeEntity(entity);
              });

              entity.onDeath(function() {
                var p = game.player;

                if (entity == p)
                  return;

                p.targetIndex = 0;
                log.info(entity.id + " is dead");

                if(p.target === entity) {
                    p.disengage();
                }

                entity.isDying = true;
                entity.forceStop();
                entity.freeze = true;
                entity.setSprite(game.sprites["death"]);
                entity.animate("death", 150, 1, function() {
                    log.info(entity.id + " was removed");

                    entity.isDead = true;
                    game.removeEntity(entity);
                });

                if(game.camera.isVisible(entity, 0)) {
                    game.audioManager.playSound("kill"+Math.floor(Math.random()*2+1));
                }

                game.updateCursor();
              });


            }
        };

        client.onSpawnCharacter(function(data, entity) {
            spawnEntity(data, entity);
        });

        // data - entityId, x, y, mapIndex
        client.onDespawnEntity(function(data) {
            if (game.mapIndex != data[1])
              return;

          var entity = game.getEntityById(data[0]);
            if(entity) {
              var entityName;

              if (entity instanceof Mob)
                entityName = MobData.Kinds[entity.kind].name;
              else if (entity instanceof NpcStatic || entity instanceof NpcMove)
                entityName = NpcData.Kinds[entity.kind].name;
              else if (entity instanceof Item)
              {
                  if (ItemTypes.isLootItem(entity.kind))
                    entityName = ItemLoot[entity.kind-1000].name;
                  else
                    entityName = ItemTypes.KindData[entity.kind].name;
              }
              log.info("Despawned " + entityName + " (" + entity.id + ") at "+entity.x+", "+entity.y);

              if(entity instanceof Item) {
                  game.removeItem(entity);
              } else if(entity instanceof Character) {
                  entity.die();
              } else if(entity instanceof Chest) {
                  entity.open();
              } else if(entity instanceof Block) {
                game.removeEntity(entity);
              } else if (entity.type == Types.EntityTypes.TRAP) {
                game.removeEntity(entity);
              } else if (entity.type == Types.EntityTypes.NODE) {
                game.removeEntity(entity);
              }
              entity.clean();
            }
        });

        // data - time, mapIndex, entityId, orientation, state, moveSpeed, x, y.
        client.onEntityMove(function(data)
        {
            var time = parseInt(data[0]),
                map = parseInt(data[1]),
                id = parseInt(data[2]),
                orientation = parseInt(data[3]),
                state = parseInt(data[4]),
                moveSpeed = parseInt(data[5]),
                x = parseInt(data[6]),
                y = parseInt(data[7]);

            if (game.mapStatus < 2 || game.mapIndex != map ||
                map != game.player.mapIndex)
              return;

            //var lockStepTime = (G_LATENCY - (getWorldTime()-time)).clamp(0,G_LATENCY);
            //console.warn("lockStepTime="+lockStepTime);
            //var entity = null;
            //if(id === game.player.id)
              //return;

            var entity = game.getEntityById(id);
            if (!entity)
            {
              log.info("UNKNOWN ENTITY")
              game.unknownEntities.push(id);
              return;
            }
            if(entity.isDying || entity.isDead)
            {
              log.info("ENTITY DYING OR DEAD CANT MOVE")
              return;
            }

            if (entity == game.player)
            {
              var p = entity;
              if(!p || p.isDying || p.isDead)
                return;

              if (!(p.x==x && p.y==y))
              {
                console.warn("PLAYER NOT IN CORRECT POSITION.");
                log.info("p.x="+p.x+",x="+x+"p.y="+p.y+",y="+y);

                p.forceStop();
                p.setPositionGrid(x,y);
                game.player.user.client.sendSyncTime();
                //game.mapContainer.moveGrid();
                game.renderer.forceRedraw;
              }
              return;
            }

            entity.setMoveRate(moveSpeed);
            if (state)
              entity.move(time, orientation, false, x, y);
            entity.move(time, orientation, state, x, y);
        });

        // time, mapIndex, entityId, orientation, interrupted, moveSpeed, path.
        client.onEntityMovePath(function(data)
        {
            var time = parseInt(data[0]),
              map = parseInt(data[1]),
              id = parseInt(data[2]),
              orientation = parseInt(data[3]),
              interrupted = (data[4] ? true : false),
              moveSpeed = parseInt(data[5]);

            var path = data.splice(6, data.length-6);

            if (game.mapStatus < 2 || game.mapIndex != map ||
                map != game.player.mapIndex)
              return;

            var entity = null;

            if(id === game.player.id) return;

            entity = game.getEntityById(id);

            if (!entity)
            {
              game.unknownEntities.push(id);
              return;
            }

            if(entity.isDying || entity.isDead)
              return;

            if (entity == game.player)
              return;

            var lockStepTime = (G_LATENCY - (getWorldTime()-time) + G_UPDATE_INTERVAL);
            lockStepTime = lockStepTime.clamp(0,G_LATENCY);
            //console.warn("lockStepTime="+lockStepTime);
            //console.warn("getDiffTime(time):"+(Date.now() - time));
            //console.warn("recv - lockStepTime="+lockStepTime);

            entity.forceStop();
            entity.setPosition(path[0][0], path[0][1]);
            entity.orientation = orientation;

            var movePathFunc = function () {
              if (entity.isDying || entity.isDead) {
                entity.forceStop();
                return;
              }

              if (path.length < 2)
                 return;

              if (moveSpeed)
              {
                entity.setMoveRate(moveSpeed);
              }

              entity.movePath(path,orientation);
            };

            if (lockStepTime == 0)
              movePathFunc();
            else
              setTimeout(movePathFunc, lockStepTime);
        });

        client.onEntityDestroy(function(data) {
            var id = data[0];
            var entity = game.getEntityById(id);
            if(entity) {
                if(entity instanceof Item) {
                    game.removeItem(entity);
                } else {
                    game.removeEntity(entity);
                }
                log.debug("Entity was destroyed: "+entity.id);
            }
        });

        client.onCharacterDamage(function(data) {
            data.parseInt();

            var sEntity = game.getEntityById(data[0]),
                tEntity = game.getEntityById(data[1]),
                orientation = data[2],
                hpMod = data[3],
                hp = data[4],
                hpMax = data[5],
                epMod = data[6],
                ep = data[7],
                epMax = data[8],
                crit = (data[9] == 1);

            if (!sEntity || !tEntity)
              return;

            client.change_points_callback([tEntity.id,hp,hpMax,hpMod,ep,epMax,epMod,crit]);

            if(hpMod < 0) {
                if (sEntity != game.player) {
                  sEntity.lookAtEntity(tEntity);
                  sEntity.hit(sEntity.orientation);
                }
            }

            if (game.player === sEntity) // sanity
            {
              sEntity.attackTime = game.currentTime;
            }

            /*if (data.length > 10)
            {
              var effects = data.splice(10, data.length);

              $('#targeteffects').empty();
              var effectId = 'targeteffect';

              for (var i=0; i < effects.length; ++i)
              {
                var effect = effects[i];
                var position = SkillData.Ordered[effect].iconOffset;
                $('#targeteffects').append("<div id='targeteffect"+i+"' ></div>");
                if (game.renderer.scale == 2)
                {
                  $('#'+effectId+i).css({
                    'display': 'inline-block',
                    'width': '24px',
                    'height': '24px',
                    'background-image': 'url("img/1/skillicons.png")',
                    'background-position': (-position[0]*24)+"px "+(-position[1]*24)+"px" ,
                    'background-repeat': 'no-repeat'
                  });
                }
                else if (game.renderer.scale == 1)
                {
                  $('#'+effectId+i).css({
                    'display': 'inline-block',
                    'width': '12px',
                    'height': '12px',
                    'background-image': 'url("img/1/skillicons.png")',
                    'background-position': (-position[0]*12)+"px "+(-position[1]*12)+"px" ,
                    'background-repeat': 'no-repeat',
                    'background-size': '180px 168px'
                  });
                }
              }
            }*/

        });
// TODO
        /*client.onPlayerKillMob(function(data) {
          var id = data[0];
          var level = data[1];
          var exp = data[2];

          if (exp > 0)
          {
            game.infoManager.addDamageInfo("+"+exp+" exp", game.player.x, game.player.y, "experience", 3000);
            game.player.level.base = level;
            game.player.exp.base += exp;
            game.updateExpBar();
          }
        });*/

        client.onPlayerStat(function(data) {
            var statType = parseInt(data[0]);
            var statValue = parseInt(data[1]);
            var statChange = parseInt(data[2]);

            if (statType == 1) // exp.base
            {
              game.player.exp.base = statValue;
              game.player.level.base = Types.getLevel(statValue)
              if (statChange > 0) {
                game.infoManager.addDamageInfo("+"+statChange+" exp", game.player.x, game.player.y, "experience", 3000);
              }
              game.updateExpBar();
            }
        });

        client.onPlayerLevelUp(function(data) {
          var type = data[0];
          var level = data[1];
          var exp = data[2];

          var scale = game.renderer.scale;
          var x=game.player.x, y=game.player.y, id=game.player.id;
          if (type==1 && game.player.level.base != level) {
              id="lu"+id+"_"+level;
              var info = new HoveringInfo(id, "Level "+level, x, y, 5000, 'levelUp');
              game.infoManager.addInfo(info);

              game.player.level.base = level;
              return;
          }
          if (type==2 && game.player.level.attack != level) {
            id="lau"+id+"_"+level;
            var info = new HoveringInfo(id, "Attack Level "+level, x, y, 3500, 'minorLevelUp');
            game.infoManager.addInfo(info);

            game.player.level.attack = level;
            return;
          }
          if (type==3 && game.player.level.defense != level) {
            id="ldu"+id+"_"+level;
            var info = new HoveringInfo(id, "Defense Level "+level, x, y, 3500, 'minorLevelUp');
            game.infoManager.addInfo(info);

            game.player.level.defense = level;
            return;
          }

          var types = {
            10: "sword",
            11: "bow",
            12: "hammer",
            13: "axe",
          }

          if (type >= 10) {
            weaponType = types[type];
            var curLevel = Types.getWeaponLevel(game.player.exp[weaponType]);
            if (curLevel != level) {
              id="wu"+id+"_"+level;
              var info = new HoveringInfo(id, weaponType+" Level "+level, x, y, 3500, 'minorLevelUp');
              game.infoManager.addInfo(info);
            }
            game.player.exp[weaponType] = exp
            game.player.level[weaponType] = level;
          }
        });

        client.onPlayerItemLevelUp(function(data) {
          var type = data[0];
          var level = data[1];
          var exp = data[2];

          var x=game.player.x, y=game.player.y, id=game.player.id;
          if (type == 0)
          {
            id="laru"+id+"_"+level;
            var info = new HoveringInfo(id, "Armor Level "+level, x, y, 3500, 'minorLevelUp');
            game.infoManager.addInfo(info);
          }
          else if (type == 1)
          {
            id="lweu"+id+"_"+level;
            var info = new HoveringInfo(id, "Weapon Level "+level, x, y, 3500, 'minorLevelUp');
            game.infoManager.addInfo(info);
          }
        });

        client.onGold(function (data) {
          var gold = parseInt(data[0]);
          var bankgold = parseInt(data[1]);
          var gems = parseInt(data[2]);

          game.player.gold[0] = gold;
          game.player.gold[1] = bankgold;
          game.player.gems = gems;

          game.inventoryHandler.setCurrency(gold, gems);
          game.bankHandler.setGold(bankgold);
        });
/*
        client.onDropItem(function(item) {
            game.addItem(item);
            game.updateCursor();
            game.updateCameraEntity(item.id, item);
        });
*/

        client.onChatMessage(function(data) {
          var entityId = data[0];
          var message = data[1];

          if(!game.chathandler.processReceiveMessage(entityId, message)) {
                var entity = game.getEntityById(entityId);
                if (entity)
                {
                  if (game.camera.isVisible(entity))
                    game.bubbleManager.create(entity, message);

                  game.chathandler.addNormalChat(entity, message);
                }
          }
          game.audioManager.playSound("chat");
        });

// TODO - Try and reconnect on dc.
        client.onDisconnected(function(message) {
            if(game.player) {
                game.player.die();
            }
            if(game.disconnect_callback) {
                game.disconnect_callback(message);
            }
            for(var index = 0; index < game.dialogs.length; index++) {
                game.dialogs[index].hide();
            }
        });

        var questSpeech = function (quest) {
          var npc = game.getNpcByQuestId(quest.npcQuestId);
          if (!npc)
            return;

          var p = game.player;
          var desc = quest.desc;

          if (!Array.isArray(quest.desc))
            desc = [[0, quest.desc]];

          npc.dialogue = desc;
          npc.dialogueIndex = 0;
          npc.quest = quest;

          p.dialogueEntity = npc;

          game.showDialogue();
        };

        client.onQuest(function(data){
            data.parseInt();
            var questId = data[0];
            var quest = game.player.quests[questId];
            if (!quest)
            {
              quest = new Quest(data);
              game.player.quests[questId] = quest;
            }
            else {
               //if (quest.status != QuestStatus.COMPLETE)
                quest.update(data);
            }

            var npc = game.getNpcByQuestId(quest.npcQuestId);
            if (npc)
              game.bubbleManager.destroyBubble(npc.id);

            if (npc && game.player.canInteract(npc)) {
              questSpeech(quest);
            }

            if (quest.status == 0) {
              game.questhandler.handleQuest(quest);
            }

            //if (quest.status > 0)
              //game.questhandler.handleQuest(quest);

            if (quest.status == QuestStatus.COMPLETE) {
              if (quest.type == QuestType.KILLMOBKIND || quest.type == QuestType.KILLMOBS)
                game.questhandler.handleQuest(quest);
              //delete quest;
            }
        });

        client.onAchievement(function (data) {
          data.parseInt();
          var achievementId = data[0];
          var achievement = new Achievement(data);
          game.player.achievements[achievementId] = achievement;
          game.achievementHandler.handleAchievement(achievement);
        });

        client.onItemSlot(function(data){
          data.parseInt();
          var type = data.shift();
          var count = data.shift();
          var items = [];
          var t = 0;
          for (var i=0; i < count; ++i)
          {
            var slot = parseInt(data[t]);
            var kind = parseInt(data[t+1]);
            if (kind == -1) {
              items.push({slot:slot,itemKind:-1});
              t += 2;
              continue;
            }
            var itemRoom = new ItemRoom(
              parseInt(slot),
              parseInt(kind),
              parseInt(data[t+2]),
              parseInt(data[t+3]),
              parseInt(data[t+4]),
              parseInt(data[t+5]),
            );
            t += 6;
            items.push(itemRoom);
          }
          if (type == 0) {
            game.inventoryHandler.setInventory(items);
            game.shortcuts.refresh();
          }
          else if (type == 1) {
            game.bankHandler.setBank(items);
            if (game.bankDialog.visible)
              game.bankDialog.bankFrame.open(game.bankDialog.bankFrame.page);
          }
          if (type == 2) {
            game.equipmentHandler.setEquipment(items);
          }
        });

        client.onDialogue(function (data) {
          var npcId = data.shift();
          var langCode = data.shift();

          var npc = game.getEntityById(npcId);
          var p = game.player;

          // Needs to do a deep copy so lang data does not get overwritten.
          var message = JSON.parse(JSON.stringify(lang.data[langCode]));
          if (data.length > 0) {
            if (Array.isArray(message)) {
              for (var msg of message)
              {
                msg[1] = msg[1].format(data);
              }
              /*for (var i=0; i < message.length; ++i) {
                var tmp = message[i][1].format(data);
                message[i][1] = tmp;
              }*/
            }
            else {
              message[1] = message[1].format(data);
            }
          }

          npc.dialogue = message;
          npc.dialogueIndex = 0;

          p.dialogueEntity = npc;

          game.showDialogue();
        });

        client.onNotify(function(data){
          game.showNotification(data);
        });

        client.onStatInfo(function(datas) {
          datas.parseInt();
          var stats = {
            attack: datas[0],
            defense: datas[1],
            health: datas[2],
            energy: datas[3],
            luck: datas[4],
            free: datas[5],
          };
          game.player.stats = stats;
          game.statDialog.update();
        });

        /*client.onShop(function(message){
        });*/

        client.onAuction(function(message){
            var type = message.shift();
            var itemCount = message.shift();

            /*if (!itemCount || itemCount == 0) {
              return;
            }*/

            var itemData = [];

            for (var i = 0; i < itemCount; ++i)
            {
                /*var index = message[j];
                var status = message[j+1];
                if (status == -1)
                {

                }*/
                j = (i*9);
                itemData.push({
                    index: message[j],
                    player: message[j+1],
                    buy: message[j+2],
                    item: new ItemRoom (
                      message[j+3],
                      message[j+4],
                      message[j+5],
                      message[j+6],
                      message[j+7],
                      message[j+8])
                });
            }
            // TODO - Check if this is correct.
            //if (itemData.length > 0 && type >= 2)
            //{
              curPage = game.auctionDialog.storeFrame.getActivePage();
              var page = game.auctionDialog.storeFrame.pages[type];
              if (curPage === page) {
                page.setPageIndex(0);
                page.setItems(itemData);
                page.reload();
              }
            /*}
            else
            {
              var page = game.auctionDialog.storeFrame.pages[0];
              page.setPageIndex(0);
              page.setItems(itemData);
              page.reload();
            }

            var page = game.auctionDialog.storeFrame.pages[type];
            page.setItems(itemData);
            page.setPageIndex(type);
            page.reload();*/

        });

        client.onSkillLoad(function(datas) {
            var skillIndex = datas[0];
            var skillExp = datas[1];

            skillLevel = Types.getSkillLevel(skillExp);
            game.player.skillHandler.setSkill(skillIndex, skillExp);
            game.skillsDialog.page.setSkill(skillIndex, skillLevel);
        });

        client.onSkillXP(function(data) {
            data.parseInt();
            var skillCount = message.shift();

            if (skillCount == 0)
              return;

            for (var i = 0; i < skillCount; ++i)
            {
              game.player.skillHandler.setSkill(message[i*2],message[i*2+1]);
            }
        });

        client.onSkillEffects(function(data){
            var id = data.shift();
            entity = game.getEntityById(id);
            if (!entity) return;

            var effects = entity.effects = data;

            var htmlEffects;
            var effectId;
            if (game.player == entity)
            {
              htmlEffects = $('#playereffects');
              effectId = "playereffect";
            }
            else if (entity == game.player.target)
            {
              htmlEffects = $('#targeteffects');
              effectId = "targeteffect";
            }
            if (htmlEffects)
              htmlEffects.empty();

            var s = game.renderer.scale;
            if (effects)
            {
              for (var i=0; i < effects.length; ++i)
              {
                var effect = effects[i];
                var position = SkillData.Ordered[effect].iconOffset;
                htmlEffects.append("<div id='"+(effectId + i)+"' ></div>");

                $('#'+effectId+i).css({
                  'display': 'inline-block',
                  'width': (12*s)+'px',
                  'height': (12*s)+'px',
                  'background-image': 'url("img/1/skillicons.png")',
                  'background-position': (-position[0]*12*s)+"px "+(-position[1]*12*s)+"px" ,
                  'background-repeat': 'no-repeat'
                });
                if (s == 1)
                {
                  $('#'+effectId+i).css({
                    'background-size': '180px 168px'
                  });
                }
              }
            }
        });

        client.onSpeech(function (id, key, value) {
          var entity = game.getEntityById(id);
          if (!entity) return;

          var msg = "";
          if (entity instanceof Mob)
            msg = MobSpeech.Speech[key][value];
          else {
            // TODO
          }
          game.createBubble(entity, msg);
        });

        client.onMapStatus(function (mapId, status)
        {
          log.info("mapStatus="+mapId+","+status);
          game.mapIndex = parseInt(mapId);
          game.mapStatus = parseInt(status);
        });

        client.onSetSprite(function (data)
        {

          var entity = game.getEntityById(parseInt(data[0]));
          if (!entity) return;

          if (entity instanceof Player)
          {
            entity.sprites[0] = parseInt(data[1]);
            entity.sprites[1] = parseInt(data[2]);

            entity.setArmorSprite();
            entity.setWeaponSprite();
          } else {
            entity.setSprite(game.sprites[data[1]]);
          }

        });

        client.onSetAnimation(function (data)
        {

          var entity = game.getEntityById(parseInt(data[0]));
          if (!entity) return;

          // TODO - Not yet implemented.
        });

        client.onProducts(function(data) {
          game.products = data;
        });

        client.onSwapSprite(function (data) {
          var entityId = parseInt(data[0]);
          var spriteId = parseInt(data[1]);
          var animId = parseInt(data[2]);

          var entity = game.getEntityById(entityId);
          switch (entity.type) {
            case Types.EntityTypes.TRAP:
              var spriteName = "trap-"+spriteId;
              entity.setSprite(game.sprites[spriteName]);
              var animName = (spriteId == 0) ? "off" : "on";
              entity.animate(animName, entity.idleSpeed);
              break;
          }
        });

        client.onAppearance(function (data) {
          game.appearanceDialog.assign(data);
        });

        client.onBlockModify(function (data) {
          var entityId = parseInt(data[0]);
          var type = parseInt(data[1]);
          var blockId = parseInt(data[2]);


          var entity = game.getEntityById(entityId);
          var block = game.getEntityById(blockId);
          if (!entity || !block)
            return;

          if (type === 0) {
            block.pickup(entity);
          }
          else if (type === 1) {
            block.place(entity);
            entity.holdingBlock = null;
          }
        });

        var onPlayerChangeHealth = function(player, points, crit) {
            var isRegen = false;
            if (points < 0)
              isRegen = true;

            if (!player || !(player instanceof Player) || player.isDead)
              return;

            player.stats.hp = (player.stats.hp-points).clamp(0, player.stats.hpMax);

            var isHurt = (points <= player.stats.hp);
            if(isHurt && game.playerhurt_callback) {
                game.playerhurt_callback();
            }

            game.updateBars();
            if(player.stats.hp <= 0) {
                player.stats.hp = 0;
                player.die();
            }
        };

        var showDamageInfo = function (points, x, y, crit) {
            //log.info("crit="+crit);
            if(points == 0) {
              game.infoManager.addDamageInfo("miss", x, y - 15, "health");
              return;
            }

            if(points < 0) {
                if (crit > 0) {
                    game.infoManager.addDamageInfo(-points, x, y - 15, "crit", 1500, crit);
                }
                else {
                  game.infoManager.addDamageInfo(-points, x, y - 15, "inflicted");
                }
                game.audioManager.playSound("hurt");
            } else {
                game.infoManager.addDamageInfo(points, x, y - 15, "healed");
            }
        };

        client.onCharacterChangePoints(function (data) {
          data.parseInt();
          var id = data[0];
          var hp = data[1];
          var hpMax = data[2];
          var hpMod = data[3];
          var ep = data[4];
          var epMax = data[5];
          var epMod = data[6];
          var crit = data[7] || 0;

          if (id <= 0)
            return;

          var entity = game.getEntityById(id);
          if (!entity)
            return;

          var stats = entity.stats;
          stats.hp = hp;
          stats.hpMax = hpMax;
          stats.ep = ep;
          stats.epMax = epMax;

          showDamageInfo(hpMod, entity.x, entity.y, crit);

          if (hpMod > hp)
            hpMod += (hp - hpMod);

          if (entity == game.player)
          {
            if (hpMod != 0) {
              game.playerhp_callback(hp, hpMax);
              onPlayerChangeHealth(entity, -hpMod);
            }
            if (epMod != 0) {
              game.playerep_callback(ep, epMax);
            }
            game.updateBars();
          }
          else {
            // DO SOMETHING WITH ENTITY HP/EP ADJUSTMENT.
            if(hp <= 0) {
                entity.stats.hp = 0;
                entity.die();
            }
          }
        });

        client.onParty(function (data) {
          var partyType = data.shift();
          if (partyType == 1) {
            game.socialHandler.setPartyMembers(data);
          }
          if (partyType == 2) {
            var id = data[0];
            var player = game.getEntityById(id);
            game.socialHandler.inviteParty(player);

          }
        });

        client.onLooks(function (data) {
          data = data.parseInt();

          var id = data.shift();
          var p = game.getEntityById(id);
          if (!p)
            return;

          var isArcher = data.shift();

          p.sprites[0] = data.shift();
          p.sprites[1] = data.shift();

          p.setWeaponSprite();
          p.setArmorSprite();

        });

        client.onHarvest(function (data) {
          data = data.parseInt();

          var id = data.shift();
          var p = game.getEntityById(id);
          if (!p)
            return;

          var action = data.shift();

          var x=data.shift(), y=data.shift();

          if (action == 1)
          {
            if (p.fsm != "HARVEST") {
              p.lookAtTile(x, y);
              p.harvestOn();
            }
            if (p == game.player)
              p.harvestDuration = data.shift();

          }
          if (action == 2) {
            p.harvestOff();
          }

        });

        client.onPlayerInfo(function (data) {
          game.statDialog.page.assign(data);
        });

      }
  });

  return ClientCallbacks;

});

/* global Types, Class, _, questSerial */

define('achievementhandler',[], function() {

  var AchievementHandler = Class.extend({
    init: function() {
      this.hideDelay = 5000; //How long the notification shows for.
      this.progressHideDelay = 1000;
      this.showlog = false;

      var self = this;
      this.closeButton = $('#achievementCloseButton');
      this.closeButton.click(function(event) {
        self.toggleShowLog();
      });
    },

    /*achievementAlarmShow: function(str, delay) {
      delay = delay || this.hideDelay;
      $('#questalarm').html(str);
      $('#questalarm').fadeIn();
      setTimeout(function() {
        $('#questalarm').fadeOut();
      }, delay);
    },*/

    toggleShowLog: function() {
      this.showlog = !this.showlog;
      if (this.showlog) {
        this.achievementReloadLog();
        $('#achievementlog').css('display', 'block');
        $('#achievementCloseButton').css('display', 'block');
      } else {
        $('#achievementlog').css('display', 'none');
        $('#achievementCloseButton').css('display', 'none');
      }
    },

    achievementReloadLog: function() {
      $("#achievementLogInfo tbody").find("tr:gt(0)").remove();

      for (var achievement of game.player.achievements) {
        var progress = Number((achievement.count / achievement.objectCount) * 100).toFixed(0)+"%";

        $('#achievementLogInfo tbody').append(
          "<tr id='ad_"+achievement.index+"'>" +
            "<td class='frame-stroke1'>" + achievement.summary + "</td>" +
            "<td class='frame-stroke1'>" + progress + "</td>" +
          "</tr>");
      }
    },

    handleAchievement: function(achievement) {
      var htmlStr = '';

      if (achievement.count == achievement.objectCount) {
        htmlStr = '<p><h2>Achievement Completed</h2></p><p>' + achievement.summary + '</p>';
        game.userAlarm.alarm(htmlStr, this.hideDelay);
      }
      this.achievementReloadLog();
    }
  });
  return AchievementHandler;
});

/* global Types, Class, _, questSerial */

define('useralarm',[], function() {

  var UserAlarm = Class.extend({
    init: function() {
      this.hideDelay = 5000; //How long the notification shows for.

      this.queue = [];
      this.jqAlarm = $('#useralarm');
      this.showing = false;
      this.disabled = false;
    },

    alarmQueue: function(str, delay) {
      var self = this;

      delay = delay || this.hideDelay;

      this.queue.push([str, delay]);

      if (!this.showing)
        this.showQueue();
    },

    hide: function () {
      this.jqAlarm.hide();
      this.disabled = true;
    },

    show: function () {
      this.disabled = false;

      if (!this.showing)
        this.showQueue();
    },

    showQueue: function () {
      var self = this;

      if (this.disabled) {
        setTimeout(function() {
          self.showQueue();
        }, 1000);
        return;
      }

      if (this.queue.length > 0) {
        this.showing = true;
        var msg = this.queue.pop();
        this.jqAlarm.html(msg[0]);
        this.jqAlarm.fadeIn();
        setTimeout(function() {
          self.jqAlarm.fadeOut(1500, function () {
            self.showQueue();
          });
        }, msg[1]);
      }
      else {
        this.showing = false;
      }
    },

    alarm: function(str, delay) {
      this.alarmQueue(str, delay);
    },
  });
  return UserAlarm;
});

define('shortcuthandler',['data/skilldata', 'data/items'], function(SkillData, Items) {
  var Shortcut = Class.extend({
    init: function(parent, slot, type) {
      var self = this;

      this.parent = parent;
      this.slot = slot;
      this.type = type;
      this.shortcutId = -1;
      this.cooldownTime = 0;
      this.jq = $('#shortcut'+slot);
      this.jqb = $('#scbackground'+slot);
      //this.jqCooldown = $('#shortcutCD'+index);
      this.jqnum = $('#shortcutnum'+slot);

      this.jq.data("slot", slot);

      var install = function() {

      };

      this.jq.click(function(e) {
        if (self.type > 0) {
          self.exec();
        }
        else {
          self.setup();
        }
      });
      this.jq.on('drop touchend', function(e) {
        self.setup();
      });
      this.jq.unbind('dragover').bind('dragover', function(event) {
          event.preventDefault();
      });
      /*this.jqb.unbind('dragover').bind('dragover', function(event) {
          event.preventDefault();
      });*/

    },

    setup: function () {
      var slot = this.jq.data("slot");
      // TODO fill.
      if (DragItem) {
        var item = game.inventory.getItem(DragItem.slot);
        if (item) {
          this.install(slot, 1, item.itemKind);
        }
      }
      if (ShortcutData) {
        this.install(slot, 2, ShortcutData.index);
      }
      if (this.shortcutId > -1)
        game.client.sendShortcut(this.slot, this.type, this.shortcutId);
      this.display();
    },

    install: function (slot, type, id) {
      this.slot = slot;
      this.type = type;
      this.shortcutId = id;

      // get cooldown time.

      if (this.type == 1) {
        this.cooldownTime = 5;
      }
      else if (this.type == 2) {
        this.cooldownTime = ~~(SkillData.Data[id].recharge / 1000);
      }
      this.display();
      //game.client.sendShortcut(this.index, this.type, this.shortcutId);
    },

    display: function () {
      if (this.type == 1) {
        var count = game.inventory.getItemTotalCount(this.shortcutId);
        var item = {itemKind: this.shortcutId, itemNumber: count};
        Items.jqShowItem(this.jq, item, this.jq, 1.5);
      }
      else if (this.type == 2) {
        // Temp not Working
        var skill = null;
        SkillData.jqShowSkill(this.jq, this.shortcutId, this.jq);
      }
    },

    exec: function () {
      var children = this.parent.getSameShortcuts(this);
      for (var sc of children) {
        if (sc.cooldown && sc.cooldown.cooltimeCounter > 0)
          return;
      }

      var res = false;
      // display cooldown for all
      if (this.type == 1) {
        var item = game.inventory.getItemByKind(this.shortcutId);
        if (item)
          res = game.useItem(item);
      } else if (this.type == 2) {
        var skill = game.player.skillHandler.skills[this.shortcutId];
        if (skill)
          res = skill.execute();
      }

      if (res)
        this.cooldownStart(this.cooldownTime);

      this.display();
    },

    cooldownStart: function (time) {
      // show cooldown display.
      var children = this.parent.getSameShortcuts(this);
      this.cooldown = new Cooldown(this.parent, this);
      this.cooldown.start(time);
    },

  });

  var Cooldown = Class.extend({
    init: function(parent, shortcut) {
      this.parent = parent;
      this.shortcut = shortcut;
      this.children = this.parent.getSameShortcuts(shortcut);

    },

    start: function (time) {
      var self = this;

      this.cooltimeCounter = time;

      var funcCooldown = function () {
        if (self.cooltimeCounter >= 0) {
          self.tick();
          self.cooltimeCounter -= 1;
        } else {
          self.done();
        }
      };

      clearInterval(this.cooltimeTickHandle);
      this.cooltimeTickHandle = setInterval(funcCooldown, 1000);

      funcCooldown();
      this.children = this.parent.getSameShortcuts(this.shortcut);
      for (var slot of this.children) {
        $('#scCD'+slot.slot).show();
      }
    },

    tick: function () {
      this.children = this.parent.getSameShortcuts(this.shortcut);

      if (this.cooltimeCounter == 0)
        this.done();

      for (var slot of this.children) {
        $('#scCD'+slot.slot).html(this.cooltimeCounter);
      }
    },

    done: function () {
      clearInterval(this.cooltimeTickHandle);
      this.cooltimeTickHandle = null;
      this.cooltimeCounter = 0;

      this.children = this.parent.getSameShortcuts(this.shortcut);

      for (var slot of this.children) {
        $('#scCD'+slot.slot).hide();
      }

      delete this;
    },
  });

  var ShortcutHandler = Class.extend({
    init: function() {
      this.shortcuts = [];
      this.shortcutCount = 8;

      var shortcut;
      for (var i=0; i < this.shortcutCount; ++i) {
        shortcut = new Shortcut(this, i, 0);
        this.shortcuts.push(shortcut);
      }
    },

    installAll: function (arr) {
      var shortcut;
      var i=0;
      for (var sc of arr) {
        if (sc)
          this.shortcuts[sc[0]].install(sc[0], sc[1], sc[2]);
      }
    },

    install: function (slot, type, index) {
      if (this.shortcuts[slot])
        this.shortcuts[slot].install(type, index);
    },

    exec: function (slot) {
      if (this.shortcuts[slot])
        this.shortcuts[slot].exec();
    },

    refresh: function () {
      for (var sc of this.shortcuts) {
        sc.display();
      }
    },

    getSameShortcuts: function (shortcut) {
      var shortcuts = [];
      for (var sc of this.shortcuts) {
        if (sc.type == shortcut.type && sc.shortcutId == shortcut.shortcutId)
        {
          shortcuts.push(sc);
        }
      }
      return shortcuts;
    },

  });

  return ShortcutHandler;
});

define('dialog/statdialog',['./dialog', '../tabpage'], function(Dialog, TabPage) {
    	var StatPage = TabPage.extend({
        init: function(parent) {
            this._super(parent, '#frameStatsPage');
            this.parent = parent;
            var self = this;
            $('#charAddAttack').click(function(e) {
            	game.client.sendAddStat(1, 1);
              self.refreshStats();
            });
            $('#charAddDefense').click(function(e) {
            	game.client.sendAddStat(2, 1);
              self.refreshStats();
            });
            $('#charAddHealth').click(function(e) {
            	game.client.sendAddStat(3, 1);
              self.refreshStats();
            });
            $('#charAddEnergy').click(function(e) {
            	game.client.sendAddStat(4, 1);
              self.refreshStats();
            });
            $('#charAddLuck').click(function(e) {
            	game.client.sendAddStat(5, 1);
              self.refreshStats();
            });
        },

        refreshStats: function () {
            var p = game.player;
            var stats = game.player.stats;
            $('#characterPoints').text("Free Points:\t\t"+stats.free);
            $('#characterAttack').text("Attack:\t\t"+stats.attack);
            $('#characterDefense').text("Defense:\t\t"+stats.defense);
            $('#characterHealth').text("Health:\t\t"+stats.health);
            $('#characterEnergy').text("Energy:\t\t"+stats.energy);
            $('#characterLuck').text("Luck:\t\t"+stats.luck);

            $('#characterBaseCrit').text("Base Crit\t\t"+p.baseCrit());
            $('#characterBaseCritDef').text("Base Crit Def\t\t"+p.baseCritDef());
            $('#characterBaseDamage').html("Base Damage<br/>"+p.baseDamage()[0]+"-"+p.baseDamage()[1]);
            $('#characterBaseDamageDef').html("Base Damage Def<br/>"+p.baseDamageDef()[0]+"-"+p.baseDamageDef()[1]);

            if (stats.free > 0)
            {
            	$('#charAddAttack').css('display','inline-block');
            	$('#charAddDefense').css('display','inline-block');
            	$('#charAddHealth').css('display','inline-block');
            	$('#charAddEnergy').css('display','inline-block');
            	$('#charAddLuck').css('display','inline-block');
            }
        },

        assign: function(data) {
            var weapon, armor,
                width1, height1, width2, height2, width3, height3;
            var self = this;

            if (game.renderer) {
                if (game.renderer.mobile) {
                    this.scale = 1;
                } else {
                    this.scale = game.renderer.getUiScaleFactor();
                }
            } else {
                this.scale = 2;
            }

            data = data.parseInt();

            var p = game.player;
            //p.exp = {};
            p.exp.base = data.shift();
            p.exp.attack = data.shift();
            p.exp.defense = data.shift();
            //p.exp.move = data.shift();
            p.exp.sword = data.shift();
            p.exp.bow = data.shift();
            p.exp.hammer = data.shift();
            p.exp.axe = data.shift();
            p.exp.logging = data.shift();
            p.exp.mining = data.shift();

            this.refreshStats();

            if (game.renderer) {
                if (game.renderer.mobile) {
                    this.scale = 1;
                } else {
                    this.scale = game.renderer.getUiScaleFactor();
                }
            } else {
                this.scale = 2;
            }

            $('#characterName').text("Name\t\t"+p.name);

            var xp = p.exp.sword || 0;
            var lvl = Types.getWeaponLevel(xp);
            var exp = (xp) ? ((xp - Types.weaponExp[lvl-1])/(Types.weaponExp[lvl] - Types.weaponExp[lvl-1]) * 100) : 0;
            $('#characterLevelSword').text("Sword Level\t\t"+lvl+"\t"+exp.toFixed(0)+"%");

            xp = p.exp.bow || 0;
            lvl = Types.getWeaponLevel(xp);
            exp = (xp) ? ((xp - Types.weaponExp[lvl-1])/(Types.weaponExp[lvl] - Types.weaponExp[lvl-1]) * 100) : 0;
            $('#characterLevelBow').text("Bow Level\t\t"+lvl+"\t"+exp.toFixed(0)+"%");

            xp = p.exp.hammer || 0;
            lvl = Types.getWeaponLevel(xp);
            exp = (xp) ? ((xp - Types.weaponExp[lvl-1])/(Types.weaponExp[lvl] - Types.weaponExp[lvl-1]) * 100) : 0;
            $('#characterLevelHammer').text("Hammer Level\t\t"+lvl+"\t"+exp.toFixed(0)+"%");

            xp = p.exp.axe || 0;
            lvl = Types.getWeaponLevel(xp);
            exp = (xp) ? ((xp - Types.weaponExp[lvl-1])/(Types.weaponExp[lvl] - Types.weaponExp[lvl-1]) * 100) : 0;
            $('#characterLevelAxe').text("Axe Level\t\t"+lvl+"\t"+exp.toFixed(0)+"%");

            xp = p.exp.logging || 0;
            lvl = Types.getSkillLevel(xp);
            exp = (xp) ? ((xp - Types.skillExp[lvl-1])/(Types.skillExp[lvl] - Types.skillExp[lvl-1]) * 100) : 0;
            $('#characterLevelLogging').text("Logging Level\t\t"+lvl+"\t"+exp.toFixed(0)+"%");

            xp = p.exp.mining || 0;
            lvl = Types.getSkillLevel(xp);
            exp = (xp) ? ((xp - Types.skillExp[lvl-1])/(Types.skillExp[lvl] - Types.skillExp[lvl-1]) * 100) : 0;
            $('#characterLevelMining').text("Mining Level\t\t"+lvl+"\t"+exp.toFixed(0)+"%");

            p.level.base = Types.getLevel(p.exp.base);
            p.level.attack = Types.getAttackLevel(p.exp.attack);
            p.level.defense = Types.getDefenseLevel(p.exp.defense);

            var expLevel = (p.exp.base) ? ((p.exp.base - Types.expForLevel[p.level.base-1])/(Types.expForLevel[p.level.base] - Types.expForLevel[p.level.base-1]) * 100) : 0;
            var attackExp = (p.exp.attack) ? ((p.exp.attack - Types.attackExp[p.level.attack-1])/(Types.attackExp[p.level.attack] - Types.attackExp[p.level.attack-1]) * 100) : 0;
            var defenseExp = (p.exp.defense) ? ((p.exp.defense - Types.defenseExp[p.level.defense-1])/(Types.defenseExp[p.level.defense] - Types.defenseExp[p.level.defense-1]) * 100) : 0;
            //var moveExp = (p.exp.move) ? ((p.exp.move - Types.moveExp[p.level.move-1])/(Types.moveExp[p.level.move] - Types.moveExp[p.level.move-1]) * 100) : 0;

            $('#characterLevel').text("Level\t\t"+p.level.base+"\t"+expLevel.toFixed(0)+"%");
            $('#characterAttackLevel').text("Attack Level\t\t"+p.level.attack+"\t"+attackExp.toFixed(0)+"%");
            $('#characterDefenseLevel').text("Defense Level\t\t"+p.level.defense+"\t"+defenseExp.toFixed(0)+"%");
            //$('#characterMoveLevel').text("Move Level\t\t"+p.level.move+"\t"+moveExp.toFixed(2)+"%");


        }
    });

    StatDialog = Dialog.extend({
        init: function() {
            this._super(null, '#statsDialog');

            this.addClose();
            this.page = new StatPage(this);
        },

        show: function(index, datas) {
            this._super();
            this.update();
        },

        update: function() {
            game.client.sendPlayerInfo();
            //this.page.assign();
        },

        /*hide: function() {
            this._super();
        }*/
    });

    return StatDialog;
});

define('dialog/skilldialog',['./dialog', '../tabpage', 'data/skilldata'], function(Dialog, TabPage, SkillData) {
    var Skill = Class.extend({
        init: function(parent, i, level, position) {
            var id = this.id = '#characterSkill' + i;
            this.background = $(id);
            this.body = $(id + 'Body');
            this.levels = [];
            this.level = level;
            this.parent = parent;

            this.index = i;

            var data = this.data = SkillData.Data[i];
            log.info(i+" = "+JSON.stringify(data));
            //log.info(JSON.stringify(SkillData.Data));
            //log.info("SkillData.Data[id].name"+SkillData.Data[id].name);
            this.detail = data.detail.replace('[l]',this.level)
            	.replace('[u]', data.baseLevel+data.perLevel*this.level);

            this.position = position;
            this.scale = game.renderer.getUiScaleFactor();

            var self = this;
            var dragStart = false;

            var clickSkill = function (index) {
              //game.selectedSkill = self;
              self.parent.selectedSkill = self;
              self.parent.clearHighlight();
              self.body.css('border', self.scale+"px solid #f00");
              $('#skillDetail').html(self.detail);
              ShortcutData = self; //(ShortcutData ? null : self);
              //ShortcutData.skillIndex = index;
            };

            this.body.data('skillIndex', this.index);

            this.body.bind('dragstart', function(event) {
              clickSkill($(this).data("skillIndex"));
            	log.info("Began DragStart.")
            });

            this.body.on('click tap', function(event){
            	clickSkill($(this).data("skillIndex"));
              event.stopPropagation();
            });

            this.rescale();
        },

        rescale: function () {
          var scale = this.scale = game.renderer.getUiScaleFactor();
          var position = this.position;

          this.body.css({
              'position': 'absolute',
              'left': (scale)+'px',
              'top': (scale)+'px',
              'width': 24 * scale,
              'height': 24 * scale,
              'display': 'none'
          });
          if(position) {
              this.body.css({
                  'background-image': 'url("img/' + scale + '/misc/skillicons.png")',
                  'background-position': (-position[0]*24*scale)+"px "+(-position[1]*24*scale)+"px" ,
                  'background-size': (360 * scale) + "px " + (336 * scale) + "px",
                  'display': 'block',
                  'border': scale+"px solid #000"
              });
          }

        },

        getName: function() {
            return this.name;
        },
        getLevel: function() {
            return this.level;
        },
        setLevel: function(value) {
            this.level = value;
            if(value > 0) {
                this.body.css('display', 'inline');
                if (this.body[0])
                    this.body[0].draggable = true;
            } else {
                this.body.css('display', 'none');
                if (this.body[0])
                    this.body[0].draggable = false;
            }
        }
    });

    var SkillPage = TabPage.extend({
        init: function(parent) {
            this._super(parent, '#frameSkillsPage');
            this.skills = [];
            this.selectedSkill = null;
            var self = this;
        },

        setSkills: function(skillExps) {
      		for (var i=0; i < skillExps.length; ++i)
      		{
            this.skills[i] = {level: Types.getSkillLevel(skillExps[i]), skill: null};
      		}
          this.assign();
        },
        setSkill: function(index, level) {
          this.skills[index] = {level: level, skill: null};
        },

        clear: function() {
            var scale = game.renderer.getUiScaleFactor();
            for (var i = this.skills.length-1; i >= 0; --i)
            {
                var tSkill = this.skills[i];
                //log.info("tSkill="+JSON.stringify(tSkill));
                if(tSkill.skill) {
                    tSkill.skill.background.css({
                        //'display': 'none'
                        'background-image': 'url("../img/'+scale+'/misc/itembackground.png")',
                    });
                    $('#characterSkill' + i).attr('title', '');
                    $('#characterSkill' + i).html();
                    tSkill.level = 0;
                }
            }
            this.skills.splice(0, this.skills.length);
        },

        rescale: function() {
          for(var i = 0; i < this.skills.length; ++i) {
              var skill = this.skills[i].skill;
              skill.rescale();
          }
        },

        assign: function() {
            //SendNative(["PlayerSkills"].concat(this.skills));
            var scale = game.renderer.getUiScaleFactor();
            for(var i = 0; i < this.skills.length; ++i) {
                var tSkill = this.skills[i];
                var data = SkillData.Data[i];
                if(tSkill) {
                    log.info('#characterSkill1' + i);
                    var skill = new Skill(this, i, tSkill.level,
                        data.iconOffset);
                    skill.background.css({
                        'position': 'absolute',
                        'left': ((i % 6) * 26) * scale + 'px',
                        'top': ((6+(14*scale)) + (Math.floor(i / 6) * 26)) * scale + 'px',
                        'width': (24*scale)+'px',
                        'height': (24*scale)+'px',
                        'display': 'block'
                    });
                    this.skills[i].skill = skill;
                    //log.info("this.skills[id].skill="+JSON.stringify(this.skills[id].skill));
                    $('#characterSkill' + i).attr('title', data.name + " Lv: " + tSkill.level);
                    $('#characterSkill' + i + 'Body').css({
                        'text-align': 'center',
                        'color': '#fff',
                        'line-height': (18*scale)+'px',
                        'font-size': (6*scale)+'px',
                        'font-weight': 'bold'
                    });
                    $('#characterSkill' + i + 'Body').html("Lv "+tSkill.level);
                    skill.setLevel(tSkill.level);
                }
            }
        },

        clearHighlight: function() {
        	for(var i = 0; i < this.skills.length; ++i)
          {
        		if (this.skills[i].skill)
        			this.skills[i].skill.body.css('border',"3px solid black");
          }
        }
    });

    SkillDialog = Dialog.extend({
        init: function() {
            this._super(null, '#skillsDialog');
            //this.frame = new Frame(this, game);
            this.addClose();
            this.page = new SkillPage(this);

            ShortcutData = null;

            $('#skillsCloseButton').add('#skillsDialog').add('#game').on('click tap', function(event){
              if (ShortcutData)
                ShortcutData.parent.clearHighlight();
            	ShortcutData = null;
            });
        },

        show: function() {
            this._super();
            this.page.rescale();
        },

        update: function(datas) {
            this.page.update(datas);
        },
    });

    return SkillDialog;
});

define('dialog/confirmdialog',['./dialog'], function(Dialog) {

    var ConfirmDialog = Dialog.extend({
        init: function() {
            this._super(game, '#dialogModalConfirm');
            this.setScale();

            this.modalParent = $('#dialogModal');
            this.modal = $('#dialogModalConfirm');

            this.modalConfirmMessage = $('#dialogModalConfirmMessage');
            this.modalConfirmButton1 = $('#dialogModalConfirmButton1');
            this.modalConfirmButton2 = $('#dialogModalConfirmButton2');

            this.confirmCallback = null;
            this.scale=this.setScale();

            var self = this;

            this.modalConfirmButton1.click(function(event) {
                self.hide();

                if(self.confirmCallback) {
                    self.confirmCallback(true);
                }
            });
            this.modalConfirmButton2.click(function(event) {
                self.hide();

                if(self.confirmCallback) {
                    self.confirmCallback(false);
                }
            });
        },

        setScale: function() {
          this.scale = game.renderer.getUiScaleFactor();
        },

        rescale: function() {
        	this.setScale();
        },

        show: function() {
            this.rescale();
            this.modalParent.css('display', 'block');
            this.modal.css('display', 'block');
            this._super();
        },

        hide: function() {
            this.modalParent.css('display', 'none');
            this.modal.css('display', 'none');
            this._super();
        },

        confirm: function(message, callback) {
            this.confirmCallback = callback;

            this.modalConfirmMessage.text(message);
            this.show();
        },
    });

    return ConfirmDialog;
});

define('dialog/notifydialog',['./dialog'], function(Dialog) {
    var NotifyDialog = Dialog.extend({
        init: function() {
            this._super(game, '#dialogModalNotify');
            this.setScale();

            this.modalParent = $('#dialogModal');
            this.modal = $('#dialogModalNotify');

            this.modalNotifyMessage = $('#dialogModalNotifyMessage');
            this.modalNotifyButton1 = $('#dialogModalNotifyButton1');

            this.notifyCallback = null;
            this.scale=this.setScale();

            var self = this;

            this.modalNotifyButton1.click(function(event) {
                self.hide();

                if(self.notifyCallback) {
                    self.notifyCallback();
                }
            });
        },

        setScale: function() {
          this.scale = game.renderer.getUiScaleFactor();
        },

        rescale: function() {
        	this.setScale();
        },

        show: function() {
            this.rescale();
            this.modalParent.css('display', 'block');
            this.modal.css('display', 'block');
            this._super();
        },

        hide: function() {
            this.modalParent.css('display', 'none');
            this.modal.css('display', 'none');
            this._super();
        },

        notify: function(message, callback) {
            this.notifyCallback = callback;

            this.modalNotifyMessage.text(message);
            this.show();
        },

    });

    return NotifyDialog;
});

define('dialog/craftdialog',['./dialog', '../tabbook', '../tabpage', '../entity/item', '../inventorystore', '../pageNavigator', 'data/items'],
  function(Dialog, TabBook, TabPage, Item, InventoryStore, PageNavigator, Items) {

    var SCALE = 3;
    function setScale(scale) {
    	    SCALE = scale;
    }

    var StoreRack = Class.extend({
        init: function(parent, id, index) {
            this.parent = parent;
            this.id = id;
            this.index = index;
            this.body = $(id);
            this.basketBackground = $(id + 'BasketBackground');
            this.basket = $(id + 'Basket');
            this.extra = $(id + 'Extra');
            this.price = $(id + 'Price');
            this.buyButton = $(id + 'BuyButton');
            this.item = null;

            this.rescale();

            this.buyButton.text('Craft');

            var self = this;
        },

        rescale: function() {
            var scale = this.parent.scale;
            var id = this.id;
            this.body = $(id);
          	if (scale == 1)
          	{
              this.body.css({
      	        'position': 'absolute',
      	        'left': '0px',
      	        'top': '' + (this.index * 20) + 'px'
      		    });
            }
            else if (scale == 2) {
              this.body.css({
                'position': 'absolute',
                'left': '0px',
                'top': '' + (this.index * 40) + 'px'
              });
            }
            else if (scale == 3) {
              this.body.css({
                'position': 'absolute',
                'left': '0px',
                'top': '' + (this.index * 60) + 'px'
              });
            }
            if (this.item) {
            	     this.assign(this.item);
            }
        },

        getVisible: function() {
            return this.body.css('display') === 'block';
        },
        setVisible: function(value) {
            var self = this;

            this.body.css('display', value ? 'block' : 'none');
            this.buyButton.text('Craft');
            if (value)
            {
              this.buyButton.off().on('click', function(event) {
                  var noItems = false;
                  for (var it of self.item.craft.i) {
                    if (!game.inventoryHandler.hasItems(it[0],it[1])) {
                      game.showNotification(["CHAT", "SHOP_MISSINGITEMS", it[1], ItemTypes.getData(it[0]).name]);
                      noItems = true;
                    }
                  }
                  if (noItems) {
                    game.showNotification(["SHOP", "SHOP_NOCRAFTITEMS"]);
                    return;
                  }
                  if (self.item.craftPrice > game.player.gold[0]) {
                      game.showNotification(["SHOP", "SHOP_NOGOLD"]);
                      return;
                  }
                  if(game && game.ready) {
                      game.client.sendStoreCraft(parseInt(self.item.craft.id), 1);
                  }
                  event.stopPropagation();
              });
            }
        },

        assign: function(item) {
            this.item = item;
            Items.jqShowItem(this.basket, this.item, this.basket);

            var itemRoom = new ItemRoom(0, item.kind, 1, 900,900, 0);
            var itemDesc = Item.getInfoMsgEx(itemRoom);
            var itemName = ItemTypes.getName(item.kind);
            this.basket.attr('title', itemDesc);
            if (ItemTypes.isConsumableItem(item.kind)) {
              this.basket.text('');
            } else {
              //this.basket.text(ItemTypes.getLevelByKind(item.kind) +"+1");
              this.extra.text(itemName);
            }

            var i=0;
            var html="<span class='craftBecomes'>&lt;&lt;&nbsp;</span><div class='craftReqs'>";
            for (var it of item.craft.i) {
              it.name = "craft_"+item.kind+"_"+i;
              html += "<div class='craftitem'><div id='"+it.name+"'></div></div>";
              i++;
            }
            this.extra.html(html+"</div>");

            for (var it of item.craft.i) {
              var itemData = {itemKind: it[0], itemNumber: it[1]};
              Items.jqShowItem($('#'+it.name), itemData, $('#'+it.name));
            }

            this.price.text(getGoldShortHand(item.craftPrice));
        }
    });

    var StorePage = TabPage.extend({
        init: function(parent, id, itemType, items, scale, buttonIndex) {
            this._super(parent, id + 'Page', id + buttonIndex + 'Button');
            this.itemType = itemType;
            this.racks = [];
            this.items = items;
            this.scale = scale;
            this.pageIndex = 0;

            this.parent = parent;
            this.rackRows = 5;

            for(var index = 0; index < this.rackRows; index++) {
                this.racks.push(new StoreRack(this, id + index, index));
            }
        },

        rescale: function (scale) {
            this.scale = scale;
            for(var index = 0; index < this.rackRows; index++) {
                this.racks[index].rescale();
            }
        },

        getPageCount: function() {
            if (!this.items) return 0;
            log.info("this.items.length="+this.items.length);
            return Math.ceil(this.items.length / this.rackRows);
        },

        getPageIndex: function() {
            return this.pageIndex;
        },

        setPageIndex: function(value) {
            this.pageIndex = value;
            this.open(this.parent.minLevel,this.parent.maxLevel);
            this.reload();
        },

        open: function(min,max) {
            this.items = ItemTypes.Store.getItems(this.itemType, min, max);
            log.info(JSON.stringify(this.items));

            var cond = function (item) { return true; };
        		if (this.itemType==2)
                cond = function (item) { return ItemTypes.isArmor(item.kind); }
        		if (this.itemType==3)
                cond = function (item) { return ItemTypes.isWeapon(item.kind); }

            var i=this.items.length;
            while (--i >= 0)
            {
          	    var item = this.items[i];
                if (!cond(item))
          	    	this.items.splice(this.items.indexOf(item),1);
          	    if (item.craft.length == 0)
          	    	this.items.splice(this.items.indexOf(item),1);
                else if (item.craft.length == 1) {
                  item.craft = item.craft[0];
                }
                else {
                  for (var j=0; j < item.craft.length; j++) {
                    var newItem = Object.assign({}, item);
                    newItem = item.craft[j];
                    this.items.push(newItem);
                  }
                }
            }
            log.info("this.items="+JSON.stringify(this.items));
            //this.setPageIndex(0);
            this.reload();
        },

        reload: function() {
            this.clear();

            var len = Math.min((this.pageIndex + 1) * this.rackRows, this.items.length);
            for(var index = this.pageIndex * this.rackRows; index < len; index++) {
                var rack = this.racks[index - (this.pageIndex * this.rackRows)];

                rack.assign(this.items[index]);
                rack.setVisible(true);
            }
        },

        clear: function () {
          for(var index = 0; index < this.rackRows; index++) {
              var rack = this.racks[index];
              rack.setVisible(false);
          }
        },

        close: function () {
          this.clear();
          this.setVisible(false);
        }

    });

    var StoreMiscPage = StorePage.extend({
        init: function(parent, scale) {
            this._super(parent, '#craftDialogStore', 4,
            	    null, scale, 0);
        }
    });

    var StoreArmorPage = StorePage.extend({
        init: function(parent, scale) {
            this._super(parent, '#craftDialogStore', 2,
            	    null, scale, 1);
        }
    });

    var StoreWeaponPage = StorePage.extend({
        init: function(parent, scale) {
            this._super(parent, '#craftDialogStore', 3,
            	    null, scale, 2);
        }
    });

    var StoreFrame = TabBook.extend({
        init: function(parent) {
            this._super('#craftDialogStore');

            this.parent = parent;
            this.scale = this.parent.scale;
            this.pagePotion = new StoreMiscPage(this, this.scale);
            this.pageArmor = new StoreArmorPage(this, this.scale);
            this.pageWeapon = new StoreWeaponPage(this, this.scale);

            this.add(this.pagePotion);
            this.add(this.pageArmor);
            this.add(this.pageWeapon);

            this.pageNavigator = new PageNavigator(parent.scale, "craft");
            this.pageNavigator.onChange(function(sender) {
                var activePage = self.getActivePage();
                if(activePage && game.craftDialog.visible) {
                    log.info("self.parent.game.craftDialog.visible");
                    activePage.setPageIndex(sender.getIndex() - 1);
                    //activePage.reload();
                }

            });

            var self = this;

            this.minLevel = 1;
            this.maxLevel = 100;
        },

        rescale: function() {
        	this.scale = this.parent.scale;
        	this.pagePotion.rescale(this.scale);
        	this.pageArmor.rescale(this.scale);
        	this.pageWeapon.rescale(this.scale);

        	this.pageNavigator.rescale(this.scale);
        },

        setPageIndex: function(value) {
            if (!game.craftDialog.visible)
            {
            	    return;
            }
            this.pages[value].open(this.minLevel, this.maxLevel);

            this._super(value);

            var activePage = this.getActivePage();

            if(activePage) {
                if(activePage.getPageCount() > 1) {
                    //log.info("activePage.getPageCount()="+activePage.getPageCount());
                    this.pageNavigator.setCount(activePage.getPageCount());
                    this.pageNavigator.setIndex(activePage.getPageIndex() + 1);
                    this.pageNavigator.open();
                    this.pageNavigator.setVisible(true);
                }
                else {
                  this.pageNavigator.setVisible(false);
                }
                activePage.reload();
            }
        },

        open: function(min,max) {
            var self = this;

            this.minLevel = min;
            this.maxLevel = max;

            //for(var index = 0; index < this.pages.length; index++) {
            //    this.pages[index].open(min,max);
            //}

            this.setPageIndex(0);
            this.pagePotion.setPageIndex(0);
            //this.pagePotion.open(min,max);


            //this.pageNavigator.open();
        }
    });

    var CraftDialog = Dialog.extend({
        init: function(game) {
            this._super(game, '#craftDialog');
            this.setScale();

            this.craftFrame = new StoreFrame(this);

            this.sellButton = $('#craftDialogStore3Button');
            this.sellButton.hide();

            //this.modal = $('#dialogModal');

            this.scale=this.setScale();

            var self = this;

            $('#craftDialogStorePage').css('display','none');
        },

        setScale: function() {
          this.scale = game.renderer.getUiScaleFactor();
        },

        rescale: function() {
        	this.setScale();
		      this.craftFrame.rescale();
        },

        show: function(min, max) {
            var self = this;

            $('#craftDialog .frameheadingtext').text('CRAFT');

            $("#craftDialogStore0Button").text('MISC');
            //$("#craftDialogStore0Button").removeClass('active');
            $("#craftDialogStore0Button").show();

            this.rescale();
            this.craftFrame.open(min, max);

            this.addClose();

            this._super();
            $("#craftDialogStore0Button").trigger('click');
        },

        hide: function() {
          var activePage = this.craftFrame.getActivePage();
          if (activePage)
          {
              activePage.setVisible(false);
              activePage.close();
          }
            this._super();
        },
    });

    return CraftDialog;
});


/* global Types, log, _, self, Class, CharacterDialog, localforage */

define('game',['text!../shared/data/sprites.json', 'lib/localforage', 'infomanager', 'bubble',
        'renderer', 'map', 'mapcontainer', 'animation', 'sprite', 'sprites', 'tile',
        'gameclient', 'clientcallbacks', 'audio', 'updater',
        'pathfinder', 'entity/entity', 'entity/item', 'data/items', 'data/itemlootdata', 'data/appearancedata', 'dialog/appearancedialog',
        'entity/mob', 'entity/npcstatic', 'entity/npcmove', 'data/npcdata', 'entity/player', 'entity/character', 'entity/chest', 'entity/block', 'entity/node',
        'data/mobdata', 'data/mobspeech', 'exceptions', 'config', 'chathandler',
        'playerpopupmenu', 'classpopupmenu', 'quest', 'data/questdata', 'questhandler', 'achievementhandler', 'useralarm',
        'equipmenthandler', 'inventoryhandler', 'shortcuthandler', 'bankhandler', 'socialhandler',
        'leaderboardhandler', 'settingshandler','storehandler','bools',
        'skillhandler', 'data/skilldata',
        'dialog/statdialog', 'dialog/skilldialog',
        'dialog/confirmdialog', 'dialog/notifydialog', 'dialog/storedialog', 'dialog/auctiondialog', 'dialog/craftdialog',
        'dialog/bankdialog', 'gamepad'],

function(spriteNamesJSON, localforage, InfoManager, BubbleManager,
        Renderer, Map, MapContainer, Animation, Sprite, Sprites, AnimatedTile,
         GameClient, ClientCallbacks, AudioManager, Updater,
         Pathfinder, Entity, Item, Items, ItemLoot, AppearanceData, AppearanceDialog,
         Mob, NpcStatic, NpcMove, NpcData, Player, Character, Chest, Block, Node,
         MobData, MobSpeech, Exceptions, config, ChatHandler,
         PlayerPopupMenu, ClassPopupMenu, Quest, QuestData, QuestHandler, AchievementHandler, UserAlarm,
         EquipmentHandler, InventoryHandler, ShortcutHandler, BankHandler, SocialHandler,
         LeaderboardHandler, SettingsHandler, StoreHandler, Bools,
         SkillHandler, SkillData,
         StatDialog, SkillDialog,
         ConfirmDialog, NotifyDialog, StoreDialog, AuctionDialog, CraftDialog,
         BankDialog, GamePad) {
        var Game = Class.extend({
            init: function(app) {
                var self = this;

            	  this.app = app;
                this.app.config = config;
                this.ready = false;
                this.started = false;
                this.hasNeverStarted = true;
                this.hasServerPlayer = false;

                this.client = null;
                this.renderer = null;
                this.camera = null;
                this.updater = null;
                this.pathfinder = null;
                this.chatinput = null;
                this.bubbleManager = null;
                this.audioManager = null;

                // Game state
                this.entities = {};
                this.pathingGrid = [];
                this.tileGrid = [];
                this.itemGrid = [];

                this.currentCursor = null;
                this.mouse = { x: 0, y: 0 };
                this.previousClickPosition = {};

                this.cursorVisible = true;
                this.selectedX = 0;
                this.selectedY = 0;
                this.selectedCellVisible = false;
                this.targetColor = "rgba(255, 255, 255, 0.5)";
                this.targetCellVisible = true;
                this.hoveringTarget = false;
                this.hoveringPlayer = false;
                this.hoveringMob = false;
                this.hoveringItem = false;
                this.hoveringCollidingTile = false;
                this.hoveringEntity = null;

                // Global chats
                this.chats = 0;
                this.maxChats = 3;
                this.globalChatColor = '#A6FFF9';


                // Item Info
                //this.itemInfoOn = true;

                // combat
                this.infoManager = new InfoManager(this);
                this.questhandler = new QuestHandler(this);
                this.achievementHandler = new AchievementHandler();
                this.chathandler = new ChatHandler(this);
                //this.playerPopupMenu = new PlayerPopupMenu(this);
                this.socialHandler = new SocialHandler(this);

                this.leaderboardHandler = new LeaderboardHandler(this);
                this.storeHandler = new StoreHandler(this, this.app);

                // Move Sync
                this.lastCurrentTime = 0;
                this.updateCurrentTime = 0;
                this.logicTime = 0;
                this.currentTime = getTime();

                this.cursors = {};

                this.sprites = {};

                // tile animation
                this.animatedTiles = null;

                this.dialogs = [];
                this.statDialog = new StatDialog();
                this.skillDialog = new SkillDialog();
                this.equipmentHandler = new EquipmentHandler(this);
                this.userAlarm = new UserAlarm();

                this.dialogs.push(this.statDialog);
                this.dialogs.push(this.skillDialog);

                //New Stuff
                this.soundButton = null;

                this.expMultiplier = 1;

                this.showInventory = 0;

                this.selectedSkillIndex = 0;

                this.usejoystick = false;
                this.joystick = null;
                this.clickMove = false;

                this.inputLatency = 0;
                this.keyInterval = null;

                this.optimized = true;

                this.products = null;

                /**
                 * Settings - For player
                 */

                //this.moveEntityThreshold = 11;
                //this.showPlayerNames = true;
                this.musicOn = true;
                this.sfxOn = true;
                //this.frameColour = "default";
                this.ignorePlayer = false;

                this.mapStatus = 0;

                this.mapNames = ["map0", "map1"];

                this.gameTime = 0;
                //this.updateTick = G_UPDATE_INTERVAL;
                //this.renderTick = G_RENDER_INTERVAL;
                //this.renderTime = 0;
                this.updateTime = 0;
                //this.updateRender = 0;

                this.previousDelta = 0;
                this.animFrame = (typeof(requestAnimFrame) !== "undefined");

                this.spritesReady = false;

                this.unknownEntities = [];
                this.removeObsoleteEntitiesChunk = 32;

                this.inventoryMode = 0;

                this.spriteJSON = new Sprites();

                this.dialogueWindow = $("#npcDialog");
                this.npcText = $("#npcText");

                setInterval(function() {
                	self.removeObsoleteEntities();
                },30000);

            },

            setSpriteJSON: function () {

              sprites = this.spriteJSON.sprites;
              //this.spriteNames = this.spriteJSON.getSpriteList();
              this.loadSprites();
              this.spritesReady = true;
            },

// TODO - Revise.
            setup: function(input) {
                this.bubbleManager = new BubbleManager();
                this.renderer = new Renderer(this);
                this.tilesize = this.renderer.tilesize;

                this.camera = this.renderer.camera;

                this.bankHandler = new BankHandler(this);
                this.setChatInput(input);

                this.storeDialog = new StoreDialog(this);
                this.dialogs.push(this.storeDialog);
                this.craftDialog = new CraftDialog(this);
                this.dialogs.push(this.craftDialog);

                this.bankDialog = new BankDialog(this);
                this.dialogs.push(this.bankDialog);
                this.auctionDialog = new AuctionDialog(this);
                this.dialogs.push(this.auctionDialog);
                this.appearanceDialog = new AppearanceDialog(this);
                this.dialogs.push(this.appearanceDialog);
                this.confirmDialog = new ConfirmDialog();
                this.notifyDialog = new NotifyDialog();

                this.classPopupMenu = new ClassPopupMenu(this);
                this.inventoryHandler = new InventoryHandler(this);
                this.inventory = this.inventoryHandler;
                this.shortcuts = new ShortcutHandler();


            },

            setChatInput: function(element) {
                this.chatinput = element;
            },

            initPlayer: function() {
                this.app.initTargetHud();

                this.player.respawn();

                this.camera.entities[this.player.id] = this.player;
                this.camera.outEntities[this.player.id] = this.player;

                log.debug("Finished initPlayer");
            },

            initCursors: function() {
                var sprite = this.sprites["cursors"];
                var target = this.sprites["target"];

                sprite.container = Container.HUD;
                target.container = Container.HUD;
                var pjsSprite = this.renderer.createSprite(sprite);
                sprite.pjsSprite = pjsSprite;
                target.pjsSprite = pjsSprite;

                this.cursorAnim = sprite.createAnimations();
                this.targetAnim = target.createAnimations();

                this.cursors["hand"] = sprite;
                this.cursors["sword"] = sprite;
                this.cursors["loot"] = sprite;
                this.cursors["arrow"] = sprite;
                this.cursors["talk"] = sprite;
                this.cursors["join"] = sprite;

                this.cursors["target"] = target;
            },

            initAnimations: function() {
                this.targetAnimation = new Animation("idle_down", 0, 4, 0, 16, 16);
                this.targetAnimation.setSpeed(50);
            },

            loadSprite: function(data) {
              this.spritesets[0][data.id] = new Sprite(data, 2, Container.ENTITIES);
            },

            setSpriteScale: function(scale) {
              var self = this;

              _.each(this.entities, function(entity) {
                   try {
                     if (entity !== game.player)
                     {
                        var sprite = self.sprites[entity.getSpriteName()];
                        if (sprite)
                   	      entity.setSprite(sprite);
                     }
                   }
                   catch (e) {}
              });
            },

            loadSprites: function() {
                log.info("Loading sprites...");
                this.spritesets = [];
                this.spritesets[0] = {};
                this.sprites = this.spritesets[0];

                var sprite = null;
                for (var key in sprites) {
                  sprite = sprites[key];
                  this.loadSprite(sprite);
                }
                this.setSpriteScale(this.renderer.scale);
            },

            setCursor: function(name, orientation) {
                if(name in this.cursors) {
                    this.currentCursor = this.cursors[name];
                    this.currentCursor.setAnimation(name);
                    this.currentCursorOrientation = orientation;
                } else {
                    log.error("Unknown cursor name :"+name);
                }
            },

            updateCursorLogic: function() {

            	  if(this.hoveringCollidingTile && this.started) {
                    this.targetColor = "rgba(255, 50, 50, 0.5)";
                }
                else {
                    this.targetColor = "rgba(255, 255, 255, 0.5)";
                }

                if(this.hoveringPlayer && this.started && this.player) {
                    if(this.player.pvpFlag || (this.namedEntity && this.namedEntity instanceof Player && this.namedEntity.isWanted)) {
                        this.setCursor("sword");
                    } else {
                        this.setCursor("hand");
                    }
                    this.hoveringTarget = false;
                    this.hoveringMob = false;
                } else if(this.hoveringMob && this.started) { // Obscure Mimic.
                    this.setCursor("sword");
                    this.hoveringTarget = false;
                    this.hoveringPlayer = false;
                }
                else if(this.hoveringNpc && this.started) {
                    this.setCursor("talk");
                    this.hoveringTarget = false;
                }
                else if((this.hoveringItem || this.hoveringChest) && this.started) {
                    this.setCursor("loot");
                    this.hoveringTarget = false;
                }
                else if (this.currentCursor.currentAnimation.name != "hand") {
                    this.setCursor("hand");
                    this.hoveringTarget = false;
                    this.hoveringPlayer = false;
                }
            },

            addEntity: function(entity) {
                var self = this;

                this.entities[entity.id] = entity;
                this.updateCameraEntity(entity.id, this.entities[entity.id]);
            },

            removeEntity: function(entity) {
                if(entity.id in this.entities) {
                    var id = entity.id;
                    if (this.player.target == entity) {
                      this.player.clearTarget();
                      this.player.targetIndex = 0;
                    }
                    this.renderer.removeEntity(entity);
                    this.updateCameraEntity(id, null);
                    delete this.entities[id];
                }
                else {
                    log.info("Cannot remove entity. Unknown ID : " + entity.id);
                }
            },

            addItem: function(item) {
                if (this.items)
                {
                  this.items[item.id] = item;
                  this.addEntity(item);
                }
                else {
                  console.warn("TODO: Cannot add item. Unknown ID : " + item.id);
                }
            },

            removeItem: function(item) {
                if(item) {
                    this.removeFromItems(item);
                    var id = item.id;
                    this.removeEntity(item);
                } else {
                    log.error("Cannot remove item. Unknown ID : " + item.id);
                }
            },

            removeFromItems: function(item) {
                if(item) {
                    delete this.items[item.id];
                }
            },

            initGrid: function() {
              this.camera.focusEntity = this.player;
              this.mapContainer.reloadMaps(true);
            },

            /**
             *
             */
            /*initAnimatedTiles: function() {
                var self = this,
                    m = this.map;

                this.animatedTiles = [];
                this.forEachVisibleTile(function (id, index) {
                    if(m.isAnimatedTile(id)) {
                        var tile = new AnimatedTile(id, m.getTileAnimationLength(id), m.getTileAnimationDelay(id), index),
                            pos = self.map.tileIndexToGridPosition(tile.index);

                        tile.x = pos.x;
                        tile.y = pos.y;
                        self.animatedTiles.push(tile);
                    }
                }, 0, false);
                //log.info("Initialized animated tiles.");
            },*/


            registerEntityPosition: function(entity) {
                var x = entity.gx,
                    y = entity.gy;

                if(entity) {
                    if(entity instanceof Item) {
                        this.itemGrid[y][x][entity.id] = entity;
                        this.items[entity.id] = entity;
                    }
                }
            },

            loadAudio: function() {
                this.audioManager = new AudioManager(this);
            },

            initMusicAreas: function() {
                var self = this;
                //_.each(this.map.musicAreas, function(area) {
                //    self.audioManager.addArea(area.x, area.y, area.w, area.h, area.id);
                //});
            },

            run: function(server, ps) {
            	  var self = this;

                game.player = user.createPlayer(ps);

                this.loadGameData();

                this.updater = new Updater(this);
                this.camera = this.renderer.camera;

                //self.renderer.resizeCanvases();

                setTimeout(function () {
                    self.renderer.rescale();
                    self.renderer.resizeCanvases();
                },1500); // Slight Delay For On-Screen Keybaord to minimize.


                game.gamepad = new GamePad(self);

                this.gameTick = setInterval(self.tick, G_UPDATE_INTERVAL);

                if (this.animFrame)
                  requestAnimFrame(this.render.bind(this));
                else {
                  this.renderTick = setInterval(this.render, G_UPDATE_INTERVAL);
                }
            },

            render: function () {
              var self = game;

              self.renderer.renderFrame();

              if (self.animFrame)
                requestAnimationFrame(self.render.bind(self));
            },

            tick: function() {
              var self = game;

              self.currentTime = getTime();

              if (!self.started || self.isStopped) {
                return;
              }

              self.updateTime = self.currentTime;

              if (self.gamepad)
                self.gamepad.interval();

              self.updater.update();

        			if (self.mapStatus >= 2)
        			{
        				self.updateCursorLogic();
        			}
            },

            start: function() {
              this.started = true;
              this.ready = true;
              this.hasNeverStarted = false;
              log.info("Game loop started.");
            },

            stop: function() {
                log.info("Game stopped.");
                this.isStopped = true;
            },

            entityIdExists: function(id) {
                return id in this.entities;
            },

            getEntityById: function(id) {
                if(this.entities && id in this.entities) {
                    return this.entities[id];
                }
                else if (this.items && id in this.items) {
                	return this.items[id];
                }
                //else {
                //    log.info("Unknown entity id : " + id, true);
                //}
            },

            getNpcByQuestId: function(questId){
                for(var id in this.entities){
                    var entity = this.entities[id];
                    if(entity.hasOwnProperty("questId") && entity.questId == questId){
                        return entity;
                    }
                }
                return null;
            },

            getEntityByName: function(name){
                for(var id in this.entities){
                    var entity = this.entities[id];
                    if(entity.name.toLowerCase() === name.toLowerCase()){
                        return entity;
                    }
                }
                return null;
            },

            loadGameData: function() {
                var self = this;
                self.loadAudio();

                self.initMusicAreas();

                self.initCursors();
                self.initAnimations();

                self.setCursor("hand");

//                self.settingsHandler.apply();
            },

            teleportMaps: function(mapIndex, x, y)
            {
              var self = this;
              this.mapStatus = 0;
            	log.info("teleportMaps");
            	x = x || -1;
            	y = y || -1;

              if (this.mapContainer)
                this.mapContainer = null;
                //delete this.mapContainer;
              this.mapContainer = new MapContainer(this, mapIndex, this.mapNames[mapIndex]);

              this.mapContainer.ready(function () {
                  self.client.sendTeleportMap([mapIndex, 0, x, y]);
              });
            },

            onPlayerLoad: function (player) {
              game.settingsHandler = new SettingsHandler(game, game.app);
              game.settingsHandler.apply();

              // Game Client takes over the processing of Messages.
              game.client = new GameClient(game, user.client);

              game.client.callbacks = new ClientCallbacks(game.client);
              game.client.setHandlers();

              log.info("Received player ID from server : "+ player.id);

              // Make zoning possible.
              //var ts = 4 * game.renderer.tilesize;
              setInterval(function() {
                if (game.mapStatus >= 2 &&
                    (/*(player.x % ts == 0 || player.y % ts == 0) ||*/
                     !player.isMoving()) && player.canObserve(game.currentTime))
                {
                    game.client.sendWho();

                    player.observeTimer.lastTime = game.currentTime;
                }
              }, player.moveSpeed * 4);

              game.renderer.initPIXI();

              game.app.initPlayerBar();

              game.updateBars();
              game.updateExpBar();

              log.info("onWelcome");

          	  $('.validation-summary').text("Loading Map..");

              // TODO - Maybe this is better in main or app class as html.
              if ($('#player_window').is(':visible'))
              {
                $('#intro').hide();
                $('#container').fadeIn(1000);
                //$('#container').css('opacity', '100');
              }

              var ts = game.tilesize;
              //game.teleportMaps(0);
          	  game.teleportMaps(1);

              //Welcome message
              game.chathandler.show();

              game.gamestart_callback();

              if(game.hasNeverStarted) {
                  game.start();
                  //app.info_callback({success: true});
              }

              //log.info("game.currentTime="+game.currentTime);
              player.attackTime = game.currentTime;

              // START TUTORIAL SHOW CODE.
              if (player.level.base == 0)
              {
                var tutName = "["+lang.data["TUTORIAL"]+"]";
                for (var i = 1; i <= 5; ++i)
                {
                  var j = 1;
                  setTimeout(function () {
                    var tutData = lang.data["TUTORIAL_"+(j++)];
                    game.chathandler.addGameNotification(tutName, tutData);
                  }, (12500 * i));
                }
              }
            },

            teleportFromTown: function (player) {
              var p = player;
              if (p.mapIndex == 0 && (p.gx>=63 && p.gx<=65) && (p.gy>=70 && p.gy<=72))
              {
                this.teleportMaps(1);
              }
            },

            addPlayerCallbacks: function (player) {
              var self = this;

              self.player = player;

              self.player.onStartPathing(function(path) {
                  var i = path.length - 1,
                      x =  path[i][0],
                      y =  path[i][1];

                  /*if(self.player.isMovingToLoot()) {
                      self.player.isLootMoving = false;
                  }*/
              });

              self.player.onKeyMove(function(sentMove) {
                var p = self.player;
                checkTeleport(p, p.x, p.y);

                p.sendMove(sentMove ? 1 : 0);
                //if (!p.freeze)
                //f (p.sentMoving != sentMove) {
                  //p.sendMove(sentMove ? 1 : 0);
                  //p.sentMoving = sentMove;
                //}
              });

              self.player.onBeforeMove(function() {

              });

              self.player.onBeforeStep(function() {

              });

              self.player.onStep(function() {
              });

              self.player.onAbortPathing(function(x, y) {
                var p = self.player;
                self.client.sendMoveEntity(p, 2);
              });

              var checkTeleport = function (p, x, y)
              {
                self.teleportFromTown(p);

                var dest = self.mapContainer.getDoor(p);
                if(!p.hasTarget() && dest) {
                    // Door Level Requirements.
                    var msg;
                    var notification;
                    if (dest.minLevel && self.player.level < dest.minLevel)
                    {
                      msg = "I must be Level "+dest.minLevel+" or more to proceed.";
                      notification = "You must be Level "+dest.minLevel+" or more to proceed.";
                    }

                    if (msg)
                    {
                      self.bubbleManager.create(self.player, msg);
                      self.chathandler.addGameNotification("Notification", notification);
                      return;
                    }

                    p.orientation = dest.orientation;

                    p.buttonMoving = false;
                    p.forceStop();
                    //self.teleportMaps(dest.map, dest.x, dest.y, dest.difficulty);

                    //self.updatePlateauMode();

                    if(dest.portal) {
                        self.audioManager.playSound("teleport");
                    }

                }
              };

              self.player.onStopPathing(function(x, y) {
                  var p = self.player;
                  log.info("onStopPathing");

                	if (p.isDead)
                      return;

                  self.client.sendMoveEntity(p, 2);
                  /*if(self.isItemAt(x, y)) {
                      var items = self.getItemsAt(x, y);

                      try {
                          self.client.sendLoot(items);
                      } catch(e) {
                          throw e;
                      }
                  }*/
                  //p.targetIndex = 0;
                  log.info("onStopPathing - 1")
                  if (p.hasTarget())
                    p.lookAtEntity(p.target);
                  else {
                    log.info("onStopPathing - NO TARGET!")
                  }
                  log.info("onStopPathing - 2")

                  checkTeleport(p, x, y);

                  if(self.player.target instanceof NpcStatic || self.player.target instanceof NpcMove) {
                      self.makeNpcTalk(self.player.target);
                  } else if(self.player.target instanceof Chest) {
                      self.client.sendOpen(self.player.target);
                      self.audioManager.playSound("chest");
                  }
              });

              self.player.onRequestPath(function(x, y) {
              	var ignored = [self.player]; // Always ignore self
              	var included = [];

                  if(self.player.hasTarget() && !self.player.target.isDead) {

                      ignored.push(self.player.target);
                  }

                  var path = self.findPath(self.player, x, y, ignored);

                  if (path && path.length > 0)
                  {
                    self.player.orientation = self.player.getOrientationTo([path[1][0],path[1][1]]);
                    self.client.sendMovePath(self.player,
                      path.length,
                      path);
	                }
                  return path;
              });

              self.player.onDeath(function() {
                  log.info(self.playerId + " is dead");
                  var p = self.player;

                  p.skillHandler.clear();

                  //p.oldSprite = p.getArmorSprite();
                  //log.info("oldSprite="+p.oldSprite);
                  p.forceStop();
                  p.setSprite(self.sprites["death"]);

                  p.animate("death", 150, 1, function() {
                      log.info(self.playerId + " was removed");

                      p.isDead = true;
                      self.updateCameraEntity(p.id, null);

                      setTimeout(function() {
                          self.playerdeath_callback();
                      }, 1000);
                  });

                  self.audioManager.fadeOutCurrentMusic();
                  self.audioManager.playSound("death");
              });

              self.player.onHasMoved(function(player) {
              });

            },

            connected: function (server) {
              var self = this;

              if (this.hasServerPlayer)
              {
                if(this.client.connectgame_callback) {
                  this.client.connectgame_callback();
                }
                return;
              }

              this.client.connection.send("startgame,"+server);
              this.hasServerPlayer = true;
            },

            /**
             * Converts the current mouse position on the screen to world grid coordinates.
             * @returns {Object} An object containing x and y properties.
             */
            getMouseGridPosition: function() {
                return {x: this.mouse.gx, y: this.mouse.gy};
            },

            getMousePosition: function() {
          	    var r = this.renderer,
                  c = this.camera,
          	      mx = this.mouse.x,
                  my = this.mouse.y;
                //var sox = c.sox,
                //    soy = c.soy;
                // var ts = this.tilesize;

                mx = ~~(mx + c.x);
                my = ~~(my + c.y);

                this.mouse.gx = ~~(mx / G_TILESIZE);
                this.mouse.gy = ~~(my / G_TILESIZE);

                return { x: mx, y: my};
            },

            /**
             * Moves a character to a given location on the world grid.
             *
             * @param {Number} x The x coordinate of the target location.
             * @param {Number} y The y coordinate of the target location.
             */
            makeCharacterGoTo: function(character, x, y) {
                if(!this.map.isColliding(x,y) && !character.isDead)
                {
                    character.go(x, y);
                }
            },

            makePlayerInteractNextTo: function()
            {
              var p = this.player;

              var fnIsIgnored = function (entity) {
                if (entity && (entity.isDying || entity.isDead))
                  return true;
                return (entity.type == Types.EntityTypes.NPCSTATIC ||
                    entity.type == Types.EntityTypes.NPCMOVE ||
                    entity.type == Types.EntityTypes.PLAYER ||
                    entity.type == Types.EntityTypes.NODE);
              };

              var processTarget = function () {
                var pos = p.nextTile();
                var target = p.target;
                if (target && (target.isDying || target.isDead)) {
                  p.clearTarget();
                  return false;
                }

                game.processInput(pos[0], pos[1], true);
                return true;
              };

              var entity = p.dialogueEntity;
              if (entity && p.isNextTooEntity(entity) && p.isFacingEntity(entity)) {
                game.showDialogue();
                return;
              }

              if (p.isDying || p.isDead)
                return;

              log.info("makePlayerInteractNextTo");
              //var ts = this.tilesize;

              this.ignorePlayer = true;



              //var targetFound = false;

              var fnIsDead = function (entity) {
                return entity && (entity.isDying || entity.isDead);
              }

              var target = p.target;
              if (target && p.isNextTooEntity(target) && p.isFacingEntity(target)) {
                if (processTarget()) return;
              }

              var pos = p.nextTile();
              entity = this.getEntityAt(pos[0], pos[1]);
              if (entity && entity != p && !fnIsDead(entity)) {
                p.setTarget(entity);
                if (p.hasTarget() && processTarget()) return;
              }

              if (target && fnIsIgnored(target)) {
                p.clearTarget();
              }

              if (target && !game.camera.isVisible(target)) {
                p.clearTarget();
              }

              if (target && p.isNextToo(target)) {
                if (p.isMoving())
                  p.forceStop();
                p.lookAtEntity(target);
                if (processTarget()) return;
              }

              if (this.mapContainer.isColliding(pos[0], pos[1])) {
                p.clearTarget();
                this.processInput(pos[0], pos[1], true);
                return;
              }

              entity = null;
              var entities = Object.values(this.camera.entities);
              entities = entities.filter(entity => !fnIsIgnored(entity));

              var loopEntities = function (entities, fn) {
                for (var entity of entities) {
                  if (!entity || entity == p)
                    continue;

                  if (!p.isNextTooEntity(entity))
                    continue;

                  if (fn(p, entity)) {
                    return entity;
                  }
                }
                return null;
              };

              target = p.target;
              if (!target) {
                target = loopEntities(entities, function (p,e) {
                  return p.isNextTooEntity(e);
                });
              }

              if (target) {
                p.clearTarget();
                p.setTarget(target);
              }
              else {
                if (!p.hasTarget()) {
                  p.targetIndex = 0;
                }
                if (p.targetIndex == 0)
                {
                  this.playerTargetClosestEntity(1);
                  if (p.target && !p.isNextTooEntity(p.target))
                    return;
                }
              }

              processTarget();
              this.ignorePlayer = false;
            },

            /**
             * Moves the current player to a given target location.
             * @see makeCharacterGoTo
             */
            makePlayerGoTo: function(x, y) {
                this.player.go(x, y);
            },

            /**
             * Moves the current player towards a specific item.
             * @see makeCharacterGoTo
             */
            makePlayerGoToItem: function(item) {
                var p = this.player;
                if (!item) return;
                if (!p.isNextTooEntity(item)) {
                  p.follow(item);
                  //this.player.isLootMoving = true;
                } else {
                  this.client.sendLootMove(item);
                }
            },

            /**
             *
             */
            makePlayerAttack: function(entity, spellId) {
              spellId = (spellId >= 0) ? spellId : -1;
              log.info("makePlayerAttack " + entity.id);
              var self = this;
              var time = this.currentTime;
              var p = this.player;

      				if (!p || p === entity || p.isDead || p.isDying) // sanity check.
      					return;

    					if (entity && entity.isDead)
    					{
    						p.removeTarget();
    						return;
    					}

              //if (p.isMoving())
                //p.forceStop();

              if (!p.canReach(p.target))
              {
                p.followAttack(p.target);

                if (p.isArcher())
                  this.chathandler.addNotification(lang.data["ATTACK_TOOFAR"]);

                log.info("CANNOT REACH TARGET!!");
                return;
              } else {
                if (p.isMoving())
                  p.forceStop();
                p.lookAtEntity(p.target);
              }
              log.info("CAN REACH TARGET!!");

              //var attackTime = this.currentTime-p.attackTime;
    					//if (p.canAttack(time) && attackTime > ATTACK_INTERVAL)
              //p.fsm = "MOVE";

              if (!p.canAttack(time))
              {
                log.info("CANNOT ATTACK DUE TO TIME.");
                return;
              }

              //p.forceStop();
              //p.engage(p.target);
              //p.hit();

              if (p.hit() && p.hasTarget()) {
                //this.client.sendMoveEntity(p, 0);
                //p.forceStop();
                this.client.sendAttack(p, p.target, spellId);
              }
              else {
                return;
              }

              log.info("CAN ATTACK!! "+p.target.id);

              self.audioManager.playSound("hit"+Math.floor(Math.random()*2+1));

              p.skillHandler.showActiveSkill();

              p.attackCooldown.duration = 1000;
              p.attackCooldown.lastTime = time;

            },

            /**
             *
             */
            makeNpcTalk: function(npc) {
            	var msg;

              if (!npc) return;

              if (!game.player.isNextToo(npc.x, npc.y))
                return;

              if (npc.type == Types.EntityTypes.NPCMOVE) {
                this.client.sendTalkToNPC(npc.type, npc.id);
                return;
              }

              if (NpcData.Kinds[npc.kind].title==="Craft")
          		{
      		    	this.craftDialog.show(1,100);
              	if (this.gamepad.isActive())
          			{
          				this.gamepad.dialogNavigate();
          			}
              }
              if (NpcData.Kinds[npc.kind].title==="Beginner shop")
          		{
      		    	this.storeDialog.show(1,100);
              	if (this.gamepad.isActive())
          			{
          				this.gamepad.dialogNavigate();
          			}
              } else if (NpcData.Kinds[npc.kind].title==="Bank") {
              	this.bankDialog.show();
              	if (this.gamepad.isActive())
          			{
          				this.gamepad.dialogNavigate();
          			}
              } else if (NpcData.Kinds[npc.kind].title==="Enchant") {
                game.inventoryMode = InventoryMode.MODE_ENCHANT;
              	this.inventoryHandler.showInventory();
              	if (this.gamepad.isActive())
          			{
          				this.gamepad.dialogNavigate();
          			}
              } else if (NpcData.Kinds[npc.kind].title==="Repair") {
                game.inventoryMode = InventoryMode.MODE_REPAIR;
              	this.inventoryHandler.showInventory();
              	if (this.gamepad.isActive())
          			{
          				this.gamepad.dialogNavigate();
          			}
              } else if (NpcData.Kinds[npc.kind].title==="Auction") {
              	this.auctionDialog.show();
              	if (this.gamepad.isActive())
          			{
          				this.gamepad.dialogNavigate();
          			}
              } else if (NpcData.Kinds[npc.kind].title==="Looks") {
              	this.appearanceDialog.show();
              } else {
              	  this.bubbleManager.destroyBubble(npc.id);
                  msg = this.questhandler.talkToNPC(npc);
                  this.previousClickPosition = {};
                  if (msg) {
                      this.bubbleManager.create(npc, msg);
                      this.audioManager.playSound("npc");
                  }
              }
              this.player.removeTarget();
            },

            showDialogue: function () {
              var self = this;
              var p = game.player;
              var entity = p.dialogueEntity;

              var hasFinished = function () {
                clearTimeout(game.destroyMessageTimeout);
                game.destroyMessage();
                self.npcText.html("");
                self.dialogueWindow.hide();
                game.userAlarm.hide();

                if (!entity)
                  return;

                var data = entity.dialogue[entity.dialogueIndex-1];
                if (data && data.length == 3) {
                  var action = data[2];
                  var splitAction = action.split("_");
                  if (splitAction[0] == "QUEST") {
                    game.client.sendQuest(entity.id, parseInt(splitAction[1]), 1);
                  }
                }

                if (entity.dialogueIndex >= entity.dialogue.length) {
                  if (entity.quest) {
                    self.questhandler.handleQuest(entity.quest);
                    p.dialogueQuest = null;
                    entity.quest = null;
                  }
                  entity.dialogueIndex = 0;
                  p.dialogueEntity = null;
                  entity = null;
                  game.userAlarm.show();
                }
              };

              hasFinished();
              if (!entity)
                return;

              if (entity.dialogueIndex < entity.dialogue.length)
                game.createMessage();

              entity.dialogueIndex++;

              game.destroyMessageTimeout = setTimeout(function () {
                  game.showDialogue();
              }, 5000);
            },

            createMessage: function () {
              var p = this.player;
              var entity = p.dialogueEntity;
              if (!entity)
                return;

              if (!(entity.dialogueIndex < entity.dialogue.length))
                return;

              var data = entity.dialogue[entity.dialogueIndex];
              var msgEntity = (data[0] == 0) ? entity : game.player;
              var msg = data[1];
              if (!entity || !msg)
                return;

              this.bubbleManager.create(msgEntity, msg);
              this.audioManager.playSound("npc");
              if (data[0] == 0) {
                this.chathandler.addNormalChat({name: "[NPC] "+msgEntity.name}, msg);
                this.npcText.html(msgEntity.name + ": " + msg);
              } else {
                game.chathandler.addNormalChat(p, msg);
                this.npcText.html(p.name + ": " + msg);
              }
              game.app.npcDialoguePic(msgEntity);
              this.dialogueWindow.show();
            },

            destroyMessage: function () {
              var entity = this.player.dialogueEntity;
              if (!entity)
                return;

              if (entity.dialogue) {
                if (!(entity.dialogueIndex < entity.dialogue.length))
                  return;

                var data = entity.dialogue[entity.dialogueIndex];
                var msgEntity = (data[0] == 0) ? entity : game.player;
                this.bubbleManager.destroyBubble(msgEntity.id);
              }

              this.audioManager.playSound("npc-end");
              this.npcText.html("");
              this.dialogueWindow.hide();
            },

            /**
             * Loops through all the entities currently present in the game.
             * @param {Function} callback The function to call back (must accept one entity argument).
             */
            forEachEntity: function(callback, cond) {
                /*_.each(this.entities, function(entity) {
                    callback(entity);
                });*/
                cond = cond || function (e) { return true; };
                for (var id in this.entities) {
                  var entity = this.entities[id];
                  if (cond(entity))
                    callback(entity);
                }
            },

            /**
             * Same as forEachEntity but only for instances of the Mob subclass.
             * @see forEachEntity
             */
            forEachMob: function(callback) {
                var cond = function (e) { return e.type == Types.EntityTypes.MOB; };
                this.forEachEntity(callback, cond);
                /*_.each(this.entities, function(entity) {
                    if(entity instanceof Mob) {
                        callback(entity);
                    }
                });*/
            },

            /**
             *
             */
            forEachVisibleTileIndex: function(callback) {
                var self = this;
          			this.camera.forEachVisibleValidPosition(function(x, y) {
                    var index = self.mapContainer.GridPositionToTileIndex(x, y);
          			    callback(index, x, y);
          			});
            },

            /**
             *
             */
            forEachVisibleTile: function(callback) {
                var self = this,
                    mc = this.mapContainer,
                    tg = mc.tileGrid;

                if(mc.gridReady) {
                    this.forEachVisibleTileIndex(function(index, x, y) {
                        if(_.isArray(tg[y][x])) {
                            _.each(tg[y][x], function(index, x, y) {
                                callback(index, x, y);
                            });
                        }
                        else {
                            if(!_.isNaN(tg[y][x]))
                              callback(tg[y][x], x, y);
                        }
                    });
                }
            },

            /**
             *
             */
            forEachAnimatedTile: function(callback) {
                if(this.animatedTiles) {
                    _.each(this.animatedTiles, function(tile) {
                        callback(tile);
                    });
                }
            },

            getEntitiesAround: function(x, y, ts) {
              ts = ts || G_TILESIZE;
              var pos = [[x+ts,y],[x-ts,y],[x,y+ts],[x,y-ts]];
              var entity = null;
              var entities = [];
              for (var p of pos) {
                entity = this.getEntityAt(p[0],p[1]);
                if (entity)
                  entities.push(entity);
              }
              return entities;
            },

            /**
             * Returns the entity located at the given position on the world grid.
             * @returns {Entity} the entity located at (x, y) or null if there is none.
             */
            getEntityAt: function(x, y) {
                if(!this.mapContainer.mapLoaded)
            	    return null;

                //log.info("getEntityAt:");
                var entities = this.camera.entities,
                    len = Object.keys(entities).length;

                //log.info("x:"+x+",y:"+y);
                if(len > 0) {
                  var entity = null;
                  var dx, dy;
                  for (var k in entities) {
                      entity = entities[k];
                      if (!entity) continue;

                      //log.info("x2:"+entity.x+",y2:"+entity.y);
                      if (entity.isOver(x, y))
                        return entity;
                  }
                }
                return null;
            },

            /*getEntityByName: function (name) {
            	var entity;
            	$.each(this.entities, function (i, v) {
        	        if (v instanceof Player && v.name.toLowerCase() == name.toLowerCase())
        	        {
        	        	entity = v;
        	        	return false;
        	        }
            	});
            	return entity;
            },*/

            getMobAt: function(x, y) {
                var entity = this.getEntityAt(x, y);
                if(entity && entity instanceof Mob) {
                    return entity;
                }
                return null;
            },

            getPlayerAt: function(x, y) {
                var entity = this.getEntityAt(x, y);
                if(entity && (entity instanceof Player) && (entity !== this.player)) {
                    return entity;
                }
                return null;
            },

            getNpcAt: function(x, y) {
                var entity = this.getEntityAt(x, y);
                if(entity && (entity instanceof NpcMove || entity instanceof NpcStatic)) {
                    return entity;
                }
                return null;
            },

            getChestAt: function(x, y) {
                var entity = this.getEntityAt(x, y);
                if(entity && (entity instanceof Chest)) {
                    return entity;
                }
                return null;
            },

            getItemAt: function(x, y) {
                if(this.mapContainer.isOutOfBounds(x, y) || !this.itemGrid || !this.itemGrid[y]) {
                    return null;
                }
                var items = this.itemGrid[y][x],
                    item = null;

                if(_.size(items) > 0) {
                    // If there are potions/burgers stacked with equipment items on the same tile, always get expendable items first.
                    _.each(items, function(i) {
                        if(ItemTypes.isConsumableItem(i.kind)) {
                            item = i;
                        };
                    });

                    // Else, get the first item of the stack
                    if(!item) {
                        item = items[_.keys(items)[0]];
                    }
                }
                return item;
            },

            getItemsAt: function(x, y) {
                if(this.map.isOutOfBounds(x, y) || !this.itemGrid || !this.itemGrid[y]) {
                    return null;
                }
                var items = this.itemGrid[y][x];

                return items;
            },

            /**
             * Returns true if an entity is located at the given position on the world grid.
             * @returns {Boolean} Whether an entity is at (x, y).
             */
            isEntityAt: function(x, y) {
                return !_.isNull(this.getEntityAt(x, y));
            },

            isMobAt: function(x, y) {
                return !_.isNull(this.getMobAt(x, y));
            },
            isPlayerAt: function(x, y) {
                return !_.isNull(this.getPlayerAt(x, y));
            },

            isItemAt: function(x, y) {
                return !_.isNull(this.getItemAt(x, y));
            },

            isNpcAt: function(x, y) {
                return !_.isNull(this.getNpcAt(x, y));
            },

            isChestAt: function(x, y) {
                return !_.isNull(this.getChestAt(x, y));
            },

            /**
             * Finds a path to a grid position for the specified character.
             * The path will pass through any entity present in the ignore list.
             */
            findPath: function(character, x, y, ignoreList, includeList) {

                var self = this,
                    path = [],
                    isPlayer = (character === this.player);

                var mc = this.mapContainer;
                if (!mc || !mc.gridReady)
                  return null;

                if (this.mapStatus < 2)
                	return null;

                log.info("PATHFINDER CODE");

                if(this.pathfinder && character)
                {

                    var ts = this.tilesize;
                    var grid = this.mapContainer.collisionGrid;
                    if (!grid) {
                      console.error("game.js findPath: grid not ready for pathing.")
                      return null;
                    }

                    var c = this.camera;
                    var path = null;
                    //var ts = this.tilesize;
                    var pS = c.getGridPos([character.x, character.y]);
                    if (mc.isColliding(character.x, character.y))
                    {
                      log.info("pathfind - isColliding start.");
                      return null;
                    }
                    var pE = c.getGridPos([x, y]);
                    if (mc.isColliding(x, y))
                    {
                      log.info("pathfind - isColliding end.");
                      return null;
                    }

                    log.info("pS[0]="+pS[0]+",pS[1]="+pS[1]);
                    log.info("pE[0]="+pE[0]+",pE[1]="+pE[1]);

                    if (pS[0] == pE[0] && pS[1] == pE[1])
                      return null;

                    var lx = grid[0].length;
                    var ly = grid.length;
                    if (pS[0] < 0 || pS[0] >= lx || pS[1] < 0 || pS[1] >= ly ||
                        pE[0] < 0 || pE[0] >= lx || pE[1] < 0 || pE[1] >= ly)
                    {
                        log.error("path cordinates outside of dimensions.");
                        log.error(JSON.stringify([pS, pE]));
                        return null;
                    }

                    var shortGrid = this.pathfinder.getShortGrid(grid, pS, pE, 3);
                    if (!path || path.length == 0) {
                      if (pS[0] == pE[0] || pS[1] == pE[1]) {
                        mp = [pS, pE];
                        if(this.pathfinder.isValidPath(grid, mp)) {
                          log.info("validpath-mp:"+JSON.stringify(mp));
                          path = mp;
                        }
                      }
                    }

                    if (!path || path.length == 0) {
                      var mp = [pS, [pS[0],pE[1]], pE];
                      log.info("mp:"+JSON.stringify(mp));
                      if(this.pathfinder.isValidPath(grid, mp)) {
                        log.info("validpath-mp2:"+JSON.stringify(mp));
                        path = mp;
                      }
                    }

                    if (!path || path.length == 0) {
                      //log.info("path:"+JSON.stringify(path));
                      mp = [pS, [pE[0],pS[1]], pE];
                      log.info("mp:"+JSON.stringify(mp));
                      if(this.pathfinder.isValidPath(grid, mp)) {
                        log.info("validpath-mp3:"+JSON.stringify(mp));
                        path = mp;
                      }
                    }

                    if (!path || path.length == 0) {
                      var shortGrid = this.pathfinder.getShortGrid(grid, pS, pE, 3);

                      var grid = shortGrid.crop,
                        pS = shortGrid.substart,
                        pE = shortGrid.subend;

                      var lx = grid[0].length;
                      var ly = grid.length;
                      if (pS[0] < 0 || pS[0] >= lx || pS[1] < 0 || pS[1] >= ly ||
                          pE[0] < 0 || pE[0] >= lx || pE[1] < 0 || pE[1] >= ly)
                      {
                              log.error("short path cordinates outside of dimensions.");
                              log.error(JSON.stringify([pS, pE]));
                              return null;
                      }
                      log.info("using short path finder.");
                      path = this.pathfinder.findShortPath(shortGrid.crop,
                        shortGrid.minX, shortGrid.minY, shortGrid.substart, shortGrid.subend);
                    }

                    if (!path || path.length == 0) {
                      log.info("using long path finder.");
                      path = this.pathfinder.findPath(grid, pS, pE, false);
                    }

                    if (path && path.length > 0)
                    {
                      //log.info("path_result: "+JSON.stringify(path));
                      var dx = character.x - pS[0]*ts;
                      var dy = character.y - pS[1]*ts;

                      for (var node of path)
                      {
                        node[0] = ~~(node[0]*ts+dx);
                        node[1] = ~~(node[1]*ts+dy);
                      }
                      log.info("path_result2: "+JSON.stringify(path));
                      if (!(path[0][0] == (character.x) && path[0][1] == (character.y)))
                      {
                        log.error("player path start co-ordinates mismatch.");
                        log.error("path start coordinate: "+path[0][0]+","+path[0][1]);
                        log.error("player start coordinate: "+character.x+","+character.y);
                        return null;
                      }
                    }
                } else {
                    log.error("Error while finding the path to "+x+", "+y+" for "+character.id);
                }
                return path;
            },

            /**
             *
             */
            movecursor: function() {
                var pos = this.getMousePosition();
                var x = pos.x, y = pos.y;

                this.cursorVisible = true;

                if(this.mapContainer.gridReady && this.player && !this.renderer.mobile && !this.renderer.tablet) {
                    this.hoveringMob = this.isMobAt(x, y);
                    //log.info("isMobAt x="+x+"y="+y);
                    this.hoveringPlayer = this.isPlayerAt(x, y);
                    this.hoveringItem = this.isItemAt(x, y);
                    this.hoveringNpc = this.isNpcAt(x, y);
                    this.hoveringOtherPlayer = this.isPlayerAt(x, y);
                    this.hoveringChest = this.isChestAt(x, y);
                    this.hoveringEntity = this.getEntityAt(x, y);

                    if((this.hoveringMob || this.hoveringPlayer || this.hoveringNpc || this.hoveringChest || this.hoveringOtherPlayer || this.hoveringItem) && !this.player.hasTarget()) {
                        var entity = this.getEntityAt(x, y);
                        if (!entity) return;

                        this.player.showTarget(entity);
                        this.lastHovered = entity;
                    }
                }
            },

            /**
             * Moves the player one space, if possible
             */
            moveCharacter: function(char, x, y, skipOverlap) {
              skipOverlap = skipOverlap || false;
              var res = true;

              if (res && char.orientation == Types.Orientations.NONE)
                res = false;

              if (res && this.mapContainer.isColliding(x, y))
                res = false;


              if (res && char instanceof Player) {
                var block = char.holdingBlock;
                var tile = char.nextTile(x, y);
                if (block && this.mapContainer.isColliding(tile[0], tile[1]))
                  res = false;
              }

              if (res && !skipOverlap && this.isOverlapping(char, x, y)) {
                //console.warn("this.isOverlapping("+char.id+","+x+","+y+")");
                res = false;
              }

              /*if (!res && char == this.player) {
                char.forceStop();
              }*/

              return res;
            },

            isOverlapping: function(entity, x, y) {
                var entities = this.camera.entities;

                for (var k in entities) {
                  var entity2 = entities[k];
                  //if (entity2 instanceof Item)
                    //continue;
                  if (entity instanceof Player && entity.holdingBlock == entity2)
                    continue;
                  if (!entity2 || entity == entity2)
                    continue;
                  if (entity2.isDead || entity2.isDying)
                    continue;

                  if (!entity2.isWithin(entity) &&
                      entity2.isWithin({x:x, y:y}))
                    return true;
                }
                return false;
            },

            playerTargetClosestEntity: function (inc) {
              var p = this.player;
              if (!p.hasOwnProperty("targetIndex"))
                p.targetIndex = 0;

              var excludeTypes = [Types.EntityTypes.NODE, Types.EntityTypes.PLAYER];
              if (game.mapContainer.mapIndex != 0)
              {
                excludeTypes = excludeTypes.concat([Types.EntityTypes.NPCMOVE, Types.EntityTypes.NPCSTATIC]);
              }
              var entity = this.entityTargetClosestEntity(p, inc, p.targetIndex, excludeTypes);
              if (!entity)
                return false;

              p.setTarget(entity);
              return true;
            },

            entityTargetClosestEntity: function (entity, inc, index, excludeTypes) {
              var self = this;
              var ts = this.tilesize;
              var cm = this.camera;

              index = index || 0;

              var entities = cm.forEachInScreenArray();
              entities = entities.filter(entity => !(excludeTypes.includes(entity.type) || entity.isDying || entity.isDead));


              for (var entity2 of entities) {
                entity2.playerDistance = realDistance(entity,entity2);
              }

              if (entities.length == 0) {
                entity.targetIndex = 0;
                return null;
              }
              if (entities.length == 1) {
                entity.targetIndex = 1;
                return entities[0];
              }

              entities.sort(function (a,b) { return (a.playerDistance > b.playerDistance) ? 1 : -1; });

              index = (index+entities.length) % entities.length;
              entity.targetIndex = (index+entities.length+inc) % entities.length;
              return entities[index];
            },

            click: function() {
                var pos = this.getMousePosition();
                var p = game.player;

                if (p.dialogueEntity) {
                  game.showDialogue();
                  return;
                }

                if (p.movement.inProgress)
                  return;

                this.clickMove = true;
                //this.playerPopupMenu.close();

                for(var i = 0; i < this.dialogs.length; i++) {
                    if(this.dialogs[i].visible){
                        this.dialogs[i].hide();
                    }
                }

                var entity = this.getEntityAt(pos.x, pos.y);
                if (p.setTarget(entity))
                  return;

                this.processInput(pos.x,pos.y);
                this.clickMove = false;
            },

            dropItem: function(itemSlot, x, y) {
                var pos = this.getMouseGridPosition();
                x = x || pos.x;
                y = y || pos.y;
                var item = this.inventoryHandler.inventory[itemSlot];
      	        var kind = item.itemKind;
                var count = item.itemNumber;
                this.player.droppedX = x;
                this.player.droppedY = y;
        				if((ItemTypes.isConsumableItem(kind) || ItemTypes.isLootItem(kind) || ItemTypes.isCraftItem(kind)) &&
        					(count > 1))
        				{
        					$('#dropCount').val(count);

        					this.app.showDropDialog(itemSlot);
        				} else {
        					this.client.sendItemSlot([3, 0, itemSlot, 1]);
        				}
            },

            rightClick: function() {
              // TODO Might have some use later.
            },

            /**
             * Processes game logic when the user triggers a click/touch event during the game.
             */
             processInput: function(px, py) {
               //var pos = {};
               var ts = this.tilesize;
               var p = this.player;

              //log.info("processInput - x:"+pos.x+",y:"+pos.y);

              if (!this.started || !this.player || this.player.isDead)
                  return;

              px = px.clamp(0, this.mapContainer.widthX);
              py = py.clamp(0, this.mapContainer.heightY);

            	///log.info("x="+pos.x+",y="+pos.y);

              var entity = p.hasTarget() ?
                p.target : this.getEntityAt(px, py);

              if (!entity && this.renderer.mobile) {
                var entities = this.getEntitiesAround(px, py, 16);
                if (entities && entities.length > 0)
                {
                  entity = entities[0];
                  p.setTarget(entity);
                }
              }

              if (entity && !entity.isDying) {
                this.playerInteract(entity);
              }
              else
              {
          	    //this.playerPopupMenu.close();
                //this.player.clearTarget();
                var colliding = this.mapContainer.isColliding(px,py);
                if (colliding && p.isNextToo(px, py)) {
                    // Start hit animation and send to Server harvest packet.
                    this.makePlayerHarvest(px, py);
                    return;
                }

                if (this.clickMove)
                  this.clickMoveTo(px, py);
              }
            },

            playerInteract: function (entity)
            {
              var p = this.player;
              if (!entity)
                return;

              if (entity && !p.hasTarget() && !entity.isDying )
              {
                p.setTarget(entity);
              }
              if (p.isNextTooEntity(entity))
                p.lookAtEntity(entity);
              log.info("player target: "+p.target.id);

              if (entity instanceof Block && p.isNextTooEntity(entity) &&
                p.isFacingEntity(entity))
              {
                var block = entity;
                if (block == p.holdingBlock) {
                  block.place(p);
                  p.holdingBlock = null;
                } else {
                  block.pickup(p);
                }
                return;
              }
              if (entity instanceof Item)
              {
                this.makePlayerGoToItem(entity);
                return;
              }
              else if (entity instanceof NpcStatic || entity instanceof NpcMove)
              {
                this.speakToNPC(entity);
                return;
              }

              if(entity instanceof Player && entity !== this.player)
              {
                  this.makePlayerAttack(entity);
                  //this.playerPopupMenu.click(entity);
              }
              else if(entity instanceof Mob ||
                      (entity instanceof Player && entity !== this.player && this.player.pvpTarget == entity))
              {
                  log.info("makePlayerAttack!");
                  this.makePlayerAttack(entity);
                  return;
              }
              else if (entity instanceof Node) {
                  this.makePlayerHarvestEntity(entity);
              }
              else if(entity instanceof Chest)
              {
                  this.makePlayerOpenChest(entity);
              }

            },

            makePlayerHarvestEntity: function (entity) {
              var p = this.player;

              if (!p.isNextTooEntity(entity)) {
                p.follow(entity);
                return;
              }

              if (!p.hasHarvestWeapon(entity.weaponType)) {
                game.showNotification(["CHAT", "HARVEST_WRONG_TYPE", entity.weaponType]);
                return;
              }

              p.lookAtEntity(entity);
              p.harvestOn(entity.weaponType);

              this.client.sendHarvestEntity(entity);
            },

            makePlayerHarvest: function (px, py) {
              var p = this.player;

              if (!p.hasHarvestWeapon()) {
                game.showNotification(["CHAT", "HARVEST_NO_WEAPON"]);
                return;
              }

              var type = p.getWeaponType();
              if (type == null) {
                game.showNotification(["CHAT", "HARVEST_WRONG_TYPE", type]);
                return;
              }

              var gpos = getGridPosition(px, py);
              if (!this.mapContainer.isHarvestTile(gpos, type)) {
                game.showNotification(["CHAT", "HARVEST_WRONG_TYPE", type]);
                return;
              }

              p.lookAtTile(px, py);
              p.harvestOn(type);

              this.client.sendHarvest(px, py);
            },

            clickMoveTo: function (px, py) {
              var self = this;
              log.info("makePlayerGoTo");
              var tsh = G_TILESIZE >> 1;
              //var ts = game.tilesize;

              //log.info("so:"+so[0]+","+so[1]);
              var p = this.player;

              var colliding = this.mapContainer.isColliding(px,py);

              //var tpos = {x: pos.x, y: pos.y};
              if (colliding)
              {
                var x = p.x - px;
                var y = p.y - py;

                var o1 = (x < 0) ? Types.Orientations.LEFT : Types.Orientations.RIGHT;
                var o2 = (y < 0) ? Types.Orientations.UP : Types.Orientations.DOWN;
                var o = (Math.abs(x) > Math.abs(y)) ? o1 : o2;

                var orientations = [1,2,3,4];
                orientations.splice(orientations.indexOf(o), 1);
                orientations.unshift(o);

                for(var o of orientations)
                {
                  var p2 = this.player.nextDist(px, py, o, tsh);
                  if (!this.mapContainer.isColliding(p2[0],p2[1]))
                  {
                    this.makePlayerGoTo(p2[0], p2[1]);
                    return;
                  }
                }
              }
              else {
                  this.makePlayerGoTo(px, py);
              }
            },


            speakToNPC: function (entity) {
              var p = this.player;
              if (!p.isNextTooEntity(entity))
                p.follow(entity);
      				else
      					this.makeNpcTalk(entity);
            },

            updateCameraEntity: function(id, entity)
            {
              //log.info(id+ " updateCameraEntity");
              var self = this;
              if (!self.camera) return;

              if (!entity || (entity instanceof Character && entity.isDead))
              {
                //log.info(id+ " updateCameraEntity - Deleted.");

                self.camera.entities[id] = null;
                self.camera.outEntities[id] = null;

                delete self.camera.entities[id];
                delete self.camera.outEntities[id];
                return;
              }

              if (!self.camera.entities[id] && self.camera.isVisible(entity, 1))
              {
                  //log.info(id+ " updateCameraEntity - in Screen Edges");
                  self.camera.entities[id] = entity;
                  self.camera.outEntities[id] = entity;
                  return;
              }

              if (!self.camera.outEntities[id] && self.camera.isVisible(entity, 10))
              {
                  self.camera.outEntities[id] = entity;
                  return;
              }

            },

            say: function(message) {
                //All commands must be handled server sided.
                if(!this.chathandler.processSendMessage(message)){
                    this.client.sendChat(message);
                }

            },

            respawnPlayer: function() {
                log.debug("Beginning respawn");

                this.player.revive();

                this.updateBars();

                //this.addEntity(p);
                this.initPlayer();

                this.started = true;
                //this.client.enable();
                this.client.sendPlayerRevive();

                log.debug("Finished respawn");
            },

            onGameStart: function(callback) {
                this.gamestart_callback = callback;
            },

            onClientError: function(callback) {
                this.clienterror_callback = callback;
            },

            onDisconnect: function(callback) {
                this.disconnect_callback = callback;
            },

            onPlayerDeath: function(callback) {
                this.playerdeath_callback = callback;
            },

            onUpdateTarget: function(callback){
                this.updatetarget_callback = callback;
            },
            onPlayerExpChange: function(callback){
                this.playerexp_callback = callback;
            },

            onPlayerHealthChange: function(callback) {
                this.playerhp_callback = callback;
            },

            onPlayerEnergyChange: function(callback) {
                this.playerep_callback = callback;
            },

            onBarStatsChange: function(callback) {
                this.barstats_callback = callback;
            },


            onPlayerHurt: function(callback) {
                this.playerhurt_callback = callback;
            },

            onNotification: function(callback) {
                this.notification_callback = callback;
            },

            resize: function() {
                var x = this.camera.x,
                    y = this.camera.y,
                    currentScale = this.renderer.scale,
                    newScale = this.renderer.getScaleFactor();
                var self = this;

                var resizeGameFunc = function () {
                  self.ready = false;
                  self.renderer.rescaling = true;
                  //self.renderer.setWinDimension();
                  //self.renderer.calcZoom();
                  self.renderer.rescale();
                  self.renderer.resizeCanvases();
                  self.camera.setRealCoords();
                  self.moveEntityThreshold = ~~(self.camera.gridW / 2) + 1;
                  self.ready = true;
                  self.renderer.rescaling = false;
                  self.updateBars();
                  self.updateExpBar();
                  //self.updateTarget();
                }

                resizeGameFunc();

                this.inventoryHandler.refreshInventory();
                if (this.player && this.player.skillHandler) {
                    this.player.skillHandler.displayShortcuts();
                }
                if (this.storeDialog.visible)
                	this.storeDialog.rescale();
                if (this.bankDialog.visible) {
                	this.bankDialog.rescale();
                }
            },

            updateBars: function() {
                if(this.player && this.playerhp_callback && this.playerep_callback) {
                    this.playerhp_callback(this.player.stats.hp, this.player.stats.hpMax);
                    this.playerep_callback(this.player.stats.ep, this.player.stats.epMax);
                }
            },

            updateExpBar: function(){
                if(this.player && this.playerexp_callback){
                    var level = this.player.level.base;
                    var exp = this.player.exp.base;
                    //var expInThisLevel = this.player.exp.base - Types.expForLevel[this.player.level.base-2];
                    //var expForLevelUp = Types.expForLevel[this.player.level.base-1] - Types.expForLevel[this.player.level.base-2];
                    this.playerexp_callback(level, exp);
                }
            },

            showNotification: function(data) {
                var group = data.shift();
                var langCode = data.shift();

                var message = lang.data[langCode];
                if (data.length > 0)
                  message = lang.data[langCode].format(data);

                if (group.indexOf("NOTICE") == 0)
                {
                  game.renderer.pushAnnouncement(message,30000);
                  return;
                }

                if (group.indexOf('SHOP') == 0 ||
                    group.indexOf('INVENTORY') == 0)
                {
                  if(this.craftDialog.visible) {
                      game.notifyDialog.notify(message);
                  }
                  else if(this.storeDialog.visible) {
                      game.notifyDialog.notify(message);
                  } else if(this.auctionDialog.visible) {
                      if (langCode.indexOf('SHOP_SOLD') == 0) {
                          this.auctionDialog.storeFrame.open();

                          this.auctionDialog.storeFrame.pageMyAuctions.reload();
                          this.auctionDialog.storeFrame.pageArmor.reload();
              		        this.auctionDialog.storeFrame.pageWeapon.reload();
                      }
                      else {
                      	game.notifyDialog.notify(message);
                      }
                  } else if(this.appearanceDialog.visible) {
                      if (langCode.indexOf('SHOP_SOLD') == 0) {
                          this.appearanceDialog.storeFrame.open();
                      }
                      else if (langCode.indexOf('SHOP') == 0) {
                      	game.notifyDialog.notify(message);
                      }
                  }
                }
                this.chathandler.addNotification(message);
            },

            removeObsoleteEntities: function() {
                var entities = game.entities;
                var p = game.player;
                var entity = null;
                for (var id in entities) {
                  entity = entities[id];
                  if (entity)
                    continue;
                  if (Math.abs(p.x - entity.x) > 64 || Math.abs(p.y - entity.y) > 64)
                    this.obsoleteEntities.push(entity);
                }

                var nb = _.size(this.obsoleteEntities),
                    self = this,
                    delist = [];

                if(nb > 0) {
                	for (var i=0; i < self.removeObsoleteEntitiesChunk; ++i)
                	{
                		if (i == nb)
                			break;
                		entity = this.obsoleteEntities.shift();
                  	log.info("Removed Entity: "+ entity.id);
                  	delist.push(entity.id);
                  	self.removeEntity(entity);
                  }
                  self.client.sendWho(delist);
                }
            },

            /**
             * Fake a mouse move event in order to update the cursor.
             *
             * For instance, to get rid of the sword cursor in case the mouse is still hovering over a dying mob.
             * Also useful when the mouse is hovering a tile where an item is appearing.
             */
            updateCursor: function() {
                this.movecursor();
                this.updateCursorLogic();
            },

            /**
             * Change player plateau mode when necessary
             */
            /*updatePlateauMode: function() {
                if(this.map && this.map.isPlateau(this.player.gx, this.player.gy)) {
                    this.player.isOnPlateau = true;
                } else {
                    this.player.isOnPlateau = false;
                }
            },*/

            forEachEntityRange: function(gx, gy, r, callback) {
                this.forEachEntity(function(e) {
        					if (e.gx >= gx-r && e.gx <= gx+r &&
        						e.gy >= gy-r && e.gy <= gy+r)
        					{
        						callback(e);
        					}
                });
            },

            keyDown: function(key){
                var self = this;
                if(key >= 49 && key <= 54){ // 1, 2, 3, 4, 5, 6
                    var itemSlot = key - 49;
                    var kind = this.inventoryHandler.inventory[itemSlot].itemKind;
                    if(ItemTypes.isConsumableItem(kind)){
                        this.eat(inventoryNumber);
                    }
                }
            },

// TODO - Check the Packet.
            equip: function(itemSlot){
                var itemKind = this.inventoryHandler.inventory[itemSlot].itemKind;

                var equipSlot = ItemTypes.getEquipmentSlot(itemKind);
                if (equipSlot > -1)
                  this.client.sendItemSlot([1, 0, itemSlot, 0, 2, equipSlot]);

                //this.menu.close();
                game.statDialog.update();
            },

            unequip: function(index) {
                this.client.sendItemSlot([1, 2, index, 0, 0, -1]);
                game.statDialog.update();
            },

            useItem: function(item, type){
              var kind = item.itemKind;
              if (ItemTypes.isConsumableItem(kind)) {
                if(kind && this.inventoryHandler.healingCoolTimeCallback === null
                   && (ItemTypes.isHealingItem(kind) && this.player.stats.hp < this.player.stats.hpMax
                   && this.player.stats.hp > 0) || (ItemTypes.isConsumableItem(kind) && !ItemTypes.isHealingItem(kind)))
                {
                    if(this.inventoryHandler.decInventory(item.slot))
                    {
                        this.client.sendItemSlot([0, 0, item.slot, 1]);
                        this.audioManager.playSound("heal");
                        game.shortcuts.refresh();
                        return true;
                    }
                }
              } else if (ItemTypes.isEquippable(kind)) {
                if (type == 2) {
                  game.unequip(slot);
                }
                else {
                  game.equip(realslot);
                }
                return true;
              }
              return false;
            },

            repairItem: function (type, item, itemIndex) {
              var self = this;
              if (!item) return;

              if(!this.ready) return;

              var price = ItemTypes.getRepairPrice(item);
              var strPrice = 'Cost ' + price + ' to Repair.';
              if (price > this.player.gold[0]) {
                  game.showNotification(["SHOP", "SHOP_NOGOLD"]);
                  return;
              }
              this.confirmDialog.confirm(strPrice, function(result) {
                  if(result) {
                      self.client.sendStoreRepair(type, itemIndex);
                  }
              });
            },

            enchantItem: function (type, item, itemIndex) {
              var self = this;
              if (!item) return;

              if(!this.ready) return;

              var price = ItemTypes.getEnchantPrice(item);
              var strPrice = 'Cost ' + price + ' to Enchant.';
              if (price > this.player.gold[0]) {
                  game.showNotification(["SHOP", "SHOP_NOGOLD"]);
                  return;
              }
              this.confirmDialog.confirm(strPrice, function(result) {
                  if(result) {
                      self.client.sendStoreEnchant(type, itemIndex);
                  }
              });
            },

        });

        return Game;
});

// TODO - Overlapping Block Monsters is not working!!!.
;

/* global Types */
app = null;
G_LATENCY = 75;
GROUNDTRIP = G_LATENCY * 2;
G_UPDATE_INTERVAL = 16;
//G_RENDER_INTERVAL = 16;
G_TILESIZE = 16;

ATTACK_INTERVAL = 1000;
ATTACK_MAX = 4000;

Container = {
  STAGE: new PIXI.Container(),
  BACKGROUND: new PIXI.Container(),
  ENTITIES: new PIXI.Container(),
  FOREGROUND: new PIXI.Container(),
  COLLISION: new PIXI.Container(),
  COLLISION2: new PIXI.Container(),
  HUD: new PIXI.Container(),
  HUD2: new PIXI.Container()
};

Container.STAGE.interactive = true;
//Container.STAGE.hitArea = new PIXI.Rectangle(0, 0, Container, 100);

Object.freeze(Container);

define('main',['app', 'entrypoint', 'data/langdata', 'util',
    'button2', 'dialog/dialog', 'game', 'bubble'], function(App, EntryPoint, LangData) {
    //global app, game;
    lang = new LangData("EN");

    var initApp = function(server) {

    	var startEvents = function () {
	    if (typeof(StatusBar) !== 'undefined')
	    	    StatusBar.hide();

	}
 	document.addEventListener("deviceready", startEvents, false);

  window.onbeforeunload = function (e) {
      if (typeof userclient !== "undefined" && userclient.connection)
        userclient.connection.close();
      else if (typeof game !== "undefined" && game.client && game.client.connection)
        game.client.connection.close();
  }

    	 $(document).ready(function() {

            app = new App();
            app.center();

            DragItem = null;
            DragBank = null;

            if(Detect.isWindows()) {
                // Workaround for graphical glitches on text
                $('body').addClass('windows');
            }

            if(Detect.isOpera()) {
                // Fix for no pointer events
                $('body').addClass('opera');
            }

            if(Detect.isFirefoxAndroid()) {
                // Remove chat placeholder
                $('#chatinput').removeAttr('placeholder');
            }

            $('.barbutton').click(function() {
                $(this).toggleClass('active');
            });
            /*
            $('#rankingbutton').click(function(event){
                if(app.game && app.ready && app.game.ready){
                    app.game.client.sendRanking('get');
                    app.hideAllSubwindow();
                    app.game.rankingHandler.show();
                }
            });*/

            $('#chatbutton').click(function() {
                if($('#chatbox').hasClass('active')) {
                    app.hideChat();
                } else {
                    app.showChat();
                }
                /*if($('#chatbutton').hasClass('active')) {
                    app.showChat();
                } else {
                    app.hideChat();
                }*/
            });

            /*$('#instructions').click(function() {
                app.hideWindows();
            });

            $('#playercount').click(function() {
             app.togglePopulationInfo();
             }); */

            $('#population').click(function() {
                app.togglePopulationInfo();
            });

            $('.clickable').click(function(event) {
                //event.stopPropagation();
                clickFunc(e);
            });

            $('#change-password').click(function() {
                app.loadWindow('loginWindow', 'passwordWindow');
            });

      			$('#shortcutbutton').click(function() {
      				$('#attackContainer').show();
      				$('#shortcutbutton').hide();
      			});

            $('#attackContainerClose').click(function() {
				      $('#shortcutbutton').show();
				      $('#attackContainer').hide();
            });

            // Create New Character fields
            /*$('#nameinput').bind("keyup", function() {
                app.toggleButton();
            });
            $('#pwinput').bind("keyup", function() {
                app.toggleButton();
            });
            $('#pwinput2').bind("keyup", function() {
                app.toggleButton();
            });
            $('#emailinput').bind("keyup", function() {
                app.toggleButton();
            });

            // Change Password Fields.
            $('#cpnameinput').bind("keyup", function() {
                app.toggleButton();
            });
            $('#cppwinputold').bind("keyup", function() {
                app.toggleButton();
            });
            $('#cppwinput').bind("keyup", function() {
                app.toggleButton();
            });
            $('#cppwinput2').bind("keyup", function() {
                app.toggleButton();
            });*/


            //$('#notifications div').bind(TRANSITIONEND, app.resetMessagesPosition.bind(app));

            $('.close').click(function() {
                app.hideWindows();
            });

            //$('.play').click(function(event) {
                 //app.tryStartingGame();

                 /*switch (app.initialAction)
                 {
                 case "loadcharacter":
                   log.info("sendLogin");
                   client.sendLogin(self.player);
                   break;
                 case "createcharacter":
                   client.sendCreate(self.player);
                   break;
                 } */
            //});

            //document.addEventListener("touchstart", function() {},false);


            //$('#resize-check').bind("transitionend", app.resizeUi.bind(app));
            //$('#resize-check').bind("webkitTransitionEnd", app.resizeUi.bind(app));
            //$('#resize-check').bind("oTransitionEnd", app.resizeUi.bind(app));

            log.info("App initialized.");

            initGame();

            return app;
        });
    };

    var initGame = function() {
        require(['game', 'button2'], function(Game, Button2) {
            var canvas = document.getElementById("entities"),
                input = document.getElementById("chatinput");

            game = new Game(app);
            game.setup(input);

            app.setGame(game);

            game.useServer == "world";

            game.onGameStart(function() {
		            var entry = new EntryPoint();
		            entry.execute(game);
            });

            game.onDisconnect(function(message) {
                $('#errorwindow').find('p').html(message+"<em>Disconnected. Please reload the page.</em>");
                $('#errorwindow').show();
            });

            game.onClientError(function(message) {
                $('#errorwindow').find('p').html(message);
                $('#errorwindow').show();
            });

            game.onPlayerDeath(function() {
                game.player.dead();
                //game.removeEntity(game.player);

                //game.player.flipSpriteY = false;
                //$('body').addClass('death');
                $('#diedwindow').show();
            });

            game.onNotification(function(message) {
                app.showMessage(message);
            });

            app.initHealthBar();
            app.initEnergyBar();
            app.initExpBar();
            app.initPlayerBar();

            $('#nameinput').attr('value', '');
            $('#pwinput').attr('value', '');
            $('#pwinput2').attr('value', '');
            $('#emailinput').attr('value', '');
            $('#chatbox').attr('value', '');

            var clickFunc = function (e)
            {
              app.center();
              app.setMouseCoordinates(e.data.global.x, e.data.global.y);
              if(game && !app.dropDialogPopuped && !app.auctioSellDialogPopuped)
              {
                  if (!game.usejoystick)
                    game.click();
              }
              app.hideWindows();
              event.stopPropagation();
            };

            /*if(game.renderer.mobile || game.renderer.tablet) {
              Container.STAGE.addListener('touchstart', (e) => {
                clickFunc(e);
              });
              Container.STAGE.addListener('touchend', (e) => {
              });
            } else {
              Container.STAGE.addListener('pointerdown', (e) => {
                //console.log("clicked");
                //clickFunc(e);
              });
              Container.STAGE.addListener('pointermove', (e) => {
                  //console.log("fired");
                  app.setMouseCoordinates(e.data.global.x, e.data.global.y);
                  if(game.started) {
                      game.movecursor();
                  }
              });
            }*/

            $(document).ready(function () {
      		    $('#gui').on('click', function(event) {
      				//event.preventDefault();

      		    });
		          game.inventoryHandler.loadInventoryEvents();
            });
            $('#respawn').click(function(event) {
                game.audioManager.playSound("revive");
                game.respawnPlayer();
                $('#diedwindow').hide();
            });
            this.scale = game.renderer.getScaleFactor();

            Button2.configure = {background: {top: this.scale * 0, width: this.scale * 0}, kinds: [0, 3, 2]};

            var self = this;

            // Inventory Button
            this.inventoryButton = new Button2('#inventory', {background: {left: 0, top: 32}});
            this.inventoryButton.onClick(function(sender, event) {
              if(game && game.ready) {
                game.inventoryHandler.toggleInventory();
              }
            });

            // Character Button
            this.statButton = new Button2('#character', {background: {left: 4*32 }});
            this.statButton.onClick(function(sender, event) {
                app.toggleCharacter();
            });
            game.statDialog.button = this.statButton;
            app.toggleCharacter = function() {
      				if(game && game.ready) {
      					game.statDialog.show();
      				}
            };

            // Skill button
            this.skillButton = new Button2('#skill', {background: {left: 96 }});
            this.skillButton.onClick(function(sender, event) {
                app.toggleSkill();
            });
            //game.skillDialog.button = this.skillButton;
            app.toggleSkill = function() {
      				if(game && game.ready) {
      					game.skillDialog.show();
      				}
            };

            // Quest Button
            this.questButton = new Button2('#help', {background: {left: 352}});
            this.questButton.onClick(function(sender, event) {
                game.questhandler.toggleShowLog();
            });


            // Settings Button
            this.settingsButton = new Button2('#settings', {background: {left: 32}, downed: false});
            this.settingsButton.onClick(function(sender, event) {
                game.settingsHandler.show();
            });
            game.settingsButton = this.settingsButton;


            // Warp Button
            this.warpButton = new Button2('#warp', {background: {left: 482}});
            this.warpButton.onClick(function(sender, event) {
                app.toggleWarp();
            });
            game.warpButton = this.warpButton;
            app.toggleWarp = function() {
                if(game && game.ready) {
                    game.teleportMaps(0);
                }
            };

            // Chat Button
            /*this.chatButton = new Button2('#chat', {background: {left: this.scale * 0}});
            this.chatButton.onClick(function(sender, event) {
                app.toggleChat();
                event.preventDefault();
            });
            game.chatButton = this.chatButton;
            app.toggleChat = function() {
                if(game && game.ready) {
            			if(!$('#chatbutton').hasClass('active')) {
            				app.showChat();
            			} else {
            				app.hideChat();
            			}
                }
            }*/

	      // Party Button
            this.socialButton = new Button2('#social', {background: {left: 416}});
            this.socialButton.onClick(function(sender, event) {
                app.toggleSocial()
            });
            game.socialButton = this.socialButton;
            app.toggleSocial = function() {
                if(game && game.ready) {
                	game.socialHandler.show();
                }
            }

			// Leader Button
            this.achievementButton = new Button2('#achievement', {background: {left: 448}});
            this.achievementButton.onClick(function(sender, event) {
                game.achievementHandler.toggleShowLog();
            });
            game.achievementButton = this.achievementButton;


            this.storeButton = new Button2('#store', {background: {left: 160}});
            this.storeButton.onClick(function(sender, event) {
                app.toggleStore();
            });
            game.storeButton = this.storeButton;
            app.toggleStore = function() {
                if(game && game.ready) {
                	game.storeHandler.show();
                }
            }

            $(document).bind('mousedown', function(event){
                if(event.button === 2){
                    return false;
                }
            });
            $(document).bind('mouseup', function(event) {
                if(event.button === 2 && game.ready) {
                    //game.rightClick();
                    return false;
                }
            });

            var jqGame = $('#game');

            var touchX, touchY;
            jqGame.on("touchstart",function(e){
              game.playerClick = false;
              var left = this.offsetParent.offsetLeft;
              var top = this.offsetParent.offsetTop;
              touchX = ~~((e.touches[0].pageX-left) * game.renderer.gameZoom);
              touchY = ~~((e.touches[0].pageY-top) * game.renderer.gameZoom);
              app.setMouseCoordinates(touchX, touchY);
              if(game.started) {
                  game.movecursor();
              }
            });

            jqGame.on("touchmove",function(e){
              //var x = ~~(e.touches[0].clientX * game.renderer.gameZoom);
              //var y = ~~(e.touches[0].clientY * game.renderer.gameZoom);
            });

            jqGame.on("touchend",function(e){

              /*var x = ~~(e.changedTouches[0].clientX * game.renderer.gameZoom);
              var y = ~~(e.changedTouches[0].clientY * game.renderer.gameZoom);
              if (Math.abs(touchX - x) < 20 && Math.abs(touchY - y) < 20)
                game.playerClick = true;
              if (game.playerClick)
              {
                if(game.started) {
                    game.click();
                }
              }*/
              //game.playerClick = false;
            });

            jqGame.on('click touchend', function(event) {
								game.click();
                /*if (event.button === 0) {

                }
                if(event.button === 2) {
                    return false;
                }*/
            });

            jqGame.mousemove(function(e) {
                var x = e.offsetX;
                var y = e.offsetY;
                app.setMouseCoordinates(x, y);
                if(game.started) {
                    game.updateCursor();
                    //game.movecursor();
                }
            });

            $(document).keyup(function(e) {
                moveKeys(e, e.which, false);
            });

            //var keyMoves = {};
            //var pMove = 0;
            var moveKeys = function (e, key, bool) {
              //if (bool && keyMoves[key] == bool)
                //return;
              var p = game.player;
              var gameKeys = p && game.started && !$('#chatbox').hasClass('active');
              if (gameKeys) {
                  switch(key) {
                      case Types.Keys.LEFT:
                      case Types.Keys.A:
                      case Types.Keys.KEYPAD_4:
                          //if (pMove == key)
                            //return;
                          game.player.move(Types.Orientations.LEFT, bool);
                          //keyMoves[key] = bool;
                          //pMove = (!bool) ? key : 0;
                          break;
                      case Types.Keys.RIGHT:
                      case Types.Keys.D:
                      case Types.Keys.KEYPAD_6:
                        //if (pMove == key)
                          //return;
                          game.player.move(Types.Orientations.RIGHT, bool);
                          //keyMoves[key] = bool;
                          //pMove = (!bool) ? key : 0;
                          break;
                      case Types.Keys.UP:
                      case Types.Keys.W:
                      case Types.Keys.KEYPAD_8:
                          game.player.move(Types.Orientations.UP, bool);
                          //keyMoves[key] = bool;
                          break;
                      case Types.Keys.DOWN:
                      case Types.Keys.S:
                      case Types.Keys.KEYPAD_2:
                          game.player.move(Types.Orientations.DOWN, bool);
                          //keyMoves[key] = bool;
                          break;
                  }
              }
            };


            $(document).keydown(function(e) {
                /*if (e.repeat) {
                  return;
                }*/

                //console.warn("$(document).keydown");
                var key = e.which,
                    $chat = $('#chatinput');

                if($('#dropDialog').is(":visible"))
                  return;

                //log.info("keydown="+key);
                if(key === Types.Keys.ENTER) {
                    if($('#chatbox').hasClass('active')) {
                        app.hideChat();
                    } else {
                        app.showChat();
                    }
                }

                moveKeys(e, e.which, true);

                var p = game.player;
                var gameKeys = p && game.started && !$('#chatbox').hasClass('active');
                if (gameKeys) {
                    switch(key) {
                        case Types.Keys.T:
                            game.playerTargetClosestEntity(1);
                            break;
                        case Types.Keys.Y:
                            game.playerTargetClosestEntity(-1);
                            break;
                        case Types.Keys.SPACE:
                            game.makePlayerInteractNextTo();
                            break;
                        case Types.Keys.KEY_1:
                          $('#shortcut0').trigger('click');
                          break;
                        case Types.Keys.KEY_2:
                          $('#shortcut1').trigger('click');
                          break;
                        case Types.Keys.KEY_3:
                          $('#shortcut2').trigger('click');
                          break;
                        case Types.Keys.KEY_4:
                          $('#shortcut3').trigger('click');
                          break;
                        case Types.Keys.KEY_5:
                          $('#shortcut4').trigger('click');
                          break;
                        case Types.Keys.KEY_6:
                          $('#shortcut5').trigger('click');
                          break;
                        case Types.Keys.KEY_7:
                          $('#shortcut6').trigger('click');
                          break;
                        case Types.Keys.KEY_8:
                          $('#shortcut7').trigger('click');
                          break;
                        /*case Types.Keys.KEY_9:
                          $('#skill5').trigger('click');
                          break;*/
                        default:
                            break;
                    }
                }
            });

            /*
            $('#attackButton').on("touchstart mousedown", function(e) {
                if (!game.player || game.player.isDead)
                	return;

                e.preventDefault();
                setTimeout(function() {
                		game.makePlayerInteractNext();
                }, game.inputLatency);
            });
            $('#attackButton').on("mouseup touchend", function(e) {
            	clearInterval(game.autoattack);
            });
            */



            //var keyFired= false;

            $('#chatinput').keydown(function(e) {
                if (e.repeat) { return; }
                /*if(keyFired) {
                  return;
                }
                keyFired = true;*/
                var key = e.which,
                    $chat = $('#chatinput'),
                    placeholder = $(this).attr("placeholder");

                //   if (!(e.shiftKey && e.keyCode === 16) && e.keyCode !== 9) {
                //        if ($(this).val() === placeholder) {
                //           $(this).val('');
                //            $(this).removeAttr('placeholder');
                //            $(this).removeClass('placeholder');
                //        }
                //    }

                if(key === 13) {
                    if($chat.val() !== '') {
                        if(game.player) {
                            game.say($chat.val());
                        }
                        $chat.val('');
                        app.hideChat();
                        $('#foreground').focus();
                        return false;
                    } else {
                        app.hideChat();
                        return false;
                    }
                }

                if(key === 27) {
                    app.hideChat();
                    return false;
                }
            });

            $('#chatinput').focus(function(e) {
                var placeholder = $(this).attr("placeholder");

                if(!Detect.isFirefoxAndroid()) {
                    $(this).val(placeholder);
                }

                if ($(this).val() === placeholder) {
                    this.setSelectionRange(0, 0);
                }
            });


            $('#dropAccept').click(function(event) {
                //var pos = game.getMouseGridPosition();
                var count = parseInt($('#dropCount').val());
                if(count > 0) {
                	if (app.inventoryNumber == -1) // Send to bank.
                	{
                    var gold = game.player.gold[0];
                		if (count > gold) count=gold;
                		game.client.sendGold(0, count, 1);
                	}
                	else if (app.inventoryNumber == -2) // Send to inventory.
                	{
                    var bgold = game.player.gold[1];
                		if (count > bgold) count=bgold;
                		game.client.sendGold(1, count, 0);
                	}
                	else
                	{
                    if(count > game.inventoryHandler.inventory[app.inventoryNumber])
                        count = game.inventoryHandler.inventory[app.inventoryNumber];

                    game.client.sendItemSlot([3, 0, app.inventoryNumber, count]);

                    game.inventoryHandler.inventory[app.inventoryNumber] -= count;
                    if(game.inventoryHandler.inventory[app.inventoryNumber] === 0)
                    {
                      //game.inventoryHandler.inventories[app.inventoryNumber] = null;
                      game.inventoryHandler.inventory[app.inventoryNumber] = null;
                    }

                	}
                }

                setTimeout(function () {
                    app.hideDropDialog();
                }, 100);

            });

            $('#dropCancel').click(function(event) {
                setTimeout(function () {
                    app.hideDropDialog();
                }, 100);

            });

            $('#auctionSellAccept').click(function(event) {
                try {
                    var count = parseInt($('#auctionSellCount').val());
                    if(count > 0) {
                        game.client.sendAuctionSell(app.inventoryNumber,count);
                        game.inventoryHandler.inventory[app.inventoryNumber] = null;
                    }
                } catch(e) {
                }

                setTimeout(function () {
                    app.hideAuctionSellDialog();
                }, 100);

            });

            $('#auctionSellCancel').click(function(event) {
                setTimeout(function () {
                    app.hideAuctionSellDialog();
                }, 100);

            });



            $('#nameinput').focusin(function() {
                $('#name-tooltip').addClass('visible');
            });

            $('#nameinput').focusout(function() {
                $('#name-tooltip').removeClass('visible');
            });

            $('#nameinput').keypress(function(event) {
                $('#name-tooltip').removeClass('visible');
            });

            /*$('#mutebutton').click(function() {
                game.audioManager.toggle();
            });

            $('#helpbutton').click(function() {
                game.questhandler.toggleShowLog();
            });*/

            $(document).bind("keydown", function(e) {
                var key = e.which,
                    $chat = $('#chatinput');

                if(key === 13) { // Enter
                    if(game.started) {
                        $chat.focus();
                        return false;
                    }
                    if ($('#user_window').is(':visible'))
                    {
                        $('input').blur();      // exit keyboard on mobile
                        app.tryUserAction(1);
                        return false;           // prevent form submit
                    }
                    if ($('#player_window').is(':visible'))
                    {
                        $('input').blur();      // exit keyboard on mobile
                        if ($('#player_create_form').is(':visible'))
                          app.tryPlayerAction(4);
                        else if($('#player_load').is(':visible'))
                          app.tryPlayerAction(3);
                        return false;           // prevent form submit
                    }

                }
            });

            if(game.renderer.tablet) {
                $('body').addClass('tablet');
            }
        });
        $('#healthbar').bind('mousedown', function (event) {
            if(event.button === 2) {
                return false;
            }
        });

        $('#healthbar').bind('mouseup', function (event) {
            if(event.button === 2) {
                if(game.autoEattingHandler) {
                    clearInterval(game.autoEattingHandler);

                    $('#hpguide').css('display', 'none');
                }
                return false;
            }
        });

        $('#hpguide').bind('mousedown', function (event) {
            if(event.button === 2) {
                return false;
            }
        });

        $('#hpguide').bind('mouseup', function (event) {
            if(event.button === 2) {
                if(game.autoEattingHandler) {
                    clearInterval(game.autoEattingHandler);

                    $('#hpguide').css('display', 'none');
                }
                return false;
            }
        });

    	/*$(window).blur(function(){
    	  if (game && game.client && game.player && game.started);
    	  	  //game.client.sendHasFocus(0);
    	});
    	$(window).focus(function(){
    	  if (game && game.client && game.player && game.started);
    	  	  //game.client.sendHasFocus(1);
    	});*/

	document.addEventListener('DOMContentLoaded', function () {
	  // check whether the runtime supports screen.lockOrientation
	  if (screen.lockOrientation) {
	    // lock the orientation
	    screen.lockOrientation('landscape');
	  }

	  // ...rest of the application code...
	});


	if(typeof console === "undefined"){
	      console = {};
	}
    };

    $('#armorColor').change(function(e) {
      log.info($(this).val());
    	var color = $(this).val();
    	game.client.sendColorTint("armorColor", color);
  		game.player.armorColor = color;

  		game.renderer.removeBodyColorCanvas(game.player);
  		game.renderer.createBodyColorCanvas(game.player);

    });

    $('#weaponColor').change(function(e) {
      log.info($(this).val());
    	var color = $(this).val();
    	game.client.sendColorTint("weaponColor", color);
  		game.player.weaponColor = color;

  		game.renderer.removeWeaponColorCanvas(game.player);
  		game.renderer.createWeaponColorCanvas(game.player);

    });

    return initApp();
});

/*! jQuery v3.4.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(C,e){"use strict";var t=[],E=C.document,r=Object.getPrototypeOf,s=t.slice,g=t.concat,u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},x=function(e){return null!=e&&e===e.window},c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement("script");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[o.call(e)]||"object":typeof e}var f="3.4.1",k=function(e,t){return new k.fn.init(e,t)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function d(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}k.fn=k.prototype={jquery:f,constructor:k,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(n){return this.pushStack(k.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},k.extend=k.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||m(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(l&&r&&(k.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||k.isPlainObject(n)?n:{},i=!1,a[t]=k.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},k.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=r(e))||"function"==typeof(n=v.call(t,"constructor")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){b(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(p,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?k.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return g.apply([],a)},guid:1,support:y}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=t[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var h=function(n){var e,d,b,o,i,h,f,g,w,u,l,T,C,a,E,v,s,c,y,k="sizzle"+1*new Date,m=n.document,S=0,r=0,p=ue(),x=ue(),N=ue(),A=ue(),D=function(e,t){return e===t&&(l=!0),0},j={}.hasOwnProperty,t=[],q=t.pop,L=t.push,H=t.push,O=t.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",W="\\["+M+"*("+I+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+M+"*\\]",$=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",F=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),_=new RegExp("^"+M+"*,"+M+"*"),z=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp(M+"|>"),X=new RegExp($),V=new RegExp("^"+I+"$"),G={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){T()},ae=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(t=O.call(m.childNodes),m.childNodes),t[m.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){L.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&((e?e.ownerDocument||e:m)!==C&&T(e),e=e||C,E)){if(11!==p&&(u=Z.exec(t)))if(i=u[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return H.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&d.getElementsByClassName&&e.getElementsByClassName)return H.apply(n,e.getElementsByClassName(i)),n}if(d.qsa&&!A[t+" "]&&(!v||!v.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===p&&U.test(t)){(s=e.getAttribute("id"))?s=s.replace(re,ie):e.setAttribute("id",s=k),o=(l=h(t)).length;while(o--)l[o]="#"+s+" "+xe(l[o]);c=l.join(","),f=ee.test(t)&&ye(e.parentNode)||e}try{return H.apply(n,f.querySelectorAll(c)),n}catch(e){A(t,!0)}finally{s===k&&e.removeAttribute("id")}}}return g(t.replace(B,"$1"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+" ")>b.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function le(e){return e[k]=!0,e}function ce(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split("|"),r=n.length;while(r--)b.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function de(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}for(e in d=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},T=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:m;return r!==C&&9===r.nodeType&&r.documentElement&&(a=(C=r).documentElement,E=!i(C),m!==C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",oe,!1):n.attachEvent&&n.attachEvent("onunload",oe)),d.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),d.getElementsByTagName=ce(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),d.getElementsByClassName=K.test(C.getElementsByClassName),d.getById=ce(function(e){return a.appendChild(e).id=k,!C.getElementsByName||!C.getElementsByName(k).length}),d.getById?(b.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=d.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):d.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},b.find.CLASS=d.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(d.qsa=K.test(C.querySelectorAll))&&(ce(function(e){a.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+k+"-]").length||v.push("~="),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||v.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(d.matchesSelector=K.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){d.disconnectedMatch=c.call(e,"*"),c.call(e,"[s!='']:x"),s.push("!=",$)}),v=v.length&&new RegExp(v.join("|")),s=s.length&&new RegExp(s.join("|")),t=K.test(a.compareDocumentPosition),y=t||K.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!d.sortDetached&&t.compareDocumentPosition(e)===n?e===C||e.ownerDocument===m&&y(m,e)?-1:t===C||t.ownerDocument===m&&y(m,t)?1:u?P(u,e)-P(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===C?-1:t===C?1:i?-1:o?1:u?P(u,e)-P(u,t):0;if(i===o)return pe(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?pe(a[r],s[r]):a[r]===m?-1:s[r]===m?1:0}),C},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==C&&T(e),d.matchesSelector&&E&&!A[t+" "]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||d.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){A(t,!0)}return 0<se(t,C,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!==C&&T(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==C&&T(e);var n=b.attrHandle[t.toLowerCase()],r=n&&j.call(b.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:d.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!d.detectDuplicates,u=!d.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(b=se.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=p[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&p(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(F," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,v){var y="nth"!==h.slice(0,3),m="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?"nextSibling":"previousSibling",c=e.parentNode,f=x&&e.nodeName.toLowerCase(),p=!n&&!x,d=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(x?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l="only"===h&&!u&&"nextSibling"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&p){d=(s=(r=(i=(o=(a=c)[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===S&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if(1===a.nodeType&&++d&&a===e){i[h]=[S,s,d];break}}else if(p&&(d=s=(r=(i=(o=(a=e)[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===S&&r[1]),!1===d)while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if((x?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++d&&(p&&((i=(o=a[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[S,d]),a===e))break;return(d-=v)===g||d%g==0&&0<=d/g}}},PSEUDO:function(e,o){var t,a=b.pseudos[e]||b.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[k]?a(o):1<a.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=P(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace(B,"$1"));return s[k]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return V.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=de(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=he(e);function me(){}function xe(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&"parentNode"===c,p=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[S,p];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[k]||(e[k]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===S&&r[1]===p)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Te(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Ce(d,h,g,v,y,e){return v&&!v[k]&&(v=Ce(v)),y&&!y[k]&&(y=Ce(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),f=!d||!e&&h?c:Te(c,s,d,n,r),p=g?y||(e?d:l||v)?[]:t:f;if(g&&g(f,p,n,r),v){i=Te(p,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(p[u[o]]=!(f[u[o]]=a))}if(e){if(y||d){if(y){i=[],o=p.length;while(o--)(a=p[o])&&i.push(f[o]=a);y(null,p=[],i,r)}o=p.length;while(o--)(a=p[o])&&-1<(i=y?P(e,a):s[o])&&(e[i]=!(t[i]=a))}}else p=Te(p===t?p.splice(l,p.length):p),y?y(null,t,p,r):H.apply(t,p)})}function Ee(e){for(var i,t,n,r=e.length,o=b.relative[e[0].type],a=o||b.relative[" "],s=o?1:0,u=be(function(e){return e===i},a,!0),l=be(function(e){return-1<P(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=b.relative[e[s].type])c=[be(we(c),t)];else{if((t=b.filter[e[s].type].apply(null,e[s].matches))[k]){for(n=++s;n<r;n++)if(b.relative[e[n].type])break;return Ce(1<s&&we(c),1<s&&xe(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(B,"$1"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&xe(e))}c.push(t)}return we(c)}return me.prototype=b.filters=b.pseudos,b.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=x[e+" "];if(l)return t?0:l.slice(0);a=e,s=[],u=b.preFilter;while(a){for(o in n&&!(r=_.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=z.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(B," ")}),a=a.slice(n.length)),b.filter)!(r=G[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):x(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,x,r,i=[],o=[],a=N[e+" "];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[k]?i.push(a):o.push(a);(a=N(e,(v=o,m=0<(y=i).length,x=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l="0",c=e&&[],f=[],p=w,d=e||x&&b.find.TAG("*",i),h=S+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t===C||t||i);l!==g&&null!=(o=d[l]);l++){if(x&&o){a=0,t||o.ownerDocument===C||(T(o),n=!E);while(s=v[a++])if(s(o,t||C,n)){r.push(o);break}i&&(S=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=q.call(r));f=Te(f)}H.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(S=h,w=p),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&E&&b.relative[o[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=G.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],b.relative[s=a.type])break;if((u=b.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&xe(o)))return H.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},d.sortStable=k.split("").sort(D).join("")===k,d.detectDuplicates=!!l,T(),d.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),d.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(C);k.find=h,k.expr=h.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=h.uniqueSort,k.text=h.getText,k.isXMLDoc=h.isXML,k.contains=h.contains,k.escapeSelector=h.escape;var T=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&k(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=k.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,n,r){return m(n)?k.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?k.grep(e,function(e){return e===n!==r}):"string"!=typeof n?k.grep(e,function(e){return-1<i.call(n,e)!==r}):k.filter(n,e,r)}k.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?k.find.matchesSelector(r,e)?[r]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<r;t++)if(k.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)k.find(e,i[t],n);return 1<r?k.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&N.test(e)?k(e):e||[],!1).length}});var q,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:E,!0)),D.test(r[1])&&k.isPlainObject(t))for(r in t)m(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=E.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,q=k(E);var H=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&k(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&k.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?k.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(k(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return"undefined"!=typeof e.contentDocument?e.contentDocument:(A(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(r,i){k.fn[r]=function(e,t){var n=k.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=k.filter(t,n)),1<this.length&&(O[r]||k.uniqueSort(n),H.test(r)&&n.reverse()),this.pushStack(n)}});var R=/[^\x20\t\r\n\f]+/g;function M(e){return e}function I(e){throw e}function W(e,t,n,r){var i;try{e&&m(i=e.promise)?i.call(e).done(t).fail(n):e&&m(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},k.each(e.match(R)||[],function(e,t){n[t]=!0}),n):k.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:"")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){k.each(e,function(e,t){m(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return k.each(arguments,function(e,t){var n;while(-1<(n=k.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<k.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t="",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},k.extend({Deferred:function(e){var o=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return k.Deferred(function(r){k.each(o,function(e,t){var n=m(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&m(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,m(t)?s?t.call(e,l(u,o,M,s),l(u,o,I,s)):(u++,t.call(e,l(u,o,M,s),l(u,o,I,s),l(u,o,M,o.notifyWith))):(a!==M&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==I&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(k.Deferred.getStackHook&&(t.stackTrace=k.Deferred.getStackHook()),C.setTimeout(t))}}return k.Deferred(function(e){o[0][3].add(l(0,e,m(r)?r:M,e.notifyWith)),o[1][3].add(l(0,e,m(t)?t:M)),o[2][3].add(l(0,e,m(n)?n:I))}).promise()},promise:function(e){return null!=e?k.extend(e,a):a}},s={};return k.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=k.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(W(e,o.done(a(t)).resolve,o.reject,!n),"pending"===o.state()||m(i[t]&&i[t].then)))return o.then();while(t--)W(i[t],a(t),o.reject);return o.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&$.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){C.setTimeout(function(){throw e})};var F=k.Deferred();function B(){E.removeEventListener("DOMContentLoaded",B),C.removeEventListener("load",B),k.ready()}k.fn.ready=function(e){return F.then(e)["catch"](function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0)!==e&&0<--k.readyWait||F.resolveWith(E,[k])}}),k.ready.then=F.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout(k.ready):(E.addEventListener("DOMContentLoaded",B),C.addEventListener("load",B));var _=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===w(n))for(s in i=!0,n)_(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,m(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(k(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function V(e){return e.replace(z,"ms-").replace(U,X)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=k.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(R)||[]).length;while(n--)delete r[t[n]]}(void 0===t||k.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var Q=new Y,J=new Y,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function ee(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:K.test(i)?JSON.parse(i):i)}catch(e){}J.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return J.hasData(e)||Q.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),k.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=J.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=V(r.slice(5)),ee(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof n?this.each(function(){J.set(this,n)}):_(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=J.get(o,n))?t:void 0!==(t=ee(o,n))?t:void 0;this.each(function(){J.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){J.remove(this,e)})}}),k.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,k.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),r=n.length,i=n.shift(),o=k._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){k.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:k.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),k.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?k.queue(this[0],t):void 0===n?this:this.each(function(){var e=k.queue(this,t,n);k._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&k.dequeue(this,t)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=k.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ie=E.documentElement,oe=function(e){return k.contains(e.ownerDocument,e)},ae={composed:!0};ie.getRootNode&&(oe=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===k.css(e,"display")},ue=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function le(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return k.css(e,t,"")},u=s(),l=n&&n[3]||(k.cssNumber[t]?"":"px"),c=e.nodeType&&(k.cssNumber[t]||"px"!==l&&+u)&&ne.exec(k.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)k.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,k.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ce={};function fe(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(l[c]=Q.get(r,"display")||null,l[c]||(r.style.display="")),""===r.style.display&&se(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ce[s])||(o=a.body.appendChild(a.createElement(s)),u=k.css(o,"display"),o.parentNode.removeChild(o),"none"===u&&(u="block"),ce[s]=u)))):"none"!==n&&(l[c]="none",Q.set(r,"display",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}k.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?k(this).show():k(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?k.merge([e],n):n}function ye(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var me,xe,be=/<|&#?\w+;/;function we(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===w(o))k.merge(p,o.nodeType?[o]:o);else if(be.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+k.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;k.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&-1<k.inArray(o,r))i&&i.push(o);else if(l=oe(o),a=ve(f.appendChild(o),"script"),l&&ye(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}me=E.createDocumentFragment().appendChild(E.createElement("div")),(xe=E.createElement("input")).setAttribute("type","radio"),xe.setAttribute("checked","checked"),xe.setAttribute("name","t"),me.appendChild(xe),y.checkClone=me.cloneNode(!0).cloneNode(!0).lastChild.checked,me.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!me.cloneNode(!0).lastChild.defaultValue;var Te=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function ke(){return!0}function Se(){return!1}function Ne(e,t){return e===function(){try{return E.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ae(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Se;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return k().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=k.guid++)),e.each(function(){k.event.add(this,t,i,r,n)})}function De(e,i,o){o?(Q.set(e,i,!1),k.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Q.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(k.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Q.set(this,i,r),t=o(this,i),this[i](),r!==(n=Q.get(this,i))||t?Q.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&(Q.set(this,i,{value:k.event.trigger(k.extend(r[0],k.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,i)&&k.event.add(e,i,ke)}k.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.get(t);if(v){n.handler&&(n=(o=n).handler,i=o.selector),i&&k.find.matchesSelector(ie,i),n.guid||(n.guid=k.guid++),(u=v.events)||(u=v.events={}),(a=v.handle)||(a=v.handle=function(e){return"undefined"!=typeof k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(R)||[""]).length;while(l--)d=g=(s=Ee.exec(e[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=k.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=k.event.special[d]||{},c=k.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&k.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),k.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.hasData(e)&&Q.get(e);if(v&&(u=v.events)){l=(t=(t||"").match(R)||[""]).length;while(l--)if(d=g=(s=Ee.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d){f=k.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||k.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)k.event.remove(e,d+t[l],n,r,!0);k.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=k.event.fix(e),u=new Array(arguments.length),l=(Q.get(this,"events")||{})[s.type]||[],c=k.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){a=k.event.handlers.call(this,s,l),t=0;while((i=a[t++])&&!s.isPropagationStopped()){s.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!s.isImmediatePropagationStopped())s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((k.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<k(i,this).index(l):k.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click",ke),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&Q.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ke:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(e,t){k.event.special[e]={setup:function(){return De(this,e,Ne),!1},trigger:function(){return De(this,e),!0},delegateType:t}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){k.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||k.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),k.fn.extend({on:function(e,t,n,r){return Ae(this,e,t,n,r)},one:function(e,t,n,r){return Ae(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,k(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each(function(){k.event.remove(this,e,n,t)})}});var je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,qe=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,He=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),a=Q.set(t,o),l=o.events))for(i in delete a.handle,a.events={},l)for(n=0,r=l[i].length;n<r;n++)k.event.add(t,i,l[i][n]);J.hasData(e)&&(s=J.access(e),u=k.extend({},s),J.set(t,u))}}function Ie(n,r,i,o){r=g.apply([],r);var e,t,a,s,u,l,c=0,f=n.length,p=f-1,d=r[0],h=m(d);if(h||1<f&&"string"==typeof d&&!y.checkClone&&Le.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),Ie(t,r,i,o)});if(f&&(t=(e=we(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=k.map(ve(e,"script"),Pe)).length;c<f;c++)u=e,c!==p&&(u=k.clone(u,!0,!0),s&&k.merge(a,ve(u,"script"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,k.map(a,Re),c=0;c<s;c++)u=a[c],he.test(u.type||"")&&!Q.access(u,"globalEval")&&k.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?k._evalUrl&&!u.noModule&&k._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):b(u.textContent.replace(He,""),u,l))}return n}function We(e,t,n){for(var r,i=t?k.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||k.cleanData(ve(r)),r.parentNode&&(n&&oe(r)&&ye(ve(r,"script")),r.parentNode.removeChild(r));return e}k.extend({htmlPrefilter:function(e){return e.replace(je,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=oe(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(a=ve(c),r=0,i=(o=ve(e)).length;r<i;r++)s=o[r],u=a[r],void 0,"input"===(l=u.nodeName.toLowerCase())&&pe.test(s.type)?u.checked=s.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ve(e),a=a||ve(c),r=0,i=o.length;r<i;r++)Me(o[r],a[r]);else Me(e,c);return 0<(a=ve(c,"script")).length&&ye(a,!f&&ve(e,"script")),c},cleanData:function(e){for(var t,n,r,i=k.event.special,o=0;void 0!==(n=e[o]);o++)if(G(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?k.event.remove(n,r):k.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),k.fn.extend({detach:function(e){return We(this,e,!0)},remove:function(e){return We(this,e)},text:function(e){return _(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ie(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)})},prepend:function(){return Ie(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return _(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!qe.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Ie(this,arguments,function(e){var t=this.parentNode;k.inArray(this,n)<0&&(k.cleanData(ve(this)),t&&t.replaceChild(e,this))},n)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){k.fn[e]=function(e){for(var t,n=[],r=k(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),k(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var $e=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Be=new RegExp(re.join("|"),"i");function _e(e,t,n){var r,i,o,a,s=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||oe(e)||(a=k.style(e,t)),!y.pixelBoxStyles()&&$e.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(s).appendChild(u);var e=C.getComputedStyle(u);n="1%"!==e.top,a=12===t(e.marginLeft),u.style.right="60%",o=36===t(e.right),r=36===t(e.width),u.style.position="absolute",i=12===t(u.offsetWidth/3),ie.removeChild(s),u=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s=E.createElement("div"),u=E.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===u.style.backgroundClip,k.extend(y,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),i}}))}();var Ue=["Webkit","Moz","ms"],Xe=E.createElement("div").style,Ve={};function Ge(e){var t=k.cssProps[e]||Ve[e];return t||(e in Xe?e:Ve[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;while(n--)if((e=Ue[n]+t)in Xe)return e}(e)||e)}var Ye=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function Ze(e,t,n){var r=ne.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function et(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=k.css(e,n+re[a],!0,i)),r?("content"===n&&(u-=k.css(e,"padding"+re[a],!0,i)),"margin"!==n&&(u-=k.css(e,"border"+re[a]+"Width",!0,i))):(u+=k.css(e,"padding"+re[a],!0,i),"padding"!==n?u+=k.css(e,"border"+re[a]+"Width",!0,i):s+=k.css(e,"border"+re[a]+"Width",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function tt(e,t,n){var r=Fe(e),i=(!y.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,r),o=i,a=_e(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if($e.test(a)){if(!n)return a;a="auto"}return(!y.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===k.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===k.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+et(e,t,n||(i?"border":"content"),o,r,a)+"px"}function nt(e,t,n,r,i){return new nt.prototype.init(e,t,n,r,i)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=_e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=Qe.test(t),l=e.style;if(u||(t=Ge(s)),a=k.cssHooks[t]||k.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"===(o=typeof n)&&(i=ne.exec(n))&&i[1]&&(n=le(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(k.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return Qe.test(t)||(t=Ge(s)),(a=k.cssHooks[t]||k.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=_e(e,t,r)),"normal"===i&&t in Ke&&(i=Ke[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),k.each(["height","width"],function(e,u){k.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?tt(e,u,n):ue(e,Je,function(){return tt(e,u,n)})},set:function(e,t,n){var r,i=Fe(e),o=!y.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===k.css(e,"boxSizing",!1,i),s=n?et(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-et(e,u,"border",!1,i)-.5)),s&&(r=ne.exec(t))&&"px"!==(r[3]||"px")&&(e.style[u]=t,t=k.css(e,u)),Ze(0,t,s)}}}),k.cssHooks.marginLeft=ze(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(_e(e,"marginLeft"))||e.getBoundingClientRect().left-ue(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(i,o){k.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+re[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(k.cssHooks[i+o].set=Ze)}),k.fn.extend({css:function(e,t){return _(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Fe(e),i=t.length;a<i;a++)o[t[a]]=k.css(e,t[a],!1,r);return o}return void 0!==n?k.style(e,t,n):k.css(e,t)},e,t,1<arguments.length)}}),((k.Tween=nt).prototype={constructor:nt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(k.cssNumber[n]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,n=nt.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):nt.propHooks._default.set(this),this}}).init.prototype=nt.prototype,(nt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[Ge(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=nt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=nt.prototype.init,k.fx.step={};var rt,it,ot,at,st=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function lt(){it&&(!1===E.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(lt):C.setTimeout(lt,k.fx.interval),k.fx.tick())}function ct(){return C.setTimeout(function(){rt=void 0}),rt=Date.now()}function ft(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=re[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function pt(e,t,n){for(var r,i=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function dt(o,e,t){var n,a,r=0,i=dt.prefilters.length,s=k.Deferred().always(function(){delete u.elem}),u=function(){if(a)return!1;for(var e=rt||ct(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return s.notifyWith(o,[l,n,t]),n<1&&i?t:(i||s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l]),!1)},l=s.promise({elem:o,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},t),originalProperties:e,originalOptions:t,startTime:rt||ct(),duration:t.duration,tweens:[],createTween:function(e,t){var n=k.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)l.tweens[t].run(1);return e?(s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l,e])):s.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=V(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=k.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=dt.prefilters[r].call(l,o,c,l.opts))return m(n.stop)&&(k._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return k.map(c,pt,l),m(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),k.fx.timer(k.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}k.Animation=k.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ne.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match(R);for(var n,r=0,i=e.length;r<i;r++)n=e[r],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&se(e),v=Q.get(e,"fxshow");for(r in n.queue||(null==(a=k._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,k.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],st.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||k.style(e,r)}if((u=!k.isEmptyObject(t))||!k.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=v&&v.display)&&(l=Q.get(e,"display")),"none"===(c=k.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=k.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===k.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(v?"hidden"in v&&(g=v.hidden):v=Q.access(e,"fxshow",{display:l}),o&&(v.hidden=!g),g&&fe([e],!0),p.done(function(){for(r in g||fe([e]),Q.remove(e,"fxshow"),d)k.style(e,r,d[r])})),u=pt(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),k.speed=function(e,t,n){var r=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var i=k.isEmptyObject(t),o=k.speed(e,n,r),a=function(){var e=dt(this,k.extend({},t),o);(i||Q.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(i,e,o){var a=function(e){var t=e.stop;delete e.stop,t(o)};return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&!1!==i&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=k.timers,r=Q.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&ut.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||k.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=Q.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=k.timers,o=n?n.length:0;for(t.finish=!0,k.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),k.each(["toggle","show","hide"],function(e,r){var i=k.fn[r];k.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(ft(r,!0),e,t,n)}}),k.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){k.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),rt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){it||(it=!0,lt())},k.fx.stop=function(){it=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(r,e){return r=k.fx&&k.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=C.setTimeout(e,r);t.stop=function(){C.clearTimeout(n)}})},ot=E.createElement("input"),at=E.createElement("select").appendChild(E.createElement("option")),ot.type="checkbox",y.checkOn=""!==ot.value,y.optSelected=at.selected,(ot=E.createElement("input")).value="t",ot.type="radio",y.radioValue="t"===ot.value;var ht,gt=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return _(this,k.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?k.prop(e,t,n):(1===o&&k.isXMLDoc(e)||(i=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=k.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(R);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var a=gt[t]||k.find.attr;gt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=gt[o],gt[o]=r,r=null!=a(e,t,n)?o:null,gt[o]=i),r}});var vt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function mt(e){return(e.match(R)||[]).join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}k.fn.extend({prop:function(e,t){return _(this,k.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&k.isXMLDoc(e)||(t=k.propFix[t]||t,i=k.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),y.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){k(this).addClass(t.call(this,e,xt(this)))});if((e=bt(t)).length)while(n=this[u++])if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){a=0;while(o=e[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){k(this).removeClass(t.call(this,e,xt(this)))});if(!arguments.length)return this.attr("class","");if((e=bt(t)).length)while(n=this[u++])if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){a=0;while(o=e[a++])while(-1<r.indexOf(" "+o+" "))r=r.replace(" "+o+" "," ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(i,t){var o=typeof i,a="string"===o||Array.isArray(i);return"boolean"==typeof t&&a?t?this.addClass(i):this.removeClass(i):m(i)?this.each(function(e){k(this).toggleClass(i.call(this,e,xt(this),t),t)}):this.each(function(){var e,t,n,r;if(a){t=0,n=k(this),r=bt(i);while(e=r[t++])n.hasClass(e)?n.removeClass(e):n.addClass(e)}else void 0!==i&&"boolean"!==o||((e=xt(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===i?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&-1<(" "+mt(xt(n))+" ").indexOf(t))return!0;return!1}});var wt=/\r/g;k.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=m(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,k(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=k.map(t,function(e){return null==e?"":e+""})),(r=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=k.valHooks[t.type]||k.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(wt,""):null==e?"":e:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:mt(k.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=k(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=k.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<k.inArray(k.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<k.inArray(k(e).val(),t)}},y.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in C;var Tt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,p=[n||E],d=v.call(e,"type")?e.type:e,h=v.call(e,"namespace")?e.namespace.split("."):[];if(o=f=a=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!Tt.test(d+k.event.triggered)&&(-1<d.indexOf(".")&&(d=(h=d.split(".")).shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,(e=e[k.expando]?e:new k.Event(d,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:k.makeArray(t,[e]),c=k.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||d,Tt.test(s+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||E)&&p.push(a.defaultView||a.parentWindow||C)}i=0;while((o=p[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||d,(l=(Q.get(o,"events")||{})[e.type]&&Q.get(o,"handle"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&G(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!G(n)||u&&m(n[d])&&!x(n)&&((a=n[u])&&(n[u]=null),k.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,Ct),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,Ct),k.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(r,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),y.focusin||k.each({focus:"focusin",blur:"focusout"},function(n,r){var i=function(e){k.event.simulate(r,e.target,k.event.fix(e))};k.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=Q.access(e,r);t||e.addEventListener(n,i,!0),Q.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=Q.access(e,r)-1;t?Q.access(e,r,t):(e.removeEventListener(n,i,!0),Q.remove(e,r))}}});var Et=C.location,kt=Date.now(),St=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var Nt=/\[\]$/,At=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function qt(n,e,r,i){var t;if(Array.isArray(e))k.each(e,function(e,t){r||Nt.test(n)?i(n,t):qt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==w(e))i(n,e);else for(t in e)qt(n+"["+t+"]",e[t],r,i)}k.param=function(e,t){var n,r=[],i=function(e,t){var n=m(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){i(this.name,this.value)});else for(n in e)qt(n,e[n],t,i);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&jt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(e){return{name:t.name,value:e.replace(At,"\r\n")}}):{name:t.name,value:n.replace(At,"\r\n")}}).get()}});var Lt=/%20/g,Ht=/#.*$/,Ot=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:GET|HEAD)$/,Mt=/^\/\//,It={},Wt={},$t="*/".concat("*"),Ft=E.createElement("a");function Bt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(R)||[];if(m(t))while(n=i[r++])"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function _t(t,i,o,a){var s={},u=t===Wt;function l(e){var r;return s[e]=!0,k.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||u||s[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!s["*"]&&l("*")}function zt(e,t){var n,r,i=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&k.extend(!0,e,r),e}Ft.href=Et.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,k.ajaxSettings),t):zt(k.ajaxSettings,e)},ajaxPrefilter:Bt(It),ajaxTransport:Bt(Wt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,v=k.ajaxSetup({},t),y=v.context||v,m=v.context&&(y.nodeType||y.jquery)?k(y):k.event,x=k.Deferred(),b=k.Callbacks("once memory"),w=v.statusCode||{},a={},s={},u="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n){n={};while(t=Pt.exec(p))n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2])}t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(x.promise(T),v.url=((e||v.url||Et.href)+"").replace(Mt,Et.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(R)||[""],null==v.crossDomain){r=E.createElement("a");try{r.href=v.url,r.href=r.href,v.crossDomain=Ft.protocol+"//"+Ft.host!=r.protocol+"//"+r.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=k.param(v.data,v.traditional)),_t(It,v,t,T),h)return T;for(i in(g=k.event&&v.global)&&0==k.active++&&k.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Rt.test(v.type),f=v.url.replace(Ht,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Lt,"+")):(o=v.url.slice(f.length),v.data&&(v.processData||"string"==typeof v.data)&&(f+=(St.test(f)?"&":"?")+v.data,delete v.data),!1===v.cache&&(f=f.replace(Ot,"$1"),o=(St.test(f)?"&":"?")+"_="+kt+++o),v.url=f+o),v.ifModified&&(k.lastModified[f]&&T.setRequestHeader("If-Modified-Since",k.lastModified[f]),k.etag[f]&&T.setRequestHeader("If-None-Match",k.etag[f])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+$t+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(i,v.headers[i]);if(v.beforeSend&&(!1===v.beforeSend.call(y,T,v)||h))return T.abort();if(u="abort",b.add(v.complete),T.done(v.success),T.fail(v.error),c=_t(Wt,v,t,T)){if(T.readyState=1,g&&m.trigger("ajaxSend",[T,v]),h)return T;v.async&&0<v.timeout&&(d=C.setTimeout(function(){T.abort("timeout")},v.timeout));try{h=!1,c.send(a,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,r){var i,o,a,s,u,l=t;h||(h=!0,d&&C.clearTimeout(d),c=void 0,p=r||"",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(v,T,n)),s=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(v,s,T,i),i?(v.ifModified&&((u=T.getResponseHeader("Last-Modified"))&&(k.lastModified[f]=u),(u=T.getResponseHeader("etag"))&&(k.etag[f]=u)),204===e||"HEAD"===v.type?l="nocontent":304===e?l="notmodified":(l=s.state,o=s.data,i=!(a=s.error))):(a=l,!e&&l||(l="error",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+"",i?x.resolveWith(y,[o,l,T]):x.rejectWith(y,[T,l,a]),T.statusCode(w),w=void 0,g&&m.trigger(i?"ajaxSuccess":"ajaxError",[T,v,i?o:a]),b.fireWith(y,[T,l]),g&&(m.trigger("ajaxComplete",[T,v]),--k.active||k.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,i){k[i]=function(e,t,n,r){return m(t)&&(r=r||n,n=t,t=void 0),k.ajax(k.extend({url:e,type:i,dataType:r,data:t,success:n},k.isPlainObject(e)&&e))}}),k._evalUrl=function(e,t){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return m(n)?this.each(function(e){k(this).wrapInner(n.call(this,e))}):this.each(function(){var e=k(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=m(t);return this.each(function(e){k(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Xt=k.ajaxSettings.xhr();y.cors=!!Xt&&"withCredentials"in Xt,y.ajax=Xt=!!Xt,k.ajaxTransport(function(i){var o,a;if(y.cors||Xt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Ut[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&C.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=k("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),E.head.appendChild(r[0])},abort:function(){i&&i()}}});var Vt,Gt=[],Yt=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||k.expando+"_"+kt++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Yt,"$1"+r):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||k.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=C[r],C[r]=function(){o=arguments},n.always(function(){void 0===i?k(C).removeProp(r):C[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(r)),o&&m(i)&&i(o[0]),o=i=void 0}),"script"}),y.createHTMLDocument=((Vt=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Vt.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,t.head.appendChild(r)):t=E),o=!n&&[],(i=D.exec(e))?[t.createElement(i[1])]:(i=we([e],t,o),o&&o.length&&k(o).remove(),k.merge([],i.childNodes)));var r,i,o},k.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=mt(e.slice(s)),e=e.slice(0,s)),m(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<a.length&&k.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?k("<div>").append(k.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=k.css(e,"position"),c=k(e),f={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=k.css(e,"top"),u=k.css(e,"left"),("absolute"===l||"fixed"===l)&&-1<(o+u).indexOf("auto")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),m(t)&&(t=t.call(e,n,k.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):c.css(f)}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===k.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),i.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-k.css(r,"marginTop",!0),left:t.left-i.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===k.css(e,"position"))e=e.offsetParent;return e||ie})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;k.fn[t]=function(e){return _(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),k.each(["top","left"],function(e,n){k.cssHooks[n]=ze(y.pixelPosition,function(e,t){if(t)return t=_e(e,n),$e.test(t)?k(e).position()[n]+"px":t})}),k.each({Height:"height",Width:"width"},function(a,s){k.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){k.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return _(this,function(e,t,n){var r;return x(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?k.css(e,t,i):k.style(e,t,n,i)},s,n?e:void 0,n)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){k.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),k.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),k.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||k.guid++,i},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=A,k.isFunction=m,k.isWindow=x,k.camelCase=V,k.type=w,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return k});var Qt=C.jQuery,Jt=C.$;return k.noConflict=function(e){return C.$===k&&(C.$=Jt),e&&C.jQuery===k&&(C.jQuery=Qt),k},e||(C.jQuery=C.$=k),k});

define("lib/jquery", function(){});

define('home',['lib/class', 'lib/underscore.min', 'lib/stacktrace', 'util', '../shared/js/itemtypes', '../shared/js/gametypes', 'main', 'lib/jquery'],
  function(Class, _, st, util, ItemTypes, Types, Main, $) {
    require.config({
        baseUrl: "js",
        waitSeconds: 20,
        paths: {
            home: 'home',
            jquery: 'lib/jquery',
            class: 'lib/class',
            itemtypes: '../shared/js/itemtypes',
            gametypes: '../shared/js/gametypes'
        },
        shim: {
            "jquery": {
                exports: ['jQuery', '$', 'jquery']
            },
            "class": {
                exports: ['Class']
            },
            "itemtypes": {
                exports: 'ItemTypes'
            },
            "gametypes": {
                exports: 'Types'
            },
            "home": {
                deps: ["jquery"]
            }
        }

    });

    //var Main = require(['main']);
    return Main;
});

